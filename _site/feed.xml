<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-27T14:03:14+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> Jung Mirae</title><subtitle></subtitle><author><name>Mirae</name></author><entry><title type="html">SwiftUI Tutorials</title><link href="http://localhost:4000/til/2024-04-09-swiftui-concepts-tutorials.html" rel="alternate" type="text/html" title="SwiftUI Tutorials" /><published>2024-04-09T00:00:00+09:00</published><updated>2024-04-09T00:00:00+09:00</updated><id>http://localhost:4000/til/swiftui-concepts-tutorials</id><content type="html" xml:base="http://localhost:4000/til/2024-04-09-swiftui-concepts-tutorials.html"><![CDATA[<h1 id="색-정의하기">색 정의하기</h1>
<blockquote>
  <p>Define colors in the asset catalog</p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="c1">// global property</span>
<span class="k">let</span> <span class="nv">gradientColors</span><span class="p">:</span> <span class="p">[</span><span class="kt">Color</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="o">.</span><span class="n">gradientTop</span><span class="p">,</span>
    <span class="o">.</span><span class="n">gradientBottom</span>
<span class="p">]</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="c1">//...</span>
<span class="p">}</span>
</code></pre></div></div>
<p>에셋 카탈로그에 ‘GradientTop’, ‘GradientBottom’라는 이름의 Color set을 추가했습니다.<br />
Xcode가 자동으로 카멜케이스 스타일의 컬러 밸류를 생성합니다. (.gradientTop, .gradientBottom)</p>
<blockquote>
  <p>‘Gradient_Top’이라는 이름도 .gradientTop으로 변환됩니다.
gradientColors 속성은 최상단 레벨에 작성되었고 이런 프로퍼티(=속성)을 글로벌 프로퍼티라고 합니다.<br />
글로벌 프로퍼티는 모든 파일, 모든 코드에서 사용할 수 있게 됩니다.</p>
</blockquote>

<h1 id="text-뷰">Text 뷰</h1>

<p>Text 뷰는 읽기 전용 텍스트를 보여주는 뷰입니다. 텍스트 뷰는 타이틀과 같은 짧은 String, 또는 글의 내용과 같이 긴 String을 컨텐츠로 가질 수 있습니다.</p>

<h1 id="mutating-함수">mutating 함수</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 뷰가 새 레시피를 추가하는 화면을 보이도록 상태를 변경하는 함수</span>
<span class="k">mutating</span> <span class="kd">func</span> <span class="nf">presentAddRecipe</span><span class="p">(</span><span class="nv">sidebar</span><span class="p">:</span> <span class="kt">SidebarItem</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">recipe</span> <span class="o">=</span> <span class="kt">Recipe</span><span class="o">.</span><span class="nf">emptyRecipe</span><span class="p">()</span>
    <span class="c1">// ...</span>
    <span class="n">shouldSaveChanges</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">isPresented</span> <span class="o">=</span> <span class="kc">true</span>
<span class="p">}</span>
</code></pre></div></div>
<p>함수가 위치한 structure 안에 정의된 변수인 shouldSaveChanges, isPresented의 값을 변경시키기 때문에 mutating 키워드를 사용하여 작성함</p>

<h1 id="sheet-modifier">.Sheet modifier</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="nf">sheet</span><span class="p">(</span><span class="nv">isPresented</span><span class="p">:</span> <span class="err">$</span><span class="n">recipeEditorConfig</span><span class="o">.</span><span class="n">isPresented</span><span class="p">,</span>
<span class="nv">onDismiss</span><span class="p">:</span> <span class="n">didDismissEditor</span><span class="p">)</span> <span class="p">{</span>
<span class="kt">RecipeEditor</span><span class="p">(</span><span class="nv">config</span><span class="p">:</span> <span class="err">$</span><span class="n">recipeEditorConfig</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<p>위의 sheet modifier는 recipeEditorConfig.isPresented 값을 바인딩으로 받는다.<br />
그러므로 isPresented 값을 read / write 할 수 있게 된다. 만약 사용자가 아래 방향으로 스와이핑하여 시트가 아래로 내려가면,<br />
isPresented의 값이 false로 변경되고, SwiftUI가 뷰를 다시 초기화하고, 다시 그린다. 그러하여 더이상 sheet가 올라와있지 않게 된다.</p>

<h1 id="design-a-custom-control">Design a custom control</h1>

<p>커스텀 컨트롤을 구현하기 전에 생각해 볼 것이 있다.<br />
어떤 데이터가 필요한지, 그 데이터를 사용하여 뭘 하는지, 그리고 데이터를 뷰에 어떻게 보여줄 것인지이다.</p>

<h1 id="specifying-the-source-of-truth">Specifying the source of truth</h1>

<p>이 샘플 앱은 커스텀 뷰인 DetailView에서 레시피의 세부사항을 보여주는데, DetailView는 레시피의 id만 알고 있다. 
레시피의 세부사항은 recipe box라는 데이터 스토어에 담겨 있는데, 이 세부사항을 가져와 DetailView에서 보여주기 위해 커스텀 바인딩을 사용한다.
DetailView에서 State를 사용하여 원천데이터를 정의하는 것이 아니고, 데이터 스토어에서 커스텀 바인딩과 id를 통해 데이터를 가져오는 것이다.</p>

<blockquote>
  <p>Note
커스텀을 바인딩은 state 변수로 원천데이터를 정의할 수 없을 떄, state object를 사용하여 모델 데이터를 공유할 수 없을 때만 사용한다.</p>
</blockquote>

<h2 id="여기서는-왜-커스텀-바인딩을-사용했는가">여기서는 왜 커스텀 바인딩을 사용했는가?</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="k">var</span> <span class="nv">recipe</span><span class="p">:</span> <span class="kt">Binding</span><span class="o">&lt;</span><span class="kt">Recipe</span><span class="o">&gt;</span> <span class="p">{</span>

<span class="p">}</span>
</code></pre></div></div>
<p>state 변수를 정의하는 대신, recipe라는 computed property를 선언했다.
recipe는 Recipe를 리턴하지 않고, Recipe 타입의 커스텀 바인딩을 리턴한다.</p>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[색 정의하기 Define colors in the asset catalog]]></summary></entry><entry><title type="html">CW Project</title><link href="http://localhost:4000/til/2024-01-04-CW-project.html" rel="alternate" type="text/html" title="CW Project" /><published>2024-01-04T00:00:00+09:00</published><updated>2024-01-04T00:00:00+09:00</updated><id>http://localhost:4000/til/CW-project</id><content type="html" xml:base="http://localhost:4000/til/2024-01-04-CW-project.html"><![CDATA[<ul>
  <li>EKEventStore 객체를 사용하여 달력 이벤트와 리마인더…</li>
</ul>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[EKEventStore 객체를 사용하여 달력 이벤트와 리마인더…]]></summary></entry><entry><title type="html">앱 Your Music 작성기</title><link href="http://localhost:4000/til/2023-12-03-YourMusicApp.html" rel="alternate" type="text/html" title="앱 Your Music 작성기" /><published>2023-12-03T00:00:00+09:00</published><updated>2023-12-03T00:00:00+09:00</updated><id>http://localhost:4000/til/YourMusicApp</id><content type="html" xml:base="http://localhost:4000/til/2023-12-03-YourMusicApp.html"><![CDATA[<blockquote>
  <p>첫번째 목표… Spotify API 호출하기</p>
</blockquote>

<h1 id="authorization">Authorization</h1>

<ul>
  <li>모든 Spotify Web API로의 요청은 권한이 필요.</li>
  <li>웹 API를 통해서 프라이빗한 정보에 접근하기 위해서는 사용자의 동의를 받아야 함.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://accounts.spotify.com/en/authorize?client_id=클라이언트아이디값&amp;response_type=token&amp;redirect_uri=https://open.spotify.com/
</code></pre></div></div>

<ul>
  <li>위 주소로 토큰을 받는 네트워크 요청을 보내봄.</li>
</ul>

<center><img src="/assets/images/YourMusic_20231203.png" alt="YourMusic_20231203" width="400" /></center>
<p><br /></p>

<ul>
  <li>위와 같이 사용자의 동의를 얻는 화면이 나타남.</li>
  <li>동의하면 redirect_uri 주소로 이동하며 아래와 같이 access token을 얻게 됨.</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://open.spotify.com/#access_token=토큰값&amp;token_type=Bearer&amp;expires_in=3600
</code></pre></div></div>
<ul>
  <li>이 토큰은 한시간동안 유효함.</li>
</ul>

<p>https://open.spotify.com/#access_token=BQDhgN0-a0A2rk3b6XuI1__aTDzPF1YUDdfvHb5HlH7JN_jv8zBQH1isxdlDnnDxz_nMXZ8636l63lRAwEu3VY7jYxKPGvLaWjw0ioQdDlH_pGhGyn8OriokdN3jab9bvkco9bXchwbrKic5SkZCGGMVQ_azzw0-UX767m64YdxC4SfyVRtAixa_x_EyvGBohXY&amp;token_type=Bearer&amp;expires_in=3600</p>

<ul>
  <li>client secret이 안전하게 보관될 수 없는 환경에는 PKCE를 통한 권한 요청을 할 것을 추천함.</li>
  <li>code verifier를 생성하는 것으로 PKCE 권한 요청 플로우를 시작함.</li>
</ul>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[첫번째 목표… Spotify API 호출하기]]></summary></entry><entry><title type="html">SwiftUI Essentials 튜토리얼을 따라가며 정리</title><link href="http://localhost:4000/til/2023-10-10-SwiftUIEssentials.html" rel="alternate" type="text/html" title="SwiftUI Essentials 튜토리얼을 따라가며 정리" /><published>2023-10-10T00:00:00+09:00</published><updated>2023-10-10T00:00:00+09:00</updated><id>http://localhost:4000/til/SwiftUIEssentials</id><content type="html" xml:base="http://localhost:4000/til/2023-10-10-SwiftUIEssentials.html"><![CDATA[<p><a href="https://developer.apple.com/tutorials/swiftui/drawing-paths-and-shapes">SwiftUI Essentials</a></p>
<blockquote>
  <p>이 글은 위 튜토리얼을 따라가며 정리한 내용입니다.</p>
</blockquote>

<h1 id="drawing-paths-and-shapes">Drawing paths and shapes</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">BadgeBackground</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Path</span> <span class="p">{</span> <span class="n">path</span> <span class="k">in</span>
            <span class="k">var</span> <span class="nv">width</span><span class="p">:</span> <span class="kt">CGFloat</span> <span class="o">=</span> <span class="mf">100.0</span>
            <span class="k">let</span> <span class="nv">height</span> <span class="o">=</span> <span class="n">width</span>
            <span class="n">path</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span>
                <span class="nv">to</span><span class="p">:</span> <span class="kt">CGPoint</span><span class="p">(</span>
                    <span class="nv">x</span><span class="p">:</span> <span class="n">width</span> <span class="o">*</span> <span class="mf">0.95</span><span class="p">,</span>
                    <span class="nv">y</span><span class="p">:</span> <span class="n">height</span> <span class="o">*</span> <span class="mf">0.20</span>
                <span class="p">)</span>
            <span class="p">)</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Path shape을 추가하고, fill() modifier를 적용하여 shape을 view로 만들어 줍니다. paths는 선, 곡선 등의 기초 요소를 혼합하여 더 복잡한 모양을 그리는 곳에 사용됩니다.<br />
100*100px 사이즈의 컨테이너를 path의 시작점으로 설정해줍니다. path.move(to:) 메서드는 드로잉 커서를 움직입니다.</p>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[SwiftUI Essentials 이 글은 위 튜토리얼을 따라가며 정리한 내용입니다. Drawing paths and shapes]]></summary></entry><entry><title type="html">앱 Scrumdinger 튜토리얼을 따라가며 정리</title><link href="http://localhost:4000/til/2023-10-10-Scrumdinger.html" rel="alternate" type="text/html" title="앱 Scrumdinger 튜토리얼을 따라가며 정리" /><published>2023-10-10T00:00:00+09:00</published><updated>2023-10-10T00:00:00+09:00</updated><id>http://localhost:4000/til/Scrumdinger</id><content type="html" xml:base="http://localhost:4000/til/2023-10-10-Scrumdinger.html"><![CDATA[<p><a href="https://developer.apple.com/tutorials/app-dev-training/managing-data-flow-between-views">Scrumdinger app tutorial</a></p>
<blockquote>
  <p>이 글은 위 튜토리얼을 따라가며 정리한 내용입니다.</p>
</blockquote>

<h1 id="create-a-color-theme">Create a color theme</h1>

<p>앱 전체에 일관된 스타일을 주기 위해 컬러 테마를 생성하기.</p>

<ul>
  <li>
    <p>뷰 파일이 아니지만 Foundation을 제거하고 SwiftUI를 import (SwiftUI 프레임워크의 Color을 사용하기 때문)</p>

    <blockquote>
      <p>SwiftUI는 컬러를 뷰 계층에 바로 추가할 수 있는 하나의 뷰 인스턴스로 취급함.</p>
    </blockquote>
  </li>
  <li>
    <p>String 타입의 값을 raw value로 가지는 enum 생성</p>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">Theme</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">bubblegum</span>
    <span class="k">case</span> <span class="n">buttercup</span>
    <span class="k">case</span> <span class="n">indigo</span>
    <span class="k">case</span> <span class="n">lavender</span>
    
    <span class="k">var</span> <span class="nv">accentColor</span><span class="p">:</span> <span class="kt">Color</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="n">bubblegum</span><span class="p">,</span> <span class="o">.</span><span class="n">buttercup</span><span class="p">,</span> <span class="o">.</span><span class="nv">lavender</span><span class="p">:</span> <span class="k">return</span> <span class="o">.</span><span class="n">black</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">indigo</span><span class="p">:</span> <span class="k">return</span> <span class="o">.</span><span class="n">white</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<blockquote>
  <p>위와 같이 case 이름만 작성해주면 Swift가 자동으로 스트링 타입의 raw value를 생성함. 
enum 안에 switch self를 사용하여 case 별로 값을 리턴하는 컬러 프로퍼티를 생성</p>
</blockquote>

<h1 id="managing-data-flow-between-views">Managing data flow between views</h1>
<h2 id="source-of-truth">Source of truth</h2>
<blockquote>
  <p>source of truth == 원천데이터</p>
</blockquote>

<p>원천데이터를 사용하지 않으면 뷰에 나타나는 데이터가 불일치하는 버그가 생길 수 있음.<br />
데이터를 가지고 있는 요소를 한 장소에 보관하고 뷰들이 그 데이터에 접근하도록 함.<br />
앱 전체 코드를 통하는 원천데이터를 생성할 수도 있음. 원천 데이터를 정의하는 방식과 위치는 여러 뷰들 사이에서 공유되는 데이터인지, 변하는 데이터인지에 따라 다름.</p>

<h2 id="swift-property-wrappers">Swift property wrappers</h2>
<p>스위프트의 프로퍼티 래퍼를 사용하여 특정 행동을 하는 속성을 만들 수 있음.<br />
일반적으로 많이 사용되는 속성의 동작들을 캡슐화 해놓은 것.</p>

<p><b>State</b>는 그런 프로퍼티 래퍼중 하나로 뷰 안에서 원천데이터를 생성함.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@State</span>
</code></pre></div></div>
<p>사용자의 상호작용으로 @State 속성의 값이 변경될 수 있음. 이때 시스템은 이 새로운 값을 가진 버전의 뷰를 자동으로 다시 그림. state 속성은 일시적인 상태를 관리하는 것에 사용됨. (예: 버튼의 상태, 필터링 버튼, 현재 선택된 리스트 아이템..) 그렇기 떄문에 private으로 선언함. (한 뷰 안에서 일시적으로 변화되는 값들이기 때문에..) 같은 이유로 영속적으로 보관되어야 하는 데이터에는 사용하지 않음.</p>

<p>@State 프로퍼티 래퍼는 하나의 뷰 안에서 변경되는 원천 데이터를 담기 위해 사용되는데, 만약 여러개의 뷰 계층 속에서 같은 원천데이터를 사용하고 싶다면..?</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@Binding</span>
</code></pre></div></div>
<p><b>Binding</b>은 state 속성과 똑같이 원천데이터를 읽거나 값을 변경할 수 있음.<br />
@Binding은 데이터를 직접 담지 않고 원천 데이터와 뷰 사이에 양방향 커넥션을 생성함.<br />
이 커넥션은 하나의 데이터와 관련된 뷰들이 같은 데이터 상태를 가지도록 함. 
시스템은 원천데이터를 가진 부모뷰와 @Binding을 가진 자식뷰의 관계를 성립시킴.<br />
이때는 자식뷰, 부모뷰 모두 원천데이터를 읽거나, 수정할 수 있음. 만약 자식뷰가 read-only 속성을 가지고 있다면, 원천데이터를 보내기만 할 수 있음. (수정은 안됨.)
두 경우 모두, 프레임워크가 자동으로 뷰를 업데이트 함.</p>

<h1 id="making-classes-observable">Making classes observable</h1>
<h2 id="working-with-reference-types">Working with reference types</h2>
<p>@State 속성은 구조체나 열거형과 같은 value type 원천데이터만 정의할 수 있다.<br />
클래스와 같은 reference type인 원천데이터를 정의하려면 @State가 아닌 아래 세가지 프로퍼티 래퍼를 사용해야 한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@ObservedObject</span> 
<span class="kd">@StateObject</span> 
<span class="kd">@EnvironmentObject</span>
</code></pre></div></div>
<p>이 프로퍼티 래퍼들을 사용하려면 먼저 원천데이터가 될 클래스를 observable한 상태로 만들어주어야 한다.</p>

<h2 id="making-a-class-observable">Making a class observable</h2>
<p>ObservableObject 프로토콜을 따르는 클래스를 생성하여 클래스를 observable 하도록 만들 수 있다. (observable의 사전적 의미 중 하나는 ‘관찰할 수 있는’이다. 클래스를 observable 하도록 만든다는 건, 다른 어떤 것들이 이 클래스를 관찰할 수 있도록 만든다는 것이다.)</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ScrumTimer</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
   <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">activeSpeaker</span> <span class="o">=</span> <span class="s">""</span>
   <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">secondsElapsed</span> <span class="o">=</span> <span class="mi">0</span>
   <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">secondsRemaining</span> <span class="o">=</span> <span class="mi">0</span>
   <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>
<p>이 클래스 안에서 위 세개의 속성들은 자신의 값이 변할 때 UI를 업데이트 해야한다. 이런 속성들은 @Published를 사용하여 정의한다. 이 published property의 값이 변경될 때 ScrumTimer가 자신을 관찰하고 있는 관찰자에게 이 변경사항을 알린다.</p>

<h2 id="monitoring-an-object-for-changes">Monitoring an object for changes</h2>
<p>ObservedObject, StateObject, EnvironmentObject 이 세가지의 속성 중 하나를 사용하여 SwiftUI가 observable 객체를 모니터링하도록 할 수 있다. 이 속성을 사용하여 정의된 프로퍼티는 원천데이터가 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">MeetingView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
   <span class="kd">@StateObject</span> <span class="k">var</span> <span class="nv">scrumTimer</span> <span class="o">=</span> <span class="kt">ScrumTimer</span><span class="p">()</span>
   <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>
<p>@StateObject 래퍼를 사용하여 observable 객체를 생성한다. App, Scene, View에서 스테이트 객체를 생성할 수 있다. 시스템이 스테이트 객체를 초기화하면 해당 스트럭처 또는 객체를 전달 받은 다른 뷰에서 해당 객체를 사용할 수 있다.</p>

<!--```swift-->
<!--struct ChildView: View {-->
<!--   @ObservedObject var timer: ScrumTimer-->
<!--   // ...-->
<!--}-->
<!--``` 여기부터 이어서 작성하기.. -->

<h1 id="managing-state-and-life-cycle">Managing state and life cycle</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">MeetingFooterView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">speakers</span><span class="p">:</span> <span class="p">[</span><span class="kt">ScrumTimer</span><span class="o">.</span><span class="kt">Speaker</span><span class="p">]</span>

    <span class="kd">private</span> <span class="k">var</span> <span class="nv">isLastSpeaker</span><span class="p">:</span> <span class="kt">Bool</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">speakers</span><span class="o">.</span><span class="nf">dropLast</span><span class="p">()</span><span class="o">.</span><span class="n">allSatisfy</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">isCompleted</span> <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>🖍️ 이 뷰 안에서만 필요한 computed property이기 때문에 private으로 선언<br />
🖍️ dropLast()를 사용하여 speakers 배열의 마지막 요소를 제외한 배열을 리턴함.<br />
🖍️ allSatisfy()를 사용하여 마지막 speaker를 제외한 모든 speakers의 isCompleted 이 true라는 bool 값을 리턴함.</p>

<p><b>dropLast(_:)</b></p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">numbers</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">numbers</span><span class="o">.</span><span class="nf">dropLast</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
<span class="c1">// Prints "[1, 2, 3]"</span>
<span class="nf">print</span><span class="p">(</span><span class="n">numbers</span><span class="o">.</span><span class="nf">dropLast</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
<span class="c1">// Prints "[]"</span>
</code></pre></div></div>
<p>🖍️ 마지막 요소만 제외하거나, 제외할 요소의 수를 정할 수 있음. 위 코드에서는 2를 통과시켜 맨 뒤에서부터 배열의 요소 2개를 제외한 배열을 리턴
🖍️ 배열의 카운트보다 큰 수를 통과시킬 경우 빈 배열을 리턴</p>

<p><b>allSatisfy(_:)</b></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">names</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Sofia"</span><span class="p">,</span> <span class="s">"Camilla"</span><span class="p">,</span> <span class="s">"Martina"</span><span class="p">,</span> <span class="s">"Mateo"</span><span class="p">,</span> <span class="s">"Nicolás"</span><span class="p">]</span>
<span class="k">let</span> <span class="nv">allHaveAtLeastFive</span> <span class="o">=</span> <span class="n">names</span><span class="o">.</span><span class="nf">allSatisfy</span><span class="p">({</span> <span class="nv">$0</span><span class="o">.</span><span class="n">count</span> <span class="o">&gt;=</span> <span class="mi">5</span> <span class="p">})</span>
<span class="c1">// allHaveAtLeastFive == true</span>
</code></pre></div></div>
<p>🖍️ 배열의 모든 요소가 5자 이상인 이름인지를 bool 값으로 리턴함.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="c1">/// Keeps time for a daily scrum meeting. Keep track of the total meeting time, the time for each speaker, and the name of the current speaker.</span>

<span class="kd">@MainActor</span>
<span class="kd">final</span> <span class="kd">class</span> <span class="kt">ScrumTimer</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="c1">/// A struct to keep track of meeting attendees during a meeting.</span>
    <span class="kd">struct</span> <span class="kt">Speaker</span><span class="p">:</span> <span class="kt">Identifiable</span> <span class="p">{</span>
        <span class="c1">/// The attendee name.</span>
        <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
        <span class="c1">/// True if the attendee has completed their turn to speak.</span>
        <span class="k">var</span> <span class="nv">isCompleted</span><span class="p">:</span> <span class="kt">Bool</span>
        <span class="c1">/// Id for Identifiable conformance.</span>
        <span class="k">let</span> <span class="nv">id</span> <span class="o">=</span> <span class="kt">UUID</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="c1">// ...</span>
<span class="p">}</span>
</code></pre></div></div>
<p>🖍️ 주석 /// 을 사용하여 Xcode에서 보여지는 문서를 작성할 수 있음</p>

<p><img src="/assets/images/writingDocs.png" alt="writingDocs" width="550" /><br /></p>

<h2 id="adopting-swift-concurrency">Adopting Swift Concurrency</h2>

<blockquote>
  <p>Swift 코드로 복잡한 비동기 작업을 단순화 해보자!</p>
</blockquote>

<p>SwiftUI 앱에서는 메인 스레드가 모든 UI 작업을 실행한다. 또, 탭하거나 스와이프하는 것과 같은 유저 이벤트를 처리한다. 앱이 제대로 작동하기 위해서는 모든 뷰 업데이트 작업과 이벤트 핸들러를 메인 스레드에서 실행해야 한다.<br />
하지만 만약 모든 작업을 메인 스레드에서 처리한다면 앱이 느린 것과 같이 느껴질 수 있다.<br />
만약 메인 스레드가 모든 코드를 처리하는 것을 기다려야 한다면, 앱이 느리거나 심지어 멈춘 것처럼 느껴질 수 있다.<br />
그렇기 때문에 가능한 작업은 백그라운드 스레드에서 실행하고, 꼭 필요한 작업을 메인 스레드에서 실행하며 균형을 맞춰야 한다.</p>

<p>디스크에 있는 데이터를 읽고, 디스크에 데이터를 입력하는 작업을 비동기적으로 작성해보자.<br />
이 작업에서는 스위프트의 비동기 함수, Task 타입, @MainActor 어노테이션을 사용할 것이다.</p>

<h3 id="defining-an-asynchronous-function">Defining an asynchronous function</h3>

<p>비동기 함수는 파라미터 리스트 뒤에 async 키워드를 추가하여 정의한다. 리턴값이 있을 경우 리턴 애로우 앞쪽에 표시한다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">UserStore</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">fetchParticipants</span><span class="p">()</span> <span class="n">asyns</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Participant</span><span class="p">]</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="calling-an-asynchronous-function">Calling an asynchronous function</h3>

<p>await 키워드를 사용하여 비동기 함수를 호출한다. await 키워드는 비동기적인 흐름, 문맥에서만 사용할 수 있다. 아래 UserStore 클래스는 비동기 함수인 refresh() 안에서 fetchParticipants() 함수를 await를 사용해서 호출하고 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">UserStore</span> <span class="p">{</span>

    <span class="kd">func</span> <span class="nf">refresh</span><span class="p">()</span> <span class="k">async</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">UserRecord</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">participants</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetchParticipants</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">records</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetchRecords</span><span class="p">(</span><span class="nv">participants</span><span class="p">:</span> <span class="n">participants</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">records</span>
    <span class="p">}</span>
    
    <span class="kd">func</span> <span class="n">fetchParticipants</span> <span class="k">async</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Participant</span><span class="p">]</span> <span class="p">{</span><span class="o">...</span><span class="p">}</span>
    <span class="kd">func</span> <span class="nf">fetchRecords</span><span class="p">(</span><span class="nv">participants</span><span class="p">:</span> <span class="p">[</span><span class="kt">Participant</span><span class="p">])</span> <span class="k">async</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">UserRecord</span><span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>
<p>fetchParticipants()가 작업을 완료하는 동안 refresh() 함수는 잠시 멈춤. 
그동안 refresh()를 실행하는 스레드는 다른 작업을 할 수 있음. fetchParticipants()의 작업이 완료되면, 시스템은 refresh() 함수의 다음 라인을 실행함. fetchRecords(participants: participants) 함수가 호출할 때 fetchParticipants()의 리턴값을 사용할 수 있음. 비동기 함수를 사용하면 작성돼있는 순서로 코드를 실행함.</p>

<h3 id="creating-an-asynchronous-context">Creating an asynchronous context</h3>

<p>비동기 함수는 비동기적인 문맥상에서만 사용할 수 있다. 이 비동기적인 문맥은 거의 대부분 또 다른 비동기 함수나 클로저의 바디 부분이 될 것이다. 위 refresh() 함수가 비동기 함수로 작성되었기 때문에 또 다른 비동기 함수인 fetchParticipants()와 fetchRecords(participants:)를 호출할 수 있었다.<br />
동기적 문맥상에서 작동하는 API를 사용하는 것과 같은 동기적 문맥상에서 비동기 함수를 호출해야 하는 일이 빈번히 발생하는데, 이때 Task를 사용하여 비동기 함수를 호출 할 수 있다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">RefreshButton</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">@Binding</span> <span class="k">var</span> <span class="nv">model</span><span class="p">:</span> <span class="kt">ViewModel</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Buton</span><span class="p">(</span><span class="s">"Refresh"</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// 버튼의 액션 부분에서는 비동기 함수를 호출 할 수 없다.</span>
            <span class="kt">Task</span> <span class="p">{</span>
                <span class="c1">// Task를 생성하여 액션 클로저 안에 비동기적 문맥을 생성하여 비동기 함수를 호출할 수 있다. </span>
                <span class="k">await</span> <span class="n">model</span><span class="o">.</span><span class="nf">refresh</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>refresh() 함수가 리턴값을 가지고 있지 않고, 에러를 던지고 있지 않기 때문에 위의 코드는 정상적으로 동작한다. Task { } 안에서 리턴값이나 에러에 대한 처리를 수동적으로 처리하지 않으면 코드가 정상적으로 작동하지 않을 수 있다.<br />
뷰 모더파이어인 onAppear(perform:)도 동기적 클로저의 또 다른 예다. SwiftUI의 task(priority:_:) 모더파이어를 사용하여 뷰가 나타날 때 비동기 함수를 실행할 수 있다. task의 생명주기는 task 모더파이어가 적용된 뷰의 생명주기와 같다. 뷰가 사라지면 진행중인 task가 취소된다.</p>

<h3 id="updating-the-user-interface">Updating the user interface</h3>

<p>@State 와 @Binding 속성의 값이 변경되면 뷰가 업데이트 된다. 그렇기 때문에 이 값들을 변경시키는 것은 메인 스레드에서 실행되어야 한다. 비동기 함수는 백그라운드 스레드에서 실행될 수 있기 때문에 위와 같은 동작을 하는 함수를 비동기 함수로 실행하는 것은 문제가 될 수 있다.<br />
Swift는 메인 스레드와의 상호작용을 돕기 위한 어노테이션인 @MainActor를 제공한다. @MainActor 어노테이션이 적용된 클래스의 속성의 변경은 모두 메인 스레드에서 다뤄지게 된다. 아래 코드에서 UserStore 는 ObservableObject이다. 그리고 users 는 퍼블리시드 속성이다. @MainActor를 사용했기 때문에 users 속성을 수정하는 동작은 메인스 스레드에서 일어나게 되고, 안전하게 뷰를 변경하는 @Binding과 함꼐 사용할 수 있게 된다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@MainActor</span>
<span class="kd">class</span> <span class="kt">UserStore</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">users</span><span class="p">:</span> <span class="p">[</span><span class="kt">UserRecord</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="kd">func</span> <span class="nf">refresh</span><span class="p">()</span> <span class="k">async</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">participants</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetchParticipants</span><span class="p">()</span>
        <span class="k">let</span> <span class="nv">records</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetchRecords</span><span class="p">(</span><span class="nv">participants</span><span class="p">:</span> <span class="n">participants</span><span class="p">)</span>
        <span class="k">self</span><span class="o">.</span><span class="n">users</span> <span class="o">=</span> <span class="n">records</span>
    <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">fetchParticipants</span><span class="p">()</span> <span class="k">async</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Participant</span><span class="p">]</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[]</span> <span class="p">}</span>
    <span class="kd">func</span> <span class="nf">fetchRecords</span><span class="p">(</span><span class="nv">participants</span><span class="p">:</span> <span class="p">[</span><span class="kt">Participant</span><span class="p">])</span> <span class="k">async</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">UserRecord</span><span class="p">]</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[]</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="persisting-data">Persisting data</h3>

<ul>
  <li>커스텀 타입에 Codable conformance를 적용하려면 타입의 모든 stored properties가 Codable을 채택하고 있어야 함.</li>
  <li>@Published 속성은 뷰에 bind 되어 있음. binding을 사용하여 가장 최신의 데이터로 뷰를 업데이트 할 수 있음.</li>
  <li>ObservableObject 는 클래스에만 사용할 수 있는 프로토콜로, SwiftUI 뷰와 외부 모델 데이터를 연결함.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">ScrumStore</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">scrums</span><span class="p">:</span> <span class="p">[</span><span class="kt">DailyScrum</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="kd">private</span> <span class="kd">static</span> <span class="k">var</span> <span class="nv">fileURL</span><span class="p">()</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">URL</span> <span class="p">{</span>
        <span class="k">try</span> <span class="kt">FileManager</span><span class="o">.</span><span class="k">default</span><span class="o">.</span><span class="nf">url</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="o">.</span><span class="n">documentDirectory</span><span class="p">,</span>
                                    <span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="n">userDomainMask</span><span class="p">,</span>
                                    <span class="nv">appropriateFor</span><span class="p">:</span> <span class="kc">nil</span><span class="p">,</span>
                                    <span class="nv">create</span><span class="p">:</span> <span class="kc">false</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">appendingPathComponent</span><span class="p">(</span><span class="s">"scrums.data"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>FileManager의 shared 인스턴스를 사용하여 현재 사용자의 문서 파일의 위치를 얻음.</li>
  <li>appendingPathComponent(_:) 함수를 호출하여 scrums.data 라는 이름의 파일의 URL을 리턴함</li>
  <li>파일 시스템의 데이터를 읽는 동작은 느릴 수 있음.</li>
  <li>파일 시스템으로부터 데이터를 읽어오는 동안, 시스템이 기다리지 않고 UI를 먼저 업데이트 하도록 함.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">load</span><span class="p">()</span> <span class="k">async</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="kt">Tast</span> <span class="p">{</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>let constant에 Task를 담아서 후에 리턴값에 접근하거나 task로 부터 던져진 에러를 catch할 수 있도록 함.</li>
</ul>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[Scrumdinger app tutorial 이 글은 위 튜토리얼을 따라가며 정리한 내용입니다. Create a color theme]]></summary></entry><entry><title type="html">SwiftUI 이중 스티키 헤더</title><link href="http://localhost:4000/til/2023-09-06-stickyHeader.html" rel="alternate" type="text/html" title="SwiftUI 이중 스티키 헤더" /><published>2023-09-06T00:00:00+09:00</published><updated>2023-09-06T00:00:00+09:00</updated><id>http://localhost:4000/til/stickyHeader</id><content type="html" xml:base="http://localhost:4000/til/2023-09-06-stickyHeader.html"><![CDATA[<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">hidePointView</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">isFirstShown</span> <span class="o">=</span> <span class="kc">true</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        
        <span class="kt">VStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">ScrollView</span> <span class="p">{</span>
                <span class="kt">VStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">LazyVStack</span><span class="p">(</span><span class="nv">pinnedViews</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">sectionHeaders</span><span class="p">],</span> <span class="nv">content</span><span class="p">:</span>  <span class="p">{</span>
                        <span class="kt">Section</span><span class="p">(</span><span class="nv">header</span><span class="p">:</span> <span class="n">tempClearHeader</span><span class="p">)</span> <span class="p">{</span>
                            <span class="n">videoView</span>
                        <span class="p">}</span>
                    <span class="p">})</span>
                    
                    <span class="kt">LazyVStack</span><span class="p">(</span><span class="nv">pinnedViews</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">sectionHeaders</span><span class="p">],</span> <span class="nv">content</span><span class="p">:</span> <span class="p">{</span>
                        
                        <span class="kt">Section</span><span class="p">(</span><span class="nv">header</span><span class="p">:</span> <span class="n">tabViewHeader</span><span class="p">)</span> <span class="p">{</span>
                            <span class="kt">Text</span><span class="p">(</span><span class="s">"리뷰 모아보기"</span><span class="p">)</span>
                                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">))</span>
                                <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="cm">/*@START_MENU_TOKEN@*/</span><span class="mi">100</span><span class="cm">/*@END_MENU_TOKEN@*/</span><span class="p">)</span>
                                <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">horizontal</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
                        <span class="p">}</span>
                    <span class="p">})</span>
                    
                    <span class="kt">LazyVStack</span><span class="p">(</span><span class="nv">pinnedViews</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">sectionHeaders</span><span class="p">],</span> <span class="nv">content</span><span class="p">:</span> <span class="p">{</span>
                        <span class="kt">Section</span><span class="p">(</span><span class="nv">header</span><span class="p">:</span> <span class="n">categoryHeader</span><span class="p">)</span> <span class="p">{</span>
                            <span class="n">tabViewBody</span>
                        <span class="p">}</span>
                    <span class="p">})</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="o">.</span><span class="nf">overlay</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">top</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">pointViewHeader</span>
                    <span class="o">.</span><span class="nf">opacity</span><span class="p">(</span><span class="n">hidePointView</span> <span class="p">?</span> <span class="mi">0</span> <span class="p">:</span> <span class="mi">10</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">top</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">yellow</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">pointViewHeader</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Image</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"globe"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">imageScale</span><span class="p">(</span><span class="o">.</span><span class="n">large</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">foregroundStyle</span><span class="p">(</span><span class="o">.</span><span class="n">tint</span><span class="p">)</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"PointView"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">tabViewHeader</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"영상 리뷰"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"포토 리뷰"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
        
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">tabViewBody</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">ForEach</span><span class="p">(</span><span class="mi">0</span><span class="o">..&lt;</span><span class="mi">3</span><span class="p">)</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
                <span class="kt">HStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">Spacer</span><span class="p">()</span>
                    <span class="kt">Rectangle</span><span class="p">()</span>
                        <span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="o">.</span><span class="n">gray</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">240</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">padding</span><span class="p">([</span><span class="o">.</span><span class="n">top</span><span class="p">,</span> <span class="o">.</span><span class="n">bottom</span><span class="p">])</span>
                    
                    
                    <span class="kt">Rectangle</span><span class="p">()</span>
                        <span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="o">.</span><span class="n">gray</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">240</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">padding</span><span class="p">([</span><span class="o">.</span><span class="n">top</span><span class="p">,</span> <span class="o">.</span><span class="n">bottom</span><span class="p">])</span>
                    
                    <span class="kt">Spacer</span><span class="p">()</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">categoryHeader</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"버튼"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"버튼"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"버튼"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"버튼"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">green</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">videoView</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">Rectangle</span><span class="p">()</span>
                <span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="o">.</span><span class="n">red</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">202</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">tempClearHeader</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"temp"</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
        <span class="o">.</span><span class="n">onDisappear</span> <span class="p">{</span>
            <span class="n">hidePointView</span><span class="o">.</span><span class="nf">toggle</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="n">onAppear</span> <span class="p">{</span>
            
            <span class="k">if</span> <span class="o">!</span><span class="n">isFirstShown</span> <span class="p">{</span>
                <span class="n">hidePointView</span><span class="o">.</span><span class="nf">toggle</span><span class="p">()</span>
            <span class="p">}</span>
            
            <span class="n">isFirstShown</span> <span class="o">=</span> <span class="kc">false</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">ContentView_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">ContentView</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>탭뷰 헤더는 VStack 사용해도 될 것 같음 -&gt; VStack 바깥에 ScrollView 있기 때문에 화면 밖으로 헤더가 사라져서 안됨.</li>
  <li>LazyVStack Pinned header를 특정 조건에 따라 나타나게 할 수 있을까?</li>
  <li>전체 LazyVStack을 pointView가 나타날때 아래로 내리면?</li>
  <li>header 부분만 내릴 수 있음</li>
  <li>all header pinned 가 되는 부분을 찾아야 함</li>
</ul>

<p><a href="https://stackoverflow.com/questions/73015997/swiftui-lazyvstack-pinnedviews-in-another">TrackableScrollView</a></p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//</span>
<span class="c1">//  ContentView.swift</span>
<span class="c1">//  StickyHeaderWithoutLazy</span>
<span class="c1">//</span>
<span class="c1">//  Created by Mirae on 9/6/23.</span>
<span class="c1">//  * overlay point view -&gt; 위 아래로 움직일 때 나타나는 뷰</span>
<span class="c1">//  * 맨 위에는 스티키로 하나 넣고</span>

<span class="kd">import</span> <span class="kt">SwiftUI</span>

<span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">allHeaderPinned</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">hidePointView</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">pullDownView</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">scrollOffset</span> <span class="o">=</span> <span class="mf">0.0</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        
        <span class="kt">ScrollViewReader</span> <span class="p">{</span> <span class="n">scrollProxy</span> <span class="k">in</span>
            
            <span class="kt">OffsettableScrollView</span> <span class="p">{</span> <span class="n">offsetProxy</span> <span class="k">in</span>
                
                <span class="k">if</span> <span class="k">self</span><span class="o">.</span><span class="n">scrollOffset</span> <span class="o">&gt;</span> <span class="n">offsetProxy</span><span class="o">.</span><span class="n">y</span> <span class="p">{</span>
<span class="c1">//                    scrollState = true</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"true"</span><span class="p">)</span> <span class="c1">// 스크롤</span>
                    <span class="n">withAnimation</span> <span class="p">{</span>
                        <span class="n">hidePointView</span> <span class="o">=</span> <span class="kc">true</span>
                        <span class="n">pullDownView</span> <span class="o">=</span> <span class="kc">true</span>
                    <span class="p">}</span>
                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
<span class="c1">//                    scrollState = false</span>
                    <span class="nf">print</span><span class="p">(</span><span class="s">"false"</span><span class="p">)</span> <span class="c1">// 역스크롤</span>
                    <span class="n">withAnimation</span> <span class="p">{</span>
                        <span class="n">hidePointView</span> <span class="o">=</span> <span class="kc">false</span>
                        <span class="n">pullDownView</span> <span class="o">=</span> <span class="kc">false</span>
                    <span class="p">}</span>
                <span class="p">}</span>
                
                <span class="k">self</span><span class="o">.</span><span class="n">scrollOffset</span> <span class="o">=</span> <span class="n">offsetProxy</span><span class="o">.</span><span class="n">y</span>
                
            <span class="p">}</span> <span class="nv">content</span><span class="p">:</span> <span class="p">{</span>
            
                <span class="kt">LazyVStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">pinnedViews</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">sectionHeaders</span><span class="p">],</span> <span class="nv">content</span><span class="p">:</span> <span class="p">{</span>
                    
                    <span class="c1">// pointViewHeader 자체에서 조건문으로 height 를 변경 (색 맞춰서 보이지 않게)</span>
                    <span class="kt">Section</span><span class="p">(</span><span class="nv">header</span><span class="p">:</span> <span class="n">pointViewHeader</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">videoView</span>
                    <span class="p">}</span>
                    
                    <span class="kt">VStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kt">LazyVStack</span><span class="p">(</span><span class="nv">pinnedViews</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">sectionHeaders</span><span class="p">],</span> <span class="nv">content</span><span class="p">:</span>  <span class="p">{</span>
                            <span class="c1">// on Disppear 시 hidePointView 변경됨)</span>
                            <span class="kt">Section</span><span class="p">(</span><span class="nv">header</span><span class="p">:</span> <span class="n">tempClearHeader</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
                        <span class="p">})</span>
                        
                        <span class="kt">LazyVStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">pinnedViews</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">sectionHeaders</span><span class="p">],</span> <span class="nv">content</span><span class="p">:</span> <span class="p">{</span>
                            
                            <span class="kt">Section</span><span class="p">(</span><span class="nv">header</span><span class="p">:</span> <span class="n">tabViewHeader</span><span class="p">)</span> <span class="p">{</span>
                                <span class="kt">GeometryReader</span> <span class="p">{</span> <span class="n">geometry</span> <span class="k">in</span>
                                    <span class="kt">VStack</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">leading</span><span class="p">,</span> <span class="nv">spacing</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
                                        <span class="kt">Text</span><span class="p">(</span><span class="s">"리뷰 모아보기"</span><span class="p">)</span>
                                            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">))</span>
                                        <span class="kt">Text</span><span class="p">(</span><span class="s">"💰위글 영상 리뷰보고 포인트 쌓자!"</span><span class="p">)</span>
                                            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">regular</span><span class="p">))</span>
                                    <span class="p">}</span>
                                    <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">horizontal</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
                                    <span class="o">.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">y</span><span class="p">:</span> <span class="n">geometry</span><span class="o">.</span><span class="n">size</span><span class="o">.</span><span class="n">height</span><span class="p">)</span>
                                    <span class="o">.</span><span class="nf">onChange</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">geometry</span><span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="n">global</span><span class="p">)</span><span class="o">.</span><span class="n">minY</span><span class="p">)</span> <span class="p">{</span> <span class="n">minY</span> <span class="k">in</span>
                                        <span class="n">withAnimation</span> <span class="p">{</span>
                                            <span class="k">if</span> <span class="n">minY</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="p">{</span>
                                                <span class="n">allHeaderPinned</span> <span class="o">=</span> <span class="kc">true</span>
                                            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                                                <span class="n">allHeaderPinned</span> <span class="o">=</span> <span class="kc">false</span>
                                            <span class="p">}</span>
                                        <span class="p">}</span>
                                        
                                        <span class="nf">print</span><span class="p">(</span><span class="s">"minY: </span><span class="se">\(</span><span class="n">minY</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                                    <span class="p">}</span>
                                    <span class="c1">// let _ = print("\(geometry.size.height)") // PRINT: 10.0</span>
                                <span class="p">}</span>
                                <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">vertical</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
                                
                                <span class="kt">LazyVStack</span><span class="p">(</span><span class="nv">pinnedViews</span><span class="p">:</span> <span class="p">[</span><span class="o">.</span><span class="n">sectionHeaders</span><span class="p">],</span> <span class="nv">content</span><span class="p">:</span> <span class="p">{</span>
                                    <span class="kt">Section</span><span class="p">(</span><span class="nv">header</span><span class="p">:</span> <span class="n">categoryHeader</span><span class="p">)</span> <span class="p">{</span>
                                        <span class="n">tabViewBody</span>
                                    <span class="p">}</span>
                                <span class="p">})</span>
                            <span class="p">}</span>
                        <span class="p">})</span>
                        <span class="o">.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">y</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">})</span>
                <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">yellow</span><span class="p">)</span>
            <span class="p">}</span>
            <span class="o">.</span><span class="nf">overlay</span><span class="p">(</span><span class="nv">alignment</span><span class="p">:</span> <span class="o">.</span><span class="n">top</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">withAnimation</span> <span class="p">{</span>
                    <span class="n">pointViewHeader</span>
                        <span class="o">.</span><span class="nf">opacity</span><span class="p">((</span><span class="n">allHeaderPinned</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="n">hidePointView</span><span class="p">)</span> <span class="p">?</span> <span class="mi">10</span> <span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
                    <span class="c1">// overlay는 pinned header들이 아래로 밀리지 않아서 사용할 수 없음</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">top</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">pointViewHeader</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Image</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"globe"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">imageScale</span><span class="p">(</span><span class="o">.</span><span class="n">large</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">foregroundStyle</span><span class="p">(</span><span class="o">.</span><span class="n">tint</span><span class="p">)</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"2,759"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">))</span>
            <span class="kt">Spacer</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">pointViewHeaderOverlay</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Image</span><span class="p">(</span><span class="nv">systemName</span><span class="p">:</span> <span class="s">"globe"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">imageScale</span><span class="p">(</span><span class="o">.</span><span class="n">large</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">foregroundStyle</span><span class="p">(</span><span class="o">.</span><span class="n">tint</span><span class="p">)</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"2,759"</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="nf">system</span><span class="p">(</span><span class="nv">size</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="nv">weight</span><span class="p">:</span> <span class="o">.</span><span class="n">bold</span><span class="p">))</span>
            <span class="kt">Spacer</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">blue</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">tabViewHeader</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"영상 리뷰"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"포토 리뷰"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">y</span><span class="p">:</span> <span class="p">(</span><span class="n">allHeaderPinned</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="n">pullDownView</span><span class="p">)</span> <span class="p">?</span> <span class="mi">50</span> <span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">tabViewBody</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">ForEach</span><span class="p">(</span><span class="mi">0</span><span class="o">..&lt;</span><span class="mi">5</span><span class="p">)</span> <span class="p">{</span> <span class="n">row</span> <span class="k">in</span>
                <span class="kt">HStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">20</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">Spacer</span><span class="p">()</span>
                    <span class="kt">Rectangle</span><span class="p">()</span>
                        <span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="o">.</span><span class="n">gray</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">240</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">padding</span><span class="p">([</span><span class="o">.</span><span class="n">top</span><span class="p">,</span> <span class="o">.</span><span class="n">bottom</span><span class="p">])</span>
                    
                    
                    <span class="kt">Rectangle</span><span class="p">()</span>
                        <span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="o">.</span><span class="n">gray</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">240</span><span class="p">)</span>
                        <span class="o">.</span><span class="nf">padding</span><span class="p">([</span><span class="o">.</span><span class="n">top</span><span class="p">,</span> <span class="o">.</span><span class="n">bottom</span><span class="p">])</span>
                    
                    <span class="kt">Spacer</span><span class="p">()</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">categoryHeader</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Button</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1">//</span>
            <span class="p">},</span> <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
                <span class="kt">Text</span><span class="p">(</span><span class="s">"Button"</span><span class="p">)</span>
            <span class="p">})</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"버튼"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">"버튼"</span><span class="p">)</span>
            <span class="kt">Spacer</span><span class="p">()</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">green</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="o">.</span><span class="n">top</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span> <span class="c1">// 카테고리 헤더가 탭뷰 헤더 아래에 붙도록 패딩 조정</span>
        <span class="o">.</span><span class="nf">offset</span><span class="p">(</span><span class="nv">y</span><span class="p">:</span> <span class="p">(</span><span class="n">allHeaderPinned</span> <span class="o">==</span> <span class="kc">true</span> <span class="o">&amp;&amp;</span> <span class="n">pullDownView</span><span class="p">)</span> <span class="p">?</span> <span class="mi">50</span> <span class="p">:</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">videoView</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">Rectangle</span><span class="p">()</span>
                <span class="o">.</span><span class="nf">fill</span><span class="p">(</span><span class="o">.</span><span class="n">red</span><span class="p">)</span>
                <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">202</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">var</span> <span class="nv">tempClearHeader</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">HStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="s">""</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">minWidth</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">height</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
        <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">yellow</span><span class="p">)</span> <span class="c1">// 배경이랑 같은 색으로 맞추기</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">ContentView_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">ContentView</span><span class="p">()</span>
    <span class="p">}</span>
<span class="p">}</span>


</code></pre></div></div>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[```swift]]></summary></entry><entry><title type="html">Coding Test TIL</title><link href="http://localhost:4000/til/2023-07-04-CodingTestTIL.html" rel="alternate" type="text/html" title="Coding Test TIL" /><published>2023-07-04T00:00:00+09:00</published><updated>2023-07-04T00:00:00+09:00</updated><id>http://localhost:4000/til/CodingTestTIL</id><content type="html" xml:base="http://localhost:4000/til/2023-07-04-CodingTestTIL.html"><![CDATA[<h3 id="백준-10811번-바구니-뒤집기">백준 10811번: 바구니 뒤집기</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="k">let</span> <span class="nv">input</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span><span class="o">!.</span><span class="nf">components</span><span class="p">(</span><span class="nv">separatedBy</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span>

<span class="k">let</span> <span class="nv">n</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">!</span>
<span class="k">let</span> <span class="nv">m</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">input</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">!</span>

<span class="k">var</span> <span class="nv">originArray</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="mi">1</span><span class="o">...</span><span class="n">n</span><span class="p">)</span>

<span class="k">for</span> <span class="n">_</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="n">m</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">indices</span> <span class="o">=</span> <span class="nf">readLine</span><span class="p">()</span><span class="o">!.</span><span class="nf">components</span><span class="p">(</span><span class="nv">separatedBy</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span>
    
    <span class="k">let</span> <span class="nv">startIndex</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">!</span>
    
    <span class="k">let</span> <span class="nv">endIndex</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">indices</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">!</span>
    
    <span class="c1">// 왜 ... 가 아니고 ..&lt; 이거지?</span>
    <span class="k">let</span> <span class="nv">slicedAndReversed</span> <span class="o">=</span> <span class="n">originArray</span><span class="p">[</span><span class="n">startIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">..&lt;</span><span class="n">endIndex</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="nf">reversed</span><span class="p">()</span>
    
    <span class="k">let</span> <span class="nv">slicedAndReversedArr</span> <span class="o">=</span> <span class="kt">Array</span><span class="p">(</span><span class="n">slicedAndReversed</span><span class="p">)</span>
    
    <span class="n">originArray</span><span class="o">.</span><span class="nf">removeSubrange</span><span class="p">(</span><span class="n">startIndex</span><span class="o">-</span><span class="mi">1</span><span class="o">..&lt;</span><span class="n">endIndex</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">originArray</span><span class="o">.</span><span class="nf">insert</span><span class="p">(</span><span class="nv">contentsOf</span><span class="p">:</span> <span class="n">slicedAndReversedArr</span><span class="p">,</span> <span class="nv">at</span><span class="p">:</span> <span class="n">startIndex</span><span class="p">)</span>
    
<span class="p">}</span>

<span class="c1">// 틀린 부분</span>
<span class="nf">print</span><span class="p">(</span><span class="n">originArray</span><span class="p">)</span>

<span class="c1">// 틀린 부분 수정 </span>
<span class="n">originArray</span><span class="o">.</span><span class="n">forEach</span> <span class="p">{</span> <span class="nf">print</span><span class="p">(</span><span class="nv">$0</span><span class="p">,</span> <span class="nv">terminator</span><span class="p">:</span> <span class="s">" "</span><span class="p">)</span> <span class="p">}</span> 

<span class="c1">// print의 terminator 파라미터는 기본값으로 "\n"을 가짐</span>
<span class="c1">// 프린트 되는 값 뒤에 함께 프린트 되는 값으로 기본값이 \n이기 때문에 forEach를 사용하여 여러개의 값을 프린트하면</span>
<span class="c1">// line break와 함께 출력됨</span>
<span class="c1">// 위 예시 코드에서는 각 요소가 출력 될 때마다 space를 출력함</span>
</code></pre></div></div>

<h3 id="프로그래머스--내적">프로그래머스 : 내적</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">func</span> <span class="nf">solution</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:[</span><span class="kt">Int</span><span class="p">],</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:[</span><span class="kt">Int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">n</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">count</span>
    <span class="k">var</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">for</span> <span class="n">index</span> <span class="k">in</span> <span class="mi">0</span><span class="o">..&lt;</span><span class="n">n</span> <span class="p">{</span>
        <span class="n">array</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">index</span><span class="p">])</span>
    <span class="p">}</span>
    
    <span class="k">let</span> <span class="nv">sumResult</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="nf">reduce</span><span class="p">(</span><span class="o">.</span><span class="n">zero</span><span class="p">,</span> <span class="o">+</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">sumResult</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>forEach 문은 느리기 때문에 시간제한에 걸릴 수 있음.</li>
</ul>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[백준 10811번: 바구니 뒤집기]]></summary></entry><entry><title type="html">SwiftUI 업데이트</title><link href="http://localhost:4000/til/2023-07-03-SwiftUIUpdates.html" rel="alternate" type="text/html" title="SwiftUI 업데이트" /><published>2023-07-03T00:00:00+09:00</published><updated>2023-07-03T00:00:00+09:00</updated><id>http://localhost:4000/til/SwiftUIUpdates</id><content type="html" xml:base="http://localhost:4000/til/2023-07-03-SwiftUIUpdates.html"><![CDATA[<h1 id="onchangeofinitial_">onChange(of:initial:_:)</h1>

<h2 id="파라미터">파라미터</h2>

<ul>
  <li>
    <p>value : of 뒤에 작성되는 값으로, value의 값에 변화가 생기면 onChange 클로저가 실행됨</p>
  </li>
  <li>
    <p>initial : initial에 해당하는 뷰가 먼저 나타나면 onChange 속 동작이 실행됨</p>
  </li>
  <li>
    <p>action : value 값이 변경되었을 때 실행되는 클로저</p>
  </li>
  <li>
    <p>oldValue : 비교 체크를 실패한 예전 값 또는 처음 값</p>
  </li>
  <li>
    <p>newValue : 비교 체크를 실패한 새로운 값</p>
  </li>
</ul>

<h2 id="리턴값">리턴값</h2>

<ul>
  <li>특정 value가 변경될 때 어떤 동작을 실행하는 뷰를 리턴함</li>
</ul>

<h2 id="discussion">Discussion</h2>

<ul>
  <li>onChange를 사용하여 특정 값이 변경되었을 때 어떤 동작이 일어나도록 할 수 있음.</li>
  <li>긴 시간동안 실행되는 테스크에 사용하는 것은 피해야 함</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">PlayerView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">episode</span><span class="p">:</span> <span class="kt">Episode</span>
    <span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">playState</span><span class="p">:</span> <span class="kt">PlayState</span> <span class="o">=</span> <span class="o">.</span><span class="n">paused</span>


    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">VStack</span> <span class="p">{</span>
            <span class="kt">Text</span><span class="p">(</span><span class="n">episode</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
            <span class="kt">Text</span><span class="p">(</span><span class="n">episode</span><span class="o">.</span><span class="n">showTitle</span><span class="p">)</span>
            <span class="kt">PlayButton</span><span class="p">(</span><span class="nv">playState</span><span class="p">:</span> <span class="err">$</span><span class="n">playState</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">onChange</span><span class="p">(</span><span class="nv">of</span><span class="p">:</span> <span class="n">playState</span><span class="p">)</span> <span class="p">{</span> <span class="n">oldState</span><span class="p">,</span> <span class="n">newState</span> <span class="k">in</span>
            <span class="n">model</span><span class="o">.</span><span class="nf">playStateDidChange</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">oldState</span><span class="p">,</span> <span class="nv">to</span><span class="p">:</span> <span class="n">newState</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="매크로">매크로</h1>

<p>매크로를 사용하면 반복적으로 사용되는 코드를 컴파일 할 때 생성할 수 있음. 반복적인 코드를 짧게 줄일 수 있으므로 더 읽기 편해짐.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">/// Slopes in my favorite ski resort.</span>
<span class="kd">enum</span> <span class="kt">Slope</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">beginnersParadise</span>
    <span class="k">case</span> <span class="n">practiceRun</span>
    <span class="k">case</span> <span class="n">livingRoom</span>
    <span class="k">case</span> <span class="n">olympicRun</span>
    <span class="k">case</span> <span class="n">blackBeauty</span>
<span class="p">}</span>

<span class="c1">/// Slopes suitable for beginners. Subset of `Slopes`.</span>
<span class="kd">enum</span> <span class="kt">EasySlope</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">beginnersParadise</span>
    <span class="k">case</span> <span class="n">practiceRun</span>

    <span class="nf">init</span><span class="p">?(</span><span class="n">_</span> <span class="nv">slope</span><span class="p">:</span> <span class="kt">Slope</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="n">slope</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">beginnersParadise</span><span class="p">:</span> <span class="k">self</span> <span class="o">=</span> <span class="o">.</span><span class="n">beginnersParadise</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">practiceRun</span><span class="p">:</span> <span class="k">self</span> <span class="o">=</span> <span class="o">.</span><span class="n">practiceRun</span>
        <span class="k">default</span><span class="p">:</span> <span class="k">return</span> <span class="kc">nil</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">var</span> <span class="nv">slope</span><span class="p">:</span> <span class="kt">Slope</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">beginnersParadise</span><span class="p">:</span> <span class="k">return</span> <span class="o">.</span><span class="n">beginnersParadise</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">practiceRun</span><span class="p">:</span> <span class="k">return</span> <span class="o">.</span><span class="n">practiceRun</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>Slope 타입에 있는 case 중 초보자에게 적합한 slope이 있을 경우, EasySlope 타입으로 변환함.</li>
  <li>이때 초보자에게 적합한 slope을 추가하기 위해서는 Slope 타입의 case, EasySlope 타입의 case, 이니셜라이저, computed property인 slope에 총 네번 코드를 추가해 주어야 함.</li>
  <li>위 작업을 매크로를 사용해서 줄일 수 있는지 알아보겠음.
    <ul>
      <li>이니셜라이저와 컴퓨티드 프로퍼티는 EasySlope 타입의 멤버임. -&gt; attached member 매크로를 정의할 것</li>
      <li>매크로를 구현할 컴파일러 플러그인을 생성해야 함.</li>
      <li>매크로가 원하는대로 동작하는지 확인하기 위해서 test driven way로 코드를 작성.</li>
      <li>정상적으로 코드를 작성할 시, 이니셜라이저에 해당되는 코드를 제거하고, 이니셜라이저 코드를 컴파일 타임에 생성할 매크로를 추가하게 됨.</li>
    </ul>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// EasySlope의 멤버인 이니셜라이저를 생성할 매크로</span>
<span class="kd">@attached</span><span class="p">(</span><span class="n">member</span><span class="p">,</span> <span class="nv">names</span><span class="p">:</span> <span class="nf">named</span><span class="p">(</span><span class="kd">init</span><span class="p">))</span>
<span class="c1">// SlopeSubset은 매크로의 이름</span>
<span class="kd">public</span> <span class="n">macro</span> <span class="kt">SlopeSubset</span><span class="p">()</span> <span class="o">=</span> <span class="err">#</span><span class="nf">externalMacro</span><span class="p">(</span><span class="nv">module</span><span class="p">:</span> <span class="s">"MyMacroMacros"</span><span class="p">,</span> <span class="nv">type</span><span class="p">:</span> <span class="s">"SlopeSubsetMacro"</span><span class="p">)</span>
</code></pre></div></div>
<ul>
  <li>여기까지는 매크로의 정의. 아직 implementation 부분을 작성한 것은 아님. (실행될 코드 부분을 expansion이라고 함.)</li>
  <li>“SlopeSubsetMacro” 타입을 생성해야 함.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// attached member 매크로는 MemberMacro 프로토콜을 따라야 함.</span>
<span class="c1">// MemberMacro 요구사항은 하나 -&gt; expansion() 함수</span>
<span class="kd">public</span> <span class="kd">struct</span> <span class="kt">SlopeSubsetMacro</span><span class="p">:</span> <span class="kt">MemberMacro</span> <span class="p">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">func</span> <span class="nf">expansion</span><span class="p">(</span>
        <span class="n">of</span> <span class="nv">attribute</span><span class="p">:</span> <span class="kt">AttributeSyntax</span><span class="p">,</span>
        <span class="n">providingMembersOf</span> <span class="nv">declaration</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">DeclGroupSyntax</span><span class="p">,</span>
        <span class="k">in</span> <span class="nv">context</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">MacroExpansionContext</span>
    <span class="p">)</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">DeclSyntax</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// providingMacros 프로퍼티를 작성하여 컴파일러가 작성한 매크로를 감지할 수 있도록 함.</span>
<span class="kd">@main</span>
<span class="kd">struct</span> <span class="kt">WWDCPlugin</span><span class="p">:</span> <span class="kt">CompilerPlugin</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">providingMacros</span><span class="p">:</span> <span class="p">[</span><span class="kt">Macro</span><span class="o">.</span><span class="k">Type</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="kt">SlopeSubsetMacro</span><span class="o">.</span><span class="k">self</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>#stringify : 스트링이파이 매크로</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">calculations</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="s">"1 + 1"</span><span class="p">),</span>
    <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="s">"3 * 2"</span><span class="p">),</span>
<span class="p">]</span>

<span class="k">let</span> <span class="nv">calculations</span> <span class="o">=</span> <span class="p">[</span>
    <span class="cp">#stringify(1 + 1)</span>
    <span class="cp">#stringify(3 * 2)</span>
<span class="p">]</span>
</code></pre></div></div>

<p>// 매크로 정의</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@freestanding</span><span class="p">(</span><span class="n">expression</span><span class="p">)</span> <span class="c1">// 2</span>
<span class="n">macro</span> <span class="nf">stringify</span><span class="p">(</span><span class="n">_</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="kt">Int</span><span class="p">,</span> <span class="kt">String</span><span class="p">)</span> <span class="c1">// 1</span>

</code></pre></div></div>
<ul>
  <li>// 1: function 정의와 비슷함. Int 값을 파라미터로 받고 output 값으로 Int, String을 반환함.</li>
  <li>
    <p>// 2: freestanding expression macro role을 사용하여 정의되었는데, 이것은 expression을 사용하는 곳엔 어디서든 매크로를 사용할 수 있도록 한다는 의미.</p>

    <ul>
      <li>파라미터의 타입이 일치하는지 체크하고 (제네릭 타입 매크로도 작성 가능), 컴파일러는 macro expansion 실행 (macro expansion은 매크로가 실행되고 값을 리턴하는 과정을 말함)</li>
    </ul>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@freestanding</span><span class="p">(</span><span class="n">expression</span><span class="p">)</span> 

<span class="kd">@attached</span><span class="p">(</span><span class="n">member</span><span class="p">)</span> 
</code></pre></div></div>

<!--- MemberMacro 프로토콜은 하나의 요구사항을 가짐. 이 요구사항은 'expansion' 함수인데, -->]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[onChange(of:initial:_:)]]></summary></entry><entry><title type="html">TIL</title><link href="http://localhost:4000/til/2023-05-24-TIL.html" rel="alternate" type="text/html" title="TIL" /><published>2023-05-24T00:00:00+09:00</published><updated>2023-05-24T00:00:00+09:00</updated><id>http://localhost:4000/til/TIL</id><content type="html" xml:base="http://localhost:4000/til/2023-05-24-TIL.html"><![CDATA[<h2 id="ds_store">DS_Store</h2>
<ul>
  <li>DS_Store는 해당 폴더에 대한 Finder 관련 정보를 가지고 있으므로, 다른 컴퓨터에는 영향을 주지 않음. 커밋 시 ignore 하여도 무방함.</li>
</ul>

<h2 id="swiftui-videoplayer-영상-looping">SwiftUI VideoPlayer 영상 looping</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">queuePlayer</span><span class="p">:</span> <span class="kt">AVQueuePlayer</span> <span class="o">=</span> <span class="kt">AVQueuePlayer</span><span class="p">()</span>
<span class="kd">@State</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">playerLooper</span><span class="p">:</span> <span class="kt">AVPlayerLooper</span><span class="o">!</span>

<span class="kd">struct</span> <span class="kt">SomeView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>

    <span class="kt">VideoPlayer</span><span class="p">(</span><span class="nv">player</span><span class="p">:</span> <span class="n">queuePlayer</span><span class="p">)</span>
         <span class="o">.</span><span class="n">onAppear</span> <span class="p">{</span>
             <span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"stringUrl"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
                 <span class="k">return</span>
             <span class="p">}</span>
             
             <span class="k">if</span> <span class="n">queuePlayer</span><span class="o">.</span><span class="n">currentItem</span><span class="p">?</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">rawValue</span> <span class="o">!=</span> <span class="mi">1</span> <span class="p">{</span>
                 
                 <span class="nf">print</span><span class="p">(</span><span class="s">"player status readyToPlay"</span><span class="p">)</span>
                 
                 <span class="k">let</span> <span class="nv">asset</span> <span class="o">=</span> <span class="kt">AVAsset</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
                 <span class="k">let</span> <span class="nv">item</span> <span class="o">=</span> <span class="kt">AVPlayerItem</span><span class="p">(</span><span class="nv">asset</span><span class="p">:</span> <span class="n">asset</span><span class="p">)</span>
                 <span class="n">playerLooper</span> <span class="o">=</span> <span class="kt">AVPlayerLooper</span><span class="p">(</span><span class="nv">player</span><span class="p">:</span> <span class="n">queuePlayer</span><span class="p">,</span> <span class="nv">templateItem</span><span class="p">:</span> <span class="n">item</span><span class="p">)</span>
             <span class="p">}</span>
             
             <span class="n">queuePlayer</span><span class="o">.</span><span class="nf">play</span><span class="p">()</span>
         <span class="p">}</span>
         <span class="o">.</span><span class="n">onDisappear</span> <span class="p">{</span>
             <span class="n">queuePlayer</span><span class="o">.</span><span class="nf">pause</span><span class="p">()</span>
         <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p><b>하나의 영상을 반복 재생하기</b></p>
<ul>
  <li>AVQueuePlayer와 AVPlayerLooper를 사용</li>
  <li>url을 통해 영상 데이터를 가져옴</li>
  <li>AVAsset, AVPlayerItem, AVPlayerLooper를 사용하여 반복 재생하였으나 paged style tab view 안에 재생되는 비디오가 page 이동 후 돌아오면 아래와 같은 에러가 발생함.</li>
</ul>

<blockquote>
  <p>An AVPlayerItem can occupy only one position in a player’s queue at a time</p>
</blockquote>

<h2 id="lazy-stored-property">Lazy Stored Property</h2>

<ul>
  <li>lazy stored property의 초기값은 해당 속성이 사용되기 전까지 계산되지 않음.</li>
  <li>lazy property는 var 키워드를 사용하여 항상 변수로 선언해야 함. lazy 속성은 인스턴스 초기화가 완료된 후에도 초기값이 없을 수 있음(사용되기 전이기 때문에). 반면에, 상수(Constant) 속성은 객체 초기화 전에 값을 꼭 가져야 하기 때문에 lazy 속성으로 정의될 수 없음.</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DataImporter</span> <span class="p">{</span>
    <span class="cm">/*
    DataImporter 클래스는 외부의 파일로부터 데이터를 가져옴.
    이 객체를 초기화하는 시간이 꽤 걸린다고 가정함.
    */</span>
    <span class="k">var</span> <span class="nv">filename</span> <span class="o">=</span> <span class="s">"data.txt"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">DataManager</span> <span class="p">{</span>
    <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">importer</span> <span class="o">=</span> <span class="kt">DataImporter</span><span class="p">()</span>
    <span class="k">var</span> <span class="nv">data</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span> 
    <span class="c1">// 데이터를 관리하는 기능을 제공하는 객체</span>
<span class="p">}</span>

<span class="k">let</span> <span class="nv">manager</span> <span class="o">=</span> <span class="kt">DataManager</span><span class="p">()</span>
<span class="n">manager</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"Some data"</span><span class="p">)</span>
<span class="n">manager</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"Some more data"</span><span class="p">)</span>
<span class="c1">// 아직까지는 importer에 할당될 DataImporter의 인스턴스가 생성되지 않음.</span>
</code></pre></div></div>

<h2 id="스터디-과제-진행하며-정리-67">스터디 과제 진행하며 정리 (~6/7)</h2>
<ul>
  <li>@State 프로퍼티는 항상 private으로 사용 (해당하는 뷰와 서브 뷰의 특정한 정보를 담기 때문)</li>
  <li>observable object class 수정
    <ul>
      <li>published 값이 옵셔널로 설정되어 있음 -&gt; 뷰 부분에서 처리해주어야 하는 불편함을 해결하기 위해 수정</li>
      <li>final class로 변경</li>
      <li>Combine 추가</li>
      <li>데이터 로드하는 함수를 제네릭 함수로 변경</li>
      <li>데이터 로드 함수를 실행하는 init() 제거</li>
      <li>데이터 로드 함수가 observable object 클래스 안이 아닌 바깥 쪽에 정의</li>
    </ul>
  </li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">testSearching</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">searchText</span> <span class="o">=</span> <span class="s">"주차"</span>

    <span class="k">let</span> <span class="nv">result</span> <span class="o">=</span> <span class="kt">ModelData</span><span class="p">()</span><span class="o">.</span><span class="n">roomList</span><span class="o">.</span><span class="n">rooms</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">hashTags</span><span class="o">.</span><span class="nf">contains</span><span class="p">(</span><span class="n">searchText</span><span class="p">)</span> <span class="p">}</span>

    <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
    
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>간단한 테스트 코드 작성하여 search function test</li>
  <li>
    <p>위 코드에서 searchText의 값과 XCTAssertEqual()의 값만 변경하여 여러가지 검색어 상황에 따른 데이터 결과를 확인할 수 있었음</p>
  </li>
  <li>문제 해결 내용
    <ul>
      <li><code class="language-plaintext highlighter-rouge">swift 
      let file = Bundle.main.url(forResource: filename, withExtension: "txt")</code> 에서 withExtension을 nil로 주면 이름이 일치하는 첫번째 파일을 가져온다고 하여 nil로 주었으나 파일을 찾지 못한다는 에러가 발생하여 파일의 익스텐션인 “txt”로 수정하여 해결</li>
      <li>검색 기능을 추가하면서 search text를 해시 태그로 가지고 있는 방 데이터를 필터링하여 목록을 생성. 이 목록을 @State 변수에 할당해야 하는데, 현재 버튼으로 필터링하기 위해 computed property를 사용하고 있음.</li>
    </ul>
  </li>
</ul>

<h2 id="스터디-과제-진행하며-정리-719">스터디 과제 진행하며 정리 (~7/19)</h2>
<ul>
  <li>final 키워드가 붙은 class는 서브 클래스가 오버라이딩할 수 없음</li>
</ul>

<h2 id="swiftui">SwiftUI</h2>

<p><b>Source of truth 생성하기</b></p>
<ul>
  <li>@State와 @Binding은 value type(ex. structure, enum)을 뷰를 업데이트하는 source of truth로 만들어 줌</li>
  <li>value type이 아니고 reference type인 클래스는 @ObservedObject, @StateObject, @EnvironmentObject 프로퍼티 래퍼를 사용</li>
  <li>@ObservedObject, @StateObject, @EnvironmentObject를 사용하기 위해서 클래스를 observable하게 만들어 주어야 함
    <ul>
      <li>@StateObject는 observable 객체를 생성</li>
      <li>@ObservedObject는 parent view로부터 객체를 받는다는 걸 나타냄 (@StateObject로 생성된 객체를 받음)</li>
      <li>@EnvironmentObject는 복잡한 뷰에서 사용됨. 이니셜라이저를 통해 객체를 통과시키지 않고 .environmentObject() 모더파이어를 통해 해당 뷰가 객체를 사용할 수 있도록 함 (부모-자식-자식의 자식뷰에서 자식뷰가 .environmentObject() 모더파이어를 통해 객체를 사용할 수 있게 되면 자식의 자식뷰도 @EnvironmentObject 속성을 통해 사용할 수 있게 됨)</li>
    </ul>
  </li>
  <li>클래스가 ObservableObject 프로토콜을 따르도록 만들면 됨</li>
  <li>클래스 안에는 값이 변경되었을 때 UI가 업데이트 되어야 하는 속성들이 정의됨</li>
  <li>각 속성은 @Published atrribute를 사용해 정의되어 뷰에서 사용할 수 있게됨</li>
</ul>

<p><b>Scene architecture</b></p>
<ul>
  <li>Scene의 구조</li>
  <li>하나의 앱을 만들기 위해서, App 프로토콜을 따르는 스트럭처를 생성함</li>
  <li>이때 앞에 @main 어트리뷰트를 사용하여 이 스트럭처가 앱의 유일한 entry point라는 것을 시스템에 알려줌</li>
  <li>앱 스트럭처의 바디 부분에 Scene 프로토콜을 따르는 스트럭처를 생성 (여러개 생성 가능)</li>
  <li>Scene은 앱이 보여줄 뷰 게층을 담을 컨테이너</li>
  <li>보통 iOS / WatchOS는 하나의 Scene을 가지고 macOS / iPadOS 는 여러개의 Scene을 가짐</li>
</ul>

<p><b>Scene Phases and transitions</b></p>
<ul>
  <li>Scene의 단계와 변형 과정</li>
  <li>앱이 실행되는 동안 Scene은 세 단계로 변화될 수 있음</li>
  <li>active: scene이 foreground에 있고 사용자가 상호작용할 수 있음</li>
  <li>inactive: scene이 보이지만, 시스템이 scene과 상호작용할 수 없음. 예를 들면, 아이패드에서 멀티태스킹 기능을 사용할 때 사용하지 않는 쪽은 보이지만 inactive 상태임. (scene은 foreground에 있음)</li>
  <li>background: 앱이 작동하고 있지만 사용자는 앱을 볼 수 없음. 앱이 꺼지기 직전에 Scene이 이 단계가 됨.</li>
  <li>scenePhase environment value를 사용해서 현재 scene의 상태를 알 수 있음.</li>
  <li>scene이 특정 상태가 됐을 때, 어떤 동작을 수행하도록 할 수 있음. (ex. 앱이 inactive 상태가 될 때 데이터를 저장하도록 함)</li>
</ul>

<p><b>Events and State</b></p>
<ul>
  <li>프로그램의 상태가 변할 때 뷰도 변하도록 하는 imperative 패턴과는 다르게, SwiftUI는 declarative 프로그래밍 패턴을 따름</li>
  <li>SwiftUI의 뷰 바디에, 모든 상태에 대해 UI가 어떻게 나타날지 묘사함</li>
  <li>프로그램이 실행되는 동안, 상태가 변함에 따라 변화되어야 하는 UI를 업데이트 함으로써 상태(state)와 UI가 서로 동기화되도록 함</li>
  <li>사용자와의 상호작용이나, 알림 같은 event는 앱이 응답해야하는 상황을 만드는데, 이때 클로저가 이벤트의 응답으로써 실행됨. 이것이 Source of truth를 변경시킴</li>
  <li>Source of truth에 일어난 변화를 감지하고, 이것을 뷰에 업데이트 하고 UI를 렌더링함</li>
</ul>

<p><b>View life cycle events</b></p>
<ul>
  <li>뷰가 나타나더나 스크린에서 사라질 때, 앱의 상태를 변경시키려면 onAppear(perform:) / onDisappear(perform:) / task(priority:_:) modifier 를 사용</li>
</ul>

<p><b>SwiftUI 기본 Structure</b></p>
<ul>
  <li>var body: some View { } 는 Scene, View, App 프로토콜을 다르는 structure가 꼭 구햔헤야 하는 필수 computed property</li>
  <li>@main 으로 표시하여 App의 entry point를 정의할 수 있음. 앱에는 단 하나의 entry point만이 존재할 수 있음</li>
  <li>아래 예시에서 WindowGroup은 첫번째 scene, Settings는 두번째 scene</li>
  <li>Settings scene은 거의 모든 mac앱에서 볼 수 있는 Settings 메뉴를 생성</li>
  <li>Settings scene은 macOS 에서만 사용 가능</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="cp">#if os(iOS)</span>
    
    <span class="c1">// iOS로 컴파일 될 코드</span>
    
    <span class="cp">#elseif os(macOS)</span>
    <span class="kt">WindowGroup</span> <span class="p">{</span>
        <span class="kt">AlternativeContentView</span><span class="p">()</span>
    <span class="p">}</span>
    
    <span class="kt">Settings</span> <span class="p">{</span>
        <span class="kt">SettingsView</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="cp">#endif</span>
</code></pre></div></div>

<ul>
  <li>#if os(iOS) 와 #elseif os(macOS), #endif는 platform conditional compilation block으로 Swift 컴파일러에게 특정 타겟 플랫폼에서만 조건문 안쪽의 코드를 컴파일 하도록 함</li>
  <li>커스텀 뷰처럼 커스텀 Scene도 만들 수 있음</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">CustomScene</span><span class="p">:</span> <span class="kt">Scene</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">Scene</span> <span class="p">{</span>
        <span class="kt">WindowGroup</span> <span class="p">{</span>
            <span class="c1">// Scene 내용</span>
        <span class="p">}</span>
    <span class="p">}</span>   
<span class="p">}</span>
</code></pre></div></div>

<h4 id="731">7/31</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>에러 내용: 

Photo library access not determined.

This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app's Info.plist must contain an NSPhotoLibraryUsageDescription key with a string value explaining to the user how the app uses this data.
</code></pre></div></div>
<ul>
  <li>TARGETS - Info - Privacy - Photo Library Usage Description 키 값 추가 - value 추가하여 해결</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>에러 내용: 

스마트 앨범의 카운트가 실제와 다르게 큰 수로 나타남
</code></pre></div></div>
<ul>
  <li>estimatedAssetCount를 사용할 경우, 정확한 결과를 가져오지 못할 수 있으므로 fetchAssets를 사용하여 정확한 asset의 수를 구하여 해결</li>
</ul>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[DS_Store DS_Store는 해당 폴더에 대한 Finder 관련 정보를 가지고 있으므로, 다른 컴퓨터에는 영향을 주지 않음. 커밋 시 ignore 하여도 무방함.]]></summary></entry><entry><title type="html">SwiftUI 뷰 레이아웃</title><link href="http://localhost:4000/til/2023-05-24-ViewLayout.html" rel="alternate" type="text/html" title="SwiftUI 뷰 레이아웃" /><published>2023-05-24T00:00:00+09:00</published><updated>2023-05-24T00:00:00+09:00</updated><id>http://localhost:4000/til/ViewLayout</id><content type="html" xml:base="http://localhost:4000/til/2023-05-24-ViewLayout.html"><![CDATA[<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">ReusableLabel</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">keyword</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">symbol</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Label</span><span class="p">(</span><span class="n">keyword</span><span class="p">,</span> <span class="nv">systemImage</span><span class="p">:</span> <span class="n">symbol</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">green</span><span class="o">.</span><span class="nf">opacity</span><span class="p">(</span><span class="mf">0.75</span><span class="p">),</span> <span class="nv">in</span><span class="p">:</span> <span class="kt">Capsule</span><span class="p">())</span> <span class="c1">// - 1</span>
            
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">ReusableLabel_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span> <span class="c1">// - 2</span>
    
    <span class="kd">static</span> <span class="k">let</span> <span class="nv">keywords</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Hello"</span><span class="p">,</span> <span class="s">"Good Morning"</span><span class="p">]</span>
    
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span> <span class="c1">// - 3</span>
        <span class="kt">VStack</span> <span class="p">{</span> <span class="c1">// - 4</span>
            <span class="kt">ForEach</span><span class="p">(</span><span class="n">keywords</span><span class="p">,</span> <span class="nv">id</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">word</span> <span class="k">in</span>
                <span class="kt">KeywordBubbleDefaultPadding</span><span class="p">(</span><span class="nv">keyword</span><span class="p">:</span> <span class="n">word</span><span class="p">,</span> <span class="nv">symbol</span><span class="p">:</span> <span class="s">"fish"</span><span class="p">)</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>1: .background에 Capsule()을 정의해줌으로써 캡슐 모양이 Label의 뒷쪽에 오도록 함. 이때 .padding()을 백그라운드의 윗쪽에 선언해주어야 패딩을 포함한 백그라운드에 캡슐 모양을 생성할 수 있음.</li>
  <li>2: PreviewProvider 프로토콜을 사용하여 커스텀 스위프트UI 뷰의 코드가 생성하는 화면을 미리 볼 수 있음</li>
  <li>3: PreviewProvider 프로토콜을 구현하기 위해선 static previews 프로퍼티를 정의해야 함</li>
  <li>4: VStack 안에 ForEach를 사용하여, ReusableLabel 스트럭쳐가 생성하는 라벨 뷰가 다른 텍스트 길이에서 어떻게 적용되는지 한 화면에서 확인할 수 있음</li>
</ul>

<center><img src="/assets/images/viewLayout_1.png" alt="viewLayout_1.png" width="600" /><br /></center>

<p><br />
<b>ScaledMetric를 사용하여 동적으로 넓이 조정하기</b></p>
<ul>
  <li>padding() modifier를 사용하여 패딩을 주었을 때, 폰트 사이즈가 달라지면 아래 이미지와 같이 큰 사이즈의 폰트에서는 패딩이 충분하지 않는 경우가 있음</li>
  <li>이때 패딩 값을 그냥 키워주면 작은 폰트에서는 패딩이 너무 넓어질 수 있음</li>
  <li>@ScaledMetric 프로퍼티 래퍼를 사용하여 .title과 같은 environment’s effective font size에 숫자값을 적용할 수 있음</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">KeywordBubbleDefaultPadding</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">keyword</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">symbol</span><span class="p">:</span> <span class="kt">String</span>
    <span class="kd">@ScaledMetric</span><span class="p">(</span><span class="nv">relativeTo</span><span class="p">:</span> <span class="o">.</span><span class="n">title</span><span class="p">)</span> <span class="k">var</span> <span class="nv">paddingWidth</span> <span class="o">=</span> <span class="mf">20.5</span> <span class="c1">// &lt;- 여기</span>
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">Label</span><span class="p">(</span><span class="n">keyword</span><span class="p">,</span> <span class="nv">systemImage</span><span class="p">:</span> <span class="n">symbol</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">(</span><span class="n">paddingWidth</span><span class="p">)</span> <span class="c1">// &lt;- 여기</span>
<span class="c1">//            .padding()</span>
            <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="o">.</span><span class="n">green</span><span class="o">.</span><span class="nf">opacity</span><span class="p">(</span><span class="mf">0.75</span><span class="p">),</span> <span class="nv">in</span><span class="p">:</span> <span class="kt">Capsule</span><span class="p">())</span>
            
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<center><img src="/assets/images/viewLayout_2.png" alt="viewLayout_2.png" width="350" /> <img src="/assets/images/viewLayout_3.png" alt="viewLayout_3.png" width="350" /><br /></center>
<p><br /></p>

<h2 id="layering-content">Layering Content</h2>

<ul>
  <li>어떤 컨텐츠를 겹쳐서 (z-axis) 나타낼 때, ZStack{}/.overlay()/.background()을 사용</li>
  <li>ZStack 다른 뷰들과 상관 없이, 사용 가능한 공간에 따라 뷰의 사이즈를 정함</li>
  <li>다른 컨텐츠의 사이즈와 관련하여 뷰의 사이즈를 조정하고 싶다면 overlay와 background를 사용하면 됨</li>
  <li>Image() 뷰 이니셜라이저는 기본적으로 이미지의 원래 사이즈로 이미지를 가져옴</li>
  <li>resizable() 모더파이어와 scaledToFit() 같은 모더파이어를 사용하여 이미지 사이즈를 조정할 수 있음</li>
  <li>.clipShape(RoundedRectangle(cornerRadius: 10.0, style: .continuous)) 을 사용하여 뷰의 위치나 크기를 변경하지 않고 corner radius를 설정할 수 있음</li>
</ul>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[```swift struct ReusableLabel: View { let keyword: String let symbol: String var body: some View { Label(keyword, systemImage: symbol) .font(.title) .foregroundColor(.white) .padding() .background(.green.opacity(0.75), in: Capsule()) // - 1 } }]]></summary></entry></feed>