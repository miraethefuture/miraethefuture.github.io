<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-06T21:39:31+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Mirae Jung  iOS Developer</title><subtitle>안녕하세요. iOS Developer 정미래입니다.
</subtitle><author><name>Mirae</name></author><entry><title type="html">여러 개의 비동기적 네트워크 요청을 동시에 보내기</title><link href="http://localhost:4000/til/2023-04-06-multipleNetworkRequests.html" rel="alternate" type="text/html" title="여러 개의 비동기적 네트워크 요청을 동시에 보내기" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/til/multipleNetworkRequests</id><content type="html" xml:base="http://localhost:4000/til/2023-04-06-multipleNetworkRequests.html"><![CDATA[<p><a href="https://developer.apple.com/tutorials/app-dev-training/managing-structured-concurrency">iOS App Dev Tutorials - Managing structured concurrency</a></p>
<blockquote>
  <p>위 내용을 참고</p>
</blockquote>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[iOS App Dev Tutorials - Managing structured concurrency 위 내용을 참고]]></summary></entry><entry><title type="html">Stanford Lectures</title><link href="http://localhost:4000/til/2023-02-20-StanfordLecture.html" rel="alternate" type="text/html" title="Stanford Lectures" /><published>2023-02-20T00:00:00+09:00</published><updated>2023-02-20T00:00:00+09:00</updated><id>http://localhost:4000/til/StanfordLecture</id><content type="html" xml:base="http://localhost:4000/til/2023-02-20-StanfordLecture.html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=TZL5AmwuwlA&amp;list=PL3d_SFOiG7_8ofjyKzX6Nl1wZehbdiZC_">Stanford - Developing iOS 11 Apps with Swift</a></p>
<blockquote>
  <p>강의 내용 중 필요한 것 정리.</p>
</blockquote>

<h1 id="developing-ios-11-apps-with-swift-1">Developing iOS 11 Apps with Swift 1</h1>
<h2 id="1-introduction-to-ios-11-xcode-9-and-swift-4">1. Introduction to iOS 11, Xcode 9 and Swift 4</h2>
<blockquote>
  <p><a href="https://youtu.be/TZL5AmwuwlA">🔗</a></p>
</blockquote>

<p><b>the underscore operator (_)</b><br />
함수의 internal / external names 부분에서 아래와 같이 언더바 ‘_’ 가 사용되는 경우는 argument가 없을 때 인데, 대부분 사용할 일이 없음. (항상 아규먼트 이름을 사용하는 것을 권장하기 때문에) 아래의 touchCard 함수는 Objective-C 부터 사용하던 함수이고, Objective-C는 internal/external name 개념이 없기 때문에 언더바가 사용됨.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">@IBAction</span> <span class="kd">func</span> <span class="nf">touchCard</span><span class="p">(</span><span class="n">_</span> <span class="nv">sender</span><span class="p">:</span> <span class="kt">UIButton</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>
</code></pre></div></div>
<hr />

<p><b>didSet</b></p>

<p>카드를 뒤집어서 같은 두 개의 그림을 찾아 짝을 맞추는 게임앱. 
카드를 뒤집을 때마다 아래와 같이 flipCount라는 변수에 1을 더함.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">flipCount</span> <span class="o">=</span> <span class="mi">0</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flipCount</span> <span class="o">+=</span> <span class="mi">1</span> 
</code></pre></div></div>
<p>flipCountLabel 이라는 UILabel 타입의 변수가 있음.
flipCount의 값이 변할때마다 flipCountLabel의 값도 변경되어야 함.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flipCountLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Flips: </span><span class="se">\(</span><span class="n">flipCount</span><span class="se">)</span><span class="s">"</span>
</code></pre></div></div>
<p>위의 코드를 변경되어야 하는 부분마다 반복적으로 입력한다면 같은 내용의 코드를 반복해서 여러번 작성하게 됨.
좀 더 효과적으로 코드를 작성하기 위하여 didSet을 사용할 수 있음</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">flipCount</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">{</span>
    <span class="k">didSet</span> <span class="p">{</span>
      <span class="n">flipCountLabel</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">"Flip s: </span><span class="se">\(</span><span class="n">flipCount</span><span class="se">)</span><span class="s">"</span>  
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>didSet은 property obeserver인데 flipCount라는 프로퍼티의 값을 관찰하고 있다가
그것이 변경될 때마다 disSet 안의 코드를 실행함.</p>

<h2 id="2-mvc">2. MVC</h2>

<blockquote>
  <p><a href="https://youtu.be/gI3pz7eFgfo">🔗</a></p>
</blockquote>

<p><b>API</b></p>

<p>class를 만들 때 public API에 대해 생각해보기.<br />
API는 클래스에 속한 메서드, instance variables의 리스트.
public API는 다른 클래스들이 호출할 수 있도록 허용된 메서드, instance variables.</p>

<p>앱이 동작하는 방식에 있어 가장 기본적이고 중요한 정보가 무엇인지 알아야,<br />
사람들이 이 앱을 어떻게 사용할지 알아야 클래스의 메서드와 instance variables를 작성할 수 있기 때문에<br />
클래스를 작성하기 전에 API에 대해 생각해 보는 것을 추천</p>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[Stanford - Developing iOS 11 Apps with Swift 강의 내용 중 필요한 것 정리.]]></summary></entry><entry><title type="html">앱 Earthquakes 튜토리얼을 따라가며 정리</title><link href="http://localhost:4000/til/2023-01-17-Quake.html" rel="alternate" type="text/html" title="앱 Earthquakes 튜토리얼을 따라가며 정리" /><published>2023-01-17T00:00:00+09:00</published><updated>2023-01-17T00:00:00+09:00</updated><id>http://localhost:4000/til/Quake</id><content type="html" xml:base="http://localhost:4000/til/2023-01-17-Quake.html"><![CDATA[<p><a href="https://developer.apple.com/tutorials/app-dev-training/decoding-structured-json">Earthquakes app tutorial</a></p>
<blockquote>
  <p>이 글은 위의 apple developer tutorial을 따라가며 정리한 내용입니다.</p>
</blockquote>

<h1 id="error">Error</h1>
<blockquote>
  <p>/decoding-structured-json/Decode earthquake data/step 8</p>
</blockquote>

<p>Swift에서는 Error 프로토콜을 따르는 타입을 사용하여 에러를 나타냅니다.<br />
  Error 프로토콜은 에러를 핸들링하기 위해 사용되는 타입이라는 것을 나타낼 뿐 아무런 내용이 없습니다.<br />
  요구사항도 없습니다. 그래서 커스텀 타입에 자유롭게 사용할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">QuakeError</span><span class="p">:</span> <span class="kt">Error</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">missingData</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">QuakeError</span><span class="p">:</span> <span class="kt">LocalizedError</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">errorDescription</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">switch</span> <span class="k">self</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">missingData</span><span class="p">:</span>
            <span class="k">return</span> <span class="kt">NSLocalizedString</span><span class="p">(</span><span class="s">"Found and will discard a quake missing a valid code, magnitude, place, or time."</span><span class="p">,</span> <span class="nv">comment</span><span class="p">:</span> <span class="s">""</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위 QuakeError enumeration은 case missingData를 가지는데 LocalizedError 프로토콜을 따르는 extension을 작성하여, QuakeError.missingData로 에러가 던져질 경우 “code, maginitude, place, time 중 없는 데이터가 있어 정상적으로 코드가 작동하지 않았다.”는 메세지를 표출할 것입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Quake struct라는 설계도를 사용하여 디코딩하는 인스턴스를 생성하기 위해 from decoder:_를 인자로 가지는 init 사용</span>
<span class="c1">// throws function, try, try?를 사용하여 디코딩 과정 중 에러 발생 시 nil을 반환하도록 처리함</span>
<span class="nf">init</span><span class="p">(</span><span class="n">from</span> <span class="nv">decoder</span><span class="p">:</span> <span class="kt">Decoder</span><span class="p">)</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">values</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">container</span><span class="p">(</span><span class="nv">keyedBy</span><span class="p">:</span> <span class="kt">CodingKeys</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawMagnitude</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Double</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">magitude</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawPlace</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">place</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawTime</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Date</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">time</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawCode</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">code</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawDetail</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">URL</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">detail</span><span class="p">)</span>
    
    <span class="c1">// try? 가 사용된 곳에서 에러가 발생하지 않으면 옵셔널 값이 반환되므로 해당 값을 unwrapping 함</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">magnitude</span> <span class="o">=</span> <span class="n">rawMagnitude</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">place</span> <span class="o">=</span> <span class="n">rawPlace</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">time</span> <span class="o">=</span> <span class="n">rawTime</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">code</span> <span class="o">=</span> <span class="n">rawCode</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">detail</span> <span class="o">=</span> <span class="n">rawDetail</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="kt">QuakeError</span><span class="o">.</span><span class="n">missingData</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>위 예시의 가장 아래쪽에 있는 else 구문에서 throw 키워드를 사용하여 에러를 던졌습니다. magnitude, place, time, code, detail 중 데이터가 없는 것이 있을 때 QuakeError.missingData 에러가 던져집니다.</p>

<h1 id="experiment">Experiment</h1>
<blockquote>
  <p>/decoding-structured-json/Decoding structured JSON/test the decoder</p>
</blockquote>

<ul>
  <li>쓰나미 경보를 푸시 알림으로 보내려 하는 상황</li>
  <li>
    <p>튜토리얼 내용을 참고하여 쓰나미 관련 데이터를 디코딩해보기</p>
  </li>
  <li>USGS 사이트에서 쓰나미의 데이터 타입을 찾음 -&gt; Integer</li>
  <li>Quake 스트럭처에 tsunami 프로퍼티 추가</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Quake</span><span class="p">:</span> <span class="kt">Identifiable</span> <span class="p">{</span>
    
    <span class="k">let</span> <span class="nv">magnitude</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">let</span> <span class="nv">place</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">time</span><span class="p">:</span> <span class="kt">Date</span>
    <span class="k">let</span> <span class="nv">code</span><span class="p">:</span> <span class="kt">String</span>
    <span class="k">let</span> <span class="nv">detail</span><span class="p">:</span> <span class="kt">URL</span>
    <span class="k">let</span> <span class="nv">tsunami</span><span class="p">:</span> <span class="kt">Int</span>
    
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>키 값으로 사용되는 CodingKeys enum에 tsunami일 경우를 추가</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">enum</span> <span class="kt">CodingKeys</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">CodingKey</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">magnitude</span> <span class="o">=</span> <span class="s">"mag"</span>
    <span class="k">case</span> <span class="n">place</span>
    <span class="k">case</span> <span class="n">time</span>
    <span class="k">case</span> <span class="n">code</span>
    <span class="k">case</span> <span class="n">detail</span>
    <span class="k">case</span> <span class="n">tsunami</span>
<span class="p">}</span>
</code></pre></div></div>
<ul>
  <li>생성자에 필요한 코드 추가</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">init</span><span class="p">(</span><span class="n">from</span> <span class="nv">decoder</span><span class="p">:</span> <span class="kt">Decoder</span><span class="p">)</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">values</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">container</span><span class="p">(</span><span class="nv">keyedBy</span><span class="p">:</span> <span class="kt">CodingKeys</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawMagnitude</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Double</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">magitude</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawPlace</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">place</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawTime</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Date</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">time</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawCode</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">code</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawDetail</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">URL</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">detail</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">rawTsunami</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Int</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">tsunami</span><span class="p">)</span>
    
    <span class="c1">// try? 가 사용된 곳에서 에러가 발생하지 않으면 옵셔널 값이 반환되므로 해당 값을 unwrapping 함</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">magnitude</span> <span class="o">=</span> <span class="n">rawMagnitude</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">place</span> <span class="o">=</span> <span class="n">rawPlace</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">time</span> <span class="o">=</span> <span class="n">rawTime</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">code</span> <span class="o">=</span> <span class="n">rawCode</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">detail</span> <span class="o">=</span> <span class="n">rawDetail</span><span class="p">,</span>
          <span class="k">let</span> <span class="nv">tsunami</span> <span class="o">=</span> <span class="n">rawTsunami</span>
    <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="kt">QuakeError</span><span class="o">.</span><span class="n">missingData</span>
    <span class="p">}</span>
    
    <span class="k">self</span><span class="o">.</span><span class="n">magnitude</span> <span class="o">=</span> <span class="n">magnitude</span>
    <span class="k">self</span><span class="o">.</span><span class="n">place</span> <span class="o">=</span> <span class="n">place</span>
    <span class="k">self</span><span class="o">.</span><span class="n">time</span> <span class="o">=</span> <span class="n">time</span>
    <span class="k">self</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="n">code</span>
    <span class="k">self</span><span class="o">.</span><span class="n">detail</span> <span class="o">=</span> <span class="n">detail</span>
    <span class="k">self</span><span class="o">.</span><span class="n">tsunami</span> <span class="o">=</span> <span class="n">tsunami</span>
    
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>현재 테스트 데이터의 값인 0과 같은지 테스트를 통해 확인</li>
</ul>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">XCTest</span>
<span class="kd">@testable</span> <span class="kd">import</span> <span class="kt">FollwingEarthquake</span>

<span class="kd">class</span> <span class="kt">FollwingEarthquakeTests</span><span class="p">:</span> <span class="kt">XCTestCase</span> <span class="p">{</span>
    
    <span class="kd">func</span> <span class="nf">testGeoJSONDecoderDecodesQuake</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">decoder</span> <span class="o">=</span> <span class="kt">JSONDecoder</span><span class="p">()</span>
        <span class="n">decoder</span><span class="o">.</span><span class="n">dateDecodingStrategy</span> <span class="o">=</span> <span class="o">.</span><span class="n">millisecondsSince1970</span>
        <span class="k">let</span> <span class="nv">quake</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Quake</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">testFeature_nc73649170</span><span class="p">)</span>
        
        <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">quake</span><span class="o">.</span><span class="n">code</span><span class="p">,</span> <span class="s">"73649170"</span><span class="p">)</span>
        
        
        <span class="k">let</span> <span class="nv">expectedSeconds</span> <span class="o">=</span> <span class="kt">TimeInterval</span><span class="p">(</span><span class="mi">1636129710550</span><span class="p">)</span> <span class="o">/</span> <span class="mi">1000</span>
        <span class="k">let</span> <span class="nv">decodedSeconds</span> <span class="o">=</span> <span class="n">quake</span><span class="o">.</span><span class="n">time</span><span class="o">.</span><span class="n">timeIntervalSince1970</span>
        
        <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">expectedSeconds</span><span class="p">,</span> <span class="n">decodedSeconds</span><span class="p">,</span> <span class="nv">accuracy</span><span class="p">:</span> <span class="mf">0.00001</span><span class="p">)</span>
        
        
        <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">quake</span><span class="o">.</span><span class="n">tsunami</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">// 테스트 통과</span>
        
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h1 id="privateset">private(set)</h1>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">GeoJSON</span> <span class="p">{</span>
    <span class="kd">private(set)</span> <span class="k">var</span> <span class="nv">quakes</span><span class="p">:[</span><span class="kt">Quake</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>private(set) modifier가 사용된 배열 quakes는 GeoJSON 스트럭쳐 안에있는 코드에서만 수정 가능합니다.<br />
  GeoJSON 스트럭처 바깥에서 작성된 코드에서는 quakes의 값을 읽는 것만 가능합니다.</p>

<h1 id="structuredjson">structuredJSON</h1>

<center><img src="/assets/images/structuredJSON.jpg" alt="structuredJSON.jpg" width="550" /></center>
<p><br /></p>

<p>USGS의 지진 정보는 structuredJSON 형태로 제공됩니다. 필요한 정보인 latitude / longitude를 얻기 위해 
각 structure를 정의합니다. Products 타입을 사용하여 RootProperties 타입 안에 products를 정의하고<br />
Origin 타입을 사용하여 Products 타입 안에 origin 을 정의하는 것과 같은 방법으로 이미지 속 GeoJSON 계층을<br />
모델링합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">latitude</span><span class="p">:</span> <span class="kt">Double</span> <span class="p">{</span> <span class="n">properties</span><span class="o">.</span><span class="n">products</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">first</span><span class="o">!.</span><span class="n">properties</span><span class="o">.</span><span class="n">latitude</span> <span class="p">}</span>
<span class="k">var</span> <span class="nv">longitude</span><span class="p">:</span> <span class="kt">Double</span> <span class="p">{</span> <span class="n">properties</span><span class="o">.</span><span class="n">products</span><span class="o">.</span><span class="n">origin</span><span class="o">.</span><span class="n">first</span><span class="o">!.</span><span class="n">properties</span><span class="o">.</span><span class="n">longitude</span> <span class="p">}</span>
</code></pre></div></div>
<p>모델링한 스트럭처를 이용하여 위와 같이 latitude, longitude 정보를 계산합니다. 루트 프로퍼티로부터 한 계층씩 내려가며 
최종적으로 latitude와 longitude를 계산하는 방식이 인상깊었습니다.</p>

<h1 id="codingkey-enum">CodingKey enum</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">enum</span> <span class="kt">CodingKeys</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="kt">CodingKey</span> <span class="p">{</span>
    <span class="k">case</span> <span class="n">magnitude</span> <span class="o">=</span> <span class="s">"mag"</span>
    <span class="k">case</span> <span class="n">place</span>
    <span class="k">case</span> <span class="n">time</span>
    <span class="k">case</span> <span class="n">code</span>
    <span class="k">case</span> <span class="n">detail</span>
    <span class="k">case</span> <span class="n">tsunami</span>
<span class="p">}</span>
</code></pre></div></div>
<p>위 예시의 nested coding keys enumeration은 case magnitude = “mag” 값을 가지고 있습니다.<br />
place, time, code, detail, tsunami는 GeoJSON 객체에서 같은 이름을 키값으로 사용하고 있고,<br />
magnitude는 GeoJSON 객체에서 “mag”를 키값으로 가집니다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nf">init</span><span class="p">(</span><span class="n">from</span> <span class="nv">decoder</span><span class="p">:</span> <span class="kt">Decoder</span><span class="p">)</span> <span class="k">throws</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">values</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">container</span><span class="p">(</span><span class="nv">keyedBy</span><span class="p">:</span> <span class="kt">CodingKeys</span><span class="o">.</span><span class="k">self</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">rawMagnitude</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Double</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">magnitude</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">rawPlace</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">place</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">rawTime</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Date</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">time</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">rawCode</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">String</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">code</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">rawDetail</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">URL</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">detail</span><span class="p">)</span>
        <span class="k">let</span> <span class="nv">rawTsunami</span> <span class="o">=</span> <span class="k">try</span><span class="p">?</span> <span class="n">values</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">Int</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">forKey</span><span class="p">:</span> <span class="o">.</span><span class="n">tsunami</span><span class="p">)</span>
        
        <span class="o">...</span> <span class="p">}</span>
</code></pre></div></div>
<p>디코딩하는 생성자 함수에서 magnitude를 키값으로 사용한 것을 확인할 수 있습니다.<br />
CodingKeys enum의 케이스 이름은 Quake struct의 프로퍼티를 나타냅니다.<br />
JSON 객체의 키 값과 이름이 같은 경우는 case 이름만 작성 / 다른 경우는 case magnitude = “mag”와 같이 작성합니다.</p>

<h1 id="existential-types">Existential Types</h1>
<blockquote>
  <p><a href="https://developer.apple.com/tutorials/app-dev-training/building-a-network-test-client">Building a network test client</a></p>
</blockquote>

<p>원래 앱에서는 remote network server에서 데이터를 가져옴
테스트를 위해서 데이터를 가져오는 두번째 경우가 있음
Data Downloader를 각각 다른 것을 사용할 것인데 두 다운로더를 완전히 따로 작성하는 것이 아니라
existential type을 사용하여 작성한 하나의 다운로더를 사용할 것임.</p>

<p>Existentnial type은 any 키워드를 앞에 붙여 사용할 수 있음</p>

<p>lazy는 let과 함께 사용할 수 없음. var와 함께 사용.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">Foundation</span>

<span class="kd">class</span> <span class="kt">QuakeClient</span> <span class="p">{</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">feedURL</span> <span class="o">=</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson"</span><span class="p">)</span><span class="o">!</span>
    
    <span class="c1">//computed porperty의 타입이 있고 milliseconds로 변경하기 위해 이렇게 사용한건가?</span>
    <span class="c1">//date decoding strategy를 변경하기 위해서 anonymous 클로저를 사용해서 init 함</span>
    <span class="kd">private</span> <span class="kd">lazy</span> <span class="k">var</span> <span class="nv">decoder</span><span class="p">:</span> <span class="kt">JSONDecoder</span> <span class="o">=</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">aDecoder</span> <span class="o">=</span> <span class="kt">JSONDecoder</span><span class="p">()</span>
        <span class="n">aDecoder</span><span class="o">.</span><span class="n">dateDecodingStrategy</span> <span class="o">=</span> <span class="o">.</span><span class="n">millisecondsSince1970</span>
        <span class="k">return</span> <span class="n">aDecoder</span>
    <span class="p">}()</span>
    
    <span class="c1">//feedURL은 리터럴 스트링 값을 가지고 있고, decoder는 클로저를 사용하여 이니셜라이징함</span>
    <span class="c1">//downloader 이니셜라이징하여 값 설정</span>
    <span class="c1">//Existential value가 사용되는 부분</span>
    <span class="kd">private</span> <span class="k">let</span> <span class="nv">downloader</span><span class="p">:</span> <span class="n">any</span> <span class="kt">HTTPDataDownloader</span>
    
    <span class="c1">//이니셜라이징 중 파라미터로 통과된 downloader(HTTPDataDownloader 프로토콜을 따르는 any type)가</span>
    <span class="c1">//QuakeClient의 downloader로 사용됨</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">downloader</span><span class="p">:</span> <span class="n">any</span> <span class="kt">HTTPDataDownloader</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">downloader</span> <span class="o">=</span> <span class="n">downloader</span>
    <span class="p">}</span>
    
    
<span class="p">}</span>
</code></pre></div></div>

<p>quakes 배열을 비동기식으로 가져오고, 가져오는 과정에서 에러가 있을 수 있기 때문에 
async, throws 키워드를 사용. property에 async와 throws를 사용하려면 get syntax를 사용해야 함</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">quakes</span><span class="p">:</span> <span class="p">[</span><span class="kt">Quake</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">get</span> <span class="k">async</span> <span class="k">throws</span><span class="p">{</span>
        <span class="c1">//data를 서버로부터 다운로드</span>
        <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">downloader</span><span class="o">.</span><span class="nf">httpData</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">feedURL</span><span class="p">)</span>
        <span class="c1">//다운로드한 데이터를 디코딩</span>
        <span class="k">let</span> <span class="nv">allQuakes</span> <span class="o">=</span> <span class="k">try</span> <span class="n">decoder</span><span class="o">.</span><span class="nf">decode</span><span class="p">(</span><span class="kt">GeoJSON</span><span class="o">.</span><span class="k">self</span><span class="p">,</span> <span class="nv">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
        <span class="c1">//GeoJSON 스트럭처 안에 지진 정보를 배열 형태로 담는 quakes</span>
        <span class="k">return</span> <span class="n">allQuakes</span><span class="o">.</span><span class="n">quakes</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p><strong>URL 사용하여 데이터 가져오기</strong></p>
<ol>
  <li>URLSession의 인스턴스 메서드인 data를 사용하여 데이터를 가져오려고 함</li>
  <li>
    <p>커스텀 프로토콜인 HTTPDataDownloader를 생성</p>

    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">protocol</span> <span class="kt">HTTPDataDownloader</span> <span class="p">{</span>
 <span class="kd">func</span> <span class="nf">httpData</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="k">async</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">Data</span>
 <span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>URLSession에 extension을 작성하여 위 커스텀 프로토콜을 따르도록 함</li>
  <li>httpData(from:_) 함수의 바디 부분에 인스턴스 메서드 data를 사용하여 data를 가져옴</li>
</ol>

<ul>
  <li>Preview Content 폴더로 test data 파일을 옮기면 SwiftUI 프리뷰와 유닛 테스트 둘 다에서 데이터를 사용할 수 있음</li>
</ul>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[Earthquakes app tutorial 이 글은 위의 apple developer tutorial을 따라가며 정리한 내용입니다. Error /decoding-structured-json/Decode earthquake data/step 8 Swift에서는 Error 프로토콜을 따르는 타입을 사용하여 에러를 나타냅니다. Error 프로토콜은 에러를 핸들링하기 위해 사용되는 타입이라는 것을 나타낼 뿐 아무런 내용이 없습니다. 요구사항도 없습니다. 그래서 커스텀 타입에 자유롭게 사용할 수 있습니다. ```swift enum QuakeError: Error { case missingData }]]></summary></entry><entry><title type="html">My Box</title><link href="http://localhost:4000/til/2022-08-14-myBoxes.html" rel="alternate" type="text/html" title="My Box" /><published>2022-08-14T00:00:00+09:00</published><updated>2022-08-14T00:00:00+09:00</updated><id>http://localhost:4000/til/myBoxes</id><content type="html" xml:base="http://localhost:4000/til/2022-08-14-myBoxes.html"><![CDATA[<h1 id="my-box---swiftui-프로젝트">My Box - SwiftUI 프로젝트</h1>
<video src="https://user-images.githubusercontent.com/85061148/190425324-cebc28eb-9cf7-45f9-a66a-96bb1ba0aef6.mov" controls="controls" style="max-width: 600px">
</video>
<blockquote>
  <p>~9/15<br />
  <b>📌 진행사항</b></p>
  <ul>
    <li>보관함 목록</li>
    <li>아이템 목록</li>
    <li>보관함 편집 화면</li>
  </ul>
</blockquote>

<blockquote>
  <p>~9/19<br />
  <b>📋 메모</b><br />
  Edit 뷰를 만들기 전에 타입 Box 안에 nested 형태로 Data라는 타입을 생성했다.<br />
  타입 Data는 왜 필요했을까?</p>
  <ul>
    <li>Data에는 Box의 속성 중, 편집 가능하도록 할 속성을 담는다.</li>
    <li>사용자가 편집한 내용을 Data의 각 속성에 담는다.</li>
    <li>변경사항이 저장되는게 확실해지면 (‘확인’ 또는 ‘Done’ 버튼을 눌렀을 때…)</li>
    <li>Data에 담긴 내용을 Box에 업데이트한다.</li>
  </ul>
</blockquote>

<video src="https://user-images.githubusercontent.com/85061148/192147063-40f9f830-3ce6-4b31-bca1-b9950092c6f6.mov" controls="controls" style="max-width: 600px">
</video>
<blockquote>
  <p>~9/25<br />
  <b>📌 진행사항</b></p>
  <ul>
    <li>Done 버튼을 누르면 편집 화면 사라짐</li>
    <li>Box.Data() 인스턴스에 저장된 데이터를 Box 인스턴스에 업데이트하는 함수 실행
      <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kt">ToolbarItem</span><span class="p">(</span><span class="nv">placement</span><span class="p">:</span> <span class="o">.</span><span class="n">confirmationAction</span><span class="p">)</span> <span class="p">{</span>
<span class="kt">Button</span><span class="p">(</span><span class="s">"Done"</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">isPresentingEditView</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">box</span><span class="o">.</span><span class="nf">update</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
<span class="p">}</span>
  <span class="p">}</span>
</code></pre></div>      </div>
    </li>
  </ul>
</blockquote>
<video src="https://user-images.githubusercontent.com/85061148/193455920-c93634a8-1fe1-468a-b779-29c0cd696d84.mov" controls="controls" style="max-width: 600px">
</video>
<blockquote>
  <p>~10/2<br />
  <b>📌 진행사항</b></p>
  <ul>
    <li>State 와 binding을 사용하여 데이터가 뷰 사이에서 전달되도록 했지만, 앱을 종료했다 다시 시작하면 모든 데이터가 날라간다. 데이터를 저장하고 가져오는 메서드를 작성해야 한다.</li>
    <li>데이터를 file/Document에 저장하고 가져오는 함수를 따로 작성하고 앱이 열릴 때 데이터를 가져오는 함수 적용 중</li>
    <li>@Environment 속성에 scenePhase 값을 설정하여 앱이 inactive한 상태로 바뀔 때 사용자가 입력한 데이터를 저장하도록 함. 이제 앱을 종료하고 다시 열어도 그대로 데이터가 저장되어 있는 상태가 되었다.</li>
    <li>보관함 리스트를 삭제하는 기능 추가 완료</li>
    <li>보관함에 pin 심볼을 다른 것으로 변경하기</li>
    <li>기존에 임의로 설정해두었던 배경/글자색을 주석처리하여 기본색으로 설정</li>
    <li>태그 심볼 제거</li>
  </ul>
</blockquote>

<video src="https://user-images.githubusercontent.com/85061148/193462252-3c201255-58ca-4764-8887-1adca5ca0164.MP4" controls="controls" style="max-width: 300px">
</video>
<blockquote>
  <p>~10/6<br />
  <b>📌 진행사항</b><br />
  데이터가 잘 입력되는지 테스트 해봤는데 생각 못한 문제가 있었다. 한번에 많은 데이터를 입력면 목록이 키보드 뒤로 숨는다.. 흠.. 위 목록을 스크롤로 올릴 수 있어서 사용에는 문제가 없지만 좀 더 나은 사용자 경험을 위해서 후에 수정할 목록에 추가!<br />
  기능을 좀 더 추가해야 할 것 같아서 목록에 별모양을 추가하는 중.. ‘좋아요’ 버튼 같은 느낌으로!</p>
</blockquote>

<p><img src="/assets/images/MyBoxes_20221008.png" alt="MyBoxes_20221008.png" width="700" /> <br /></p>
<video src="https://user-images.githubusercontent.com/85061148/194709563-3f4354c8-5f77-49dd-afb1-98ce5c300238.mov" controls="controls" style="max-width: 300px"></video>
<blockquote>
  <p>~10/8<br />
  <b>📌 진행사항</b></p>
  <ul>
    <li>튜토리얼을 보고 리스트를 필터링하는 computed property를 바디 바깥 부분에 작성했는데 그럼 바인딩을 사용할 수 없어서 바디 안쪽으로 재작성했다.</li>
    <li>‘좋아요’(?) / Favorite 을 표시할 수 있는 기능을 추가해보고 있다. Favorite인지 아닌지 정보를 담을 Bool 타입 속성을 모델 스트럭처에 추가하고 그 속성의 값이 true일 때만 노란색 별이 나타나도록 해주었다. 샘플 데이터 값에 true/false를 입력하여 별이 잘 나타는지 확인했다. 토글을 만들어 On 상태일 때는 favorite 표시가 된 것만 나타나도록 했다.</li>
  </ul>
</blockquote>

<!--위 바로 직전 부분 스터디 하기 (토글을 추가하고 토글이 On일때 true로 변환되는 @State 속성을 리스트를 필터링하는 클로저에...) 무슨 말인지 모르겠음.-->

<!-- 10/10 -->
<!--  -->
<!--바인딩을 사용하여 뷰 안에서 생긴 데이터의 변경사항을 데이터 소스로 전달할 수 있다.   -->
<!--사용자가 입력한 카테고리를 기준으로 나누어 보관함들을 보여주는 뷰를 생성 중.  -->
<!--샘플 데이터에 입력해 주었고, 사용자가 입력하는 부분을 생성해야 함.-->
<!---->
<!-- 10/11 -->
<!--  -->
<!--사용자가 입력한 카테고리를 기준으로 나누는 것은 일단 보류. 미리 생성해 둔 카테고리를 이용하여 보관함을 나눠보는 것을 먼저 시도해보려고 한다. -->
<!---->
<!-- 10/12 -->
<!--  -->
<!--회사일의 연장..?으로 iOS 프로젝트가 하나 생겨서 잠시 이 프로젝트를 쉽니다.-->
<!--  -->
<!-- 10/13  -->
<!--  -->
<!--위 프로젝트를 안해도 돼서 (하루만에 ㅋㅋㅋㅋ) 다시 이 프로젝트로 돌아옵니다.-->
<!---->
<!-- 10/16 -->
<!--  -->
<!--카테고리 기능이 필요할 것 같지 않아서 검색 기능을 먼저 구현해보려고 한다.  -->
<!--searchable 모더파이어를 사용해보려고 하는데.. 될까..? -->

<p><img src="/assets/images/MyBoxes_20221017.png" alt="MyBoxes_20221017.png" width="300" /> <br /></p>
<blockquote>
  <p>~10/17<br />
  <b>📌 진행사항</b>  <br />
  등록한 모든 아이템을 검색하는 기능을 구현하려고 찾아보니 크게 UIKit 을 사용하는 방법과 SwifUI를 사용하는 방법 두 가지가 있었다. 먼저 SwiftUI의 searchable modifier 사용해보기로 했다. 검색 바를 구현하는건 코드 세 줄만 추가하면 되어서 금방했는데 그 후에 과정에서 시간이 좀 들고 있다. (Overlay를 사용해서 검색된 값들과 검색창만 화면에 보여주려고 하는데 Overlay를 어디다가 붙여야 할 지 모르겠음.) 내일까지 구현해보고 안되면 UIKit으로 해봐야겠다.</p>
</blockquote>

<video src="https://user-images.githubusercontent.com/85061148/196460314-4cc2b2ea-3c89-48af-9718-758e2d3f89e6.mov" controls="controls" style="max-width: 600px">
</video>
<blockquote>
  <p>~10/18<br />
  <b>📌 진행사항</b>  <br />
  어제 searchable 을 사용하여 검색 텍스트 필드 UI를 생성했다. 사용자가 입력을 시작하면 현재 박스 목록 화면을 완전히 가리는 새로운 뷰가 나타나고, 그 뷰에 검색어가 들어간 아이템들이 쭉 나왔으면 좋겠다. 일단 영상에서 보이듯이 검색어를 입력했을 때 현재 목록위로 overlay가 된 투명한(?) 뷰에 입력한 값이 전달되는 것까지 구현하였다. 이제 그 화면에 검색어로 필터링된 아이템 리스트를 뽑아내면 될 것 같다.</p>
</blockquote>

<blockquote>
  <p>~10/19<br />
  <b>📌 진행사항</b>    <br />
  전체 앱을 통하는 데이터 흐름을 변경했다. 전체 아이템 목록의 이름(itemName)을 기준으로 키워드와 일치하는 아이템 목록을 만들어서 뿌러주려고 했는데.. 오늘은 실패! 오류는 어떻게든 해결을 해봤는데 키워드를 입력하자 흰 화면이 나타난다. 내일 다시 도전해보겠어….!</p>
</blockquote>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">filteredList</span><span class="p">:</span> <span class="p">[</span><span class="kt">Box</span><span class="o">.</span><span class="kt">Item</span><span class="p">]</span> <span class="p">{</span>
    <span class="k">if</span> <span class="o">!</span><span class="n">searchText</span><span class="o">.</span><span class="n">isEmpty</span><span class="p">{</span>
        <span class="k">return</span> <span class="n">items</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">items</span><span class="o">.</span><span class="n">filter</span> <span class="p">{</span> <span class="nv">$0</span><span class="o">.</span><span class="n">itemName</span><span class="o">.</span><span class="nf">localizedCaseInsensitiveContains</span><span class="p">(</span><span class="n">searchText</span><span class="p">)</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<blockquote>
  <p>~10/20<br />
  <b>📌 진행사항</b>   <br />
  localizedCaseInsensitiveContains(_:) 메서드를 사용해서 대소문자에 상관없이 검색 키워드를 포함한 아이템들의 목록을 만드려고 했는데 처음에 자꾸 오류가 났다. 알고보니 searchText 자리에 값이 nil이면 안되는데 if !searchText.isEmpty처리를 해주지 않았던게 원인이었다. 비어있을 때는 키워드로 필터링되지 않은 전체 아이템이 나타나도록 if문을 작성해 주었다.<br />
  이제 검색어를 입력하면 리스트 화면이 나타나긴하지만 키워드와는 관계없이 첫번째 박스에 담긴 아이템이 나타나고, search bar도 사라진다. 해결하자!</p>
</blockquote>

<blockquote>
  <p>~10/21<br />
  <b>📌 진행사항</b>   <br />
  전체 아이템을 가진 리스트를 search bar에 입력된 키워드를 가진 아이템들을 가진 리스트로 필터링 하려고 했는데, 전체 아이템을 잘못 작성한 것 같다.</p>
  <ul>
    <li>전체 아이템을 가진 리스트를 먼저 정상적으로 뽑아보기</li>
  </ul>
</blockquote>

<blockquote class="block-danger">
  <p>Type ‘() -&gt; ()’ cannot conform to ‘ShapeStyle…</p>
</blockquote>

<blockquote>
  <p>~10/22<br />
  <b>📌 진행사항</b>  <br />
  위와 같은 에러가 발생해서 해결해 보는 중..<br />
  해결!<br />
  검색 기능을 구현하면서 searchbar에 텍스트가 입력되고 검색 중일 때 overlay 를 사용해서 해당 텍스트를 포함한 아이템 리스트가 전체 화면을 가리도록 구현했다. 이 과정에서 사용된 .overlay modifier가 문제였다.<br />
  .overlay { } / .overlay( ) 이렇게 두 개의 형태로 사용되는데 { }를 가진 overlay의 경우 해당 컨텐츠가 ShapeStyle 프로토콜을 따라야해서 발생한 오류였다. ()를 가진 overlay의 경우 어떤 프로토콜도 따르고 있지 않아서 { }를 ( )로 변경해주었더니 에러가 사라졌다.</p>
</blockquote>

<video src="https://user-images.githubusercontent.com/85061148/197391380-14670e28-3997-45da-94ef-2a9572839687.mov" controls="controls" style="max-width: 300px">
</video>
<blockquote>
  <p>~10/23<br />
  <b>📌 진행사항</b>  <br />
  드디어 됐다! 각 박스들의 목록이 있는 메인 화면에서 검색어를 입력하면 그 검색어를 포함한 아이템들만 화면에 보여주는 것 성공!</p>
  <h4 id="일주일동안-성공하지-못했던-요인">일주일동안 성공하지 못했던 요인</h4>

  <p>스스로 생각하며 분석해보는 시간이 부족했다.
searchable 을 사용하여 검색 기능을 구현하는 방법을 엄청 검색했다. 지금 돌이켜 생각해보면 정말 ‘검색만’ 했다. 여러가지 인스턴스 메서드를 사용해보고 사람들이 사용한 여러가지 방법을 적용해봤는데, 안되는 이유는 아이템 전체 목록을 잘못 설정한 것이었다. 아이템의 전체 목록 부터 잘못 불러오고 있었으니 아무리 필터링을 하려고 해도 필터링이 제대로 되지 않았던 것이다. 전체 아이템 리스트를 불러올 방식은 아주 간단한데 그것부터 제대로 하지 않아 며칠을 다른곳에서 이유를 찾으며 시간을 보냈다. 검색 기능 구현이 안되는 이유들을 찾으며 소스를 다시 보니 모호하게 아는 부분이 많다는 것을 꺠달았다.</p>
</blockquote>

<blockquote>
  <p>~10/25<br />
  <b>📌 진행사항</b>  <br />
  검색된 아이템을 누르면 아이템 하나의 디테일 뷰로 이동하는 것을 구현해보려고 하는데 item 모델에 id와 itemName 속성 딱 두가지만 정의를 해두어서 디테일 뷰에 여러가지 속성들을 나타내려면 모델에 속성을 추가해야 할 것 같다.</p>
</blockquote>

<video src="https://user-images.githubusercontent.com/85061148/198838091-20663d4b-ece2-4f52-8876-a8caf5a1b8f6.mov" controls="controls" style="max-width: 300px">
</video>
<blockquote>
  <p>~10/28<br />
  <b>📌 진행사항</b> <br />
  Navigation Link를 사용하여 아이템을 눌렀을 때 다른 View로 이동하도록 해보고 있다.<br />
  일단 해당 아이템이 속하는 박스 뷰로 이동하도록 수정해 보았다. 각 아이템의 개인 속성은 필요할 것 같으면서도 복잡해지는 것 아닐까 하는 생각이 든다. 아이템 이름이 아닌 따로 저장한 키워드를 이용한 검색 기능은 넣어으면 좋겠어서 그 부분에 대해 생각해 봐야겠다.</p>
</blockquote>

<p><img src="/assets/images/MyBoxes_20221031.png" alt="MyBoxes_20221031.png" width="300" /> <br /></p>
<blockquote>
  <p>~10/31<br />
  <b>📌 진행사항</b> <br />
  10월의 마지막 날! 박스 뷰에서 별 모양을 누르면 메인 리스트에서 노란색 별이 표출되고  이 별 표시가 있는 목록만 볼 수 있는 토글 버튼이 있는데 “Favorites Only”라는 글씨 대신 별을 추가해주고 버튼 가까이로 위치를 이동시켰다. 박스의 별은 왼쪽 정렬해주어 표시가 되지 않은 상자들과 좀 더 눈에 띄게 달라보이도록 하였다.</p>
</blockquote>

<p><img src="/assets/images/MyBoxes_20221023.png" alt="MyBoxes_20221023.png" width="600" /></p>
<blockquote>
  <h4 id="1201">12/01</h4>
  <p><b>📌 진행사항</b>   <br />
12월이 시작되었고 여전히 회사는 바쁘고 개인적으로도 할 일이 많지만,
이 프로젝트를 꼭 앱 스토어에 올리겠다는 마음으로 다시 시작!
먼저 각 아이템의 상세 정보를 담는 뷰를 연결해 봐야겠다.</p>
  <ul>
    <li>1번 보관함을 생성한 뒤 다시 새 보관함을 생성할 때, 1번 보관함에 정보가 텍스트 필드에 그대로 나타나서 수정 완료</li>
    <li>처음 보관함 등록할 때 별 표시 되어서 저장되는 것 수정 완료
-&gt; 추가하는 뷰에서 일시적으로 데이터를 저장하는 Data()에 별 표시(좋아요 표시) 속성인 isFavorite의 기본값이 true로 되어있던 것을 false로 변경해줌.</li>
  </ul>
</blockquote>

<p><img src="/assets/images/MyBoxes_20221211.png" alt="MyBoxes_20221211.png" width="600" /></p>
<blockquote>
  <p>~12/11<br />
  <b>📌 진행사항</b>    <br />
리스트 안에서 아이템의 위치를 변경할 수 있도록 수정
  .onMove modifier를 사용해서 간단하게 아이템을 이동시키는 기능을 구현할 수 있었다.<br />
  .onMove는 ForEach로 생성되는 리스트처럼 ‘동적 리스트’에만 사용할 수 있다. List로 만들어진 리스트는 정적 리스트이기 때문에 사용할 수 없다.<br />
  나는 ForEach를 통해 리스트를 만들고 있기 때문에 사용할 수 있었다. <br />
  .onMove는 두 개의 패러미터를 가진다. indexSet과 Int형의 패러미터(위 이미지에서는 index)이다.</p>
  <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">.</span><span class="n">onMove</span> <span class="p">{</span> <span class="p">(</span><span class="kt">IndexSet</span><span class="p">,</span> <span class="n">index</span><span class="p">)</span> <span class="k">in</span>
    <span class="n">box</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="nf">move</span><span class="p">(</span><span class="nv">fromOffsets</span><span class="p">:</span> <span class="kt">IndexSet</span><span class="p">,</span> <span class="nv">toOffset</span><span class="p">:</span> <span class="n">index</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="o">.</span><span class="nf">environment</span><span class="p">(\</span><span class="o">.</span><span class="n">editMode</span><span class="p">,</span> <span class="kt">Binding</span><span class="o">.</span><span class="nf">constant</span><span class="p">(</span><span class="kt">EditMode</span><span class="o">.</span><span class="n">active</span><span class="p">))</span>
</code></pre></div>  </div>
  <p>기본적으로 .onMove modifier는 edit 버튼을 생성하고 이 edit 버튼을 눌러야 리스트를 옮길 수 있도록 하는 기능이 활성화되는데 나는 이미 Edit 버튼을 사용하여 모달뷰를 띄우고 있기 때문에 리스트에서 이 기능을 확인할 수 없었다. edit 버튼을 누르면 editing 중인 상태로 전환되고, 이 상태에서 아이템의 순서를 변경하는 기능이 활성화되므로 항상 editing 중인 상태로 변경하여 해결하였다.</p>
</blockquote>

<blockquote class="block-tip">
  <p>수정 필요</p>
  <ul>
    <li>키보드에 가려져 작성중인 아이템이 보이지 않는 부분</li>
  </ul>
</blockquote>]]></content><author><name>Mirae</name></author><category term="TIL" /><summary type="html"><![CDATA[My Box - SwiftUI 프로젝트 ~9/15 📌 진행사항 보관함 목록 아이템 목록 보관함 편집 화면 ~9/19 📋 메모 Edit 뷰를 만들기 전에 타입 Box 안에 nested 형태로 Data라는 타입을 생성했다. 타입 Data는 왜 필요했을까? Data에는 Box의 속성 중, 편집 가능하도록 할 속성을 담는다. 사용자가 편집한 내용을 Data의 각 속성에 담는다. 변경사항이 저장되는게 확실해지면 (‘확인’ 또는 ‘Done’ 버튼을 눌렀을 때…) Data에 담긴 내용을 Box에 업데이트한다.]]></summary></entry><entry><title type="html">Tips, Warnings, and Dangers</title><link href="http://localhost:4000/jekyll/2022-06-30-tips_warnings_dangers.html" rel="alternate" type="text/html" title="Tips, Warnings, and Dangers" /><published>2022-06-30T00:00:00+09:00</published><updated>2022-06-30T00:00:00+09:00</updated><id>http://localhost:4000/jekyll/tips_warnings_dangers</id><content type="html" xml:base="http://localhost:4000/jekyll/2022-06-30-tips_warnings_dangers.html"><![CDATA[<p>The jekyll-theme supports tips, warnings, and dangers blocks and the style is referred
from <a href="https://discordjs.guide/popular-topics/canvas.html#setting-up-napi-rs-canvas">the discord.js website</a>.</p>

<p>You could have the following <a href="https://kramdown.gettalong.org/quickref.html#block-attributes">markdown attributes (supported by kramdown)</a>:</p>

<h3 id="tips">Tips</h3>

<p>Using a <code class="language-plaintext highlighter-rouge">{: .block-tip}</code> attribute:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This guide is last tested with @napi-rs/canvas^0.1.20, so make sure you have</span>
<span class="gt">&gt; this or a similar version after installation.</span>
{: .block-tip }
</code></pre></div></div>

<blockquote class="block-tip">
  <h5 id="tip">TIP</h5>

  <p>This guide is last tested with @napi-rs/canvas^0.1.20, so make sure you have
this or a similar version after installation.</p>
</blockquote>

<h3 id="warnings">Warnings</h3>

<p>Using a <code class="language-plaintext highlighter-rouge">{: .block-warning}</code> attribute:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; Be sure that you're familiar with things like async/await and object destructuring</span>
<span class="gt">&gt; before continuing, as we'll be making use of features like these.</span>
{: .block-warning }
</code></pre></div></div>

<blockquote class="block-warning">
  <h5 id="warning">WARNING</h5>

  <p>Be sure that you’re familiar with things like async/await and object destructuring
before continuing, as we’ll be making use of features like these.</p>
</blockquote>

<h3 id="dangers">Dangers</h3>

<p>Using a <code class="language-plaintext highlighter-rouge">{: .block-danger}</code> attribute:</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; You cannot delete an ephemeral message.</span>
{: .block-danger }
</code></pre></div></div>

<blockquote class="block-danger">
  <h5 id="danger">DANGER</h5>

  <p>You cannot delete an ephemeral message.</p>
</blockquote>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[The jekyll-theme supports tips, warnings, and dangers blocks and the style is referred from the discord.js website.]]></summary></entry><entry><title type="html">Wide tables</title><link href="http://localhost:4000/jekyll/2022-06-26-wide_tables.html" rel="alternate" type="text/html" title="Wide tables" /><published>2022-06-26T00:00:00+09:00</published><updated>2022-06-26T00:00:00+09:00</updated><id>http://localhost:4000/jekyll/wide_tables</id><content type="html" xml:base="http://localhost:4000/jekyll/2022-06-26-wide_tables.html"><![CDATA[<p>A wide tables needs to be wrapped into a <code class="language-plaintext highlighter-rouge">div</code> with class <code class="language-plaintext highlighter-rouge">table-wrapper</code>
to make sure it displayed as expected on mobile devices. For example,</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"table-wrapper"</span> <span class="na">markdown=</span><span class="s">"block"</span><span class="nt">&gt;</span>

|title1|title2|title3|title4|title5|title6|title7|title8|
|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|
|1|2|3|4|5|6|7|8|
|1|2|3|4|5|6|7|8|
|1|2|3|4|5|6|7|8|
|1|2|3|4|5|6|7|8|

<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Will be rendered as</p>

<div class="table-wrapper">

  <table>
    <thead>
      <tr>
        <th style="text-align: center">title1</th>
        <th style="text-align: center">title2</th>
        <th style="text-align: center">title3</th>
        <th style="text-align: center">title4</th>
        <th style="text-align: center">title5</th>
        <th style="text-align: center">title6</th>
        <th style="text-align: center">title7</th>
        <th style="text-align: center">title8</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: center">2</td>
        <td style="text-align: center">3</td>
        <td style="text-align: center">4</td>
        <td style="text-align: center">5</td>
        <td style="text-align: center">6</td>
        <td style="text-align: center">7</td>
        <td style="text-align: center">8</td>
      </tr>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: center">2</td>
        <td style="text-align: center">3</td>
        <td style="text-align: center">4</td>
        <td style="text-align: center">5</td>
        <td style="text-align: center">6</td>
        <td style="text-align: center">7</td>
        <td style="text-align: center">8</td>
      </tr>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: center">2</td>
        <td style="text-align: center">3</td>
        <td style="text-align: center">4</td>
        <td style="text-align: center">5</td>
        <td style="text-align: center">6</td>
        <td style="text-align: center">7</td>
        <td style="text-align: center">8</td>
      </tr>
      <tr>
        <td style="text-align: center">1</td>
        <td style="text-align: center">2</td>
        <td style="text-align: center">3</td>
        <td style="text-align: center">4</td>
        <td style="text-align: center">5</td>
        <td style="text-align: center">6</td>
        <td style="text-align: center">7</td>
        <td style="text-align: center">8</td>
      </tr>
    </tbody>
  </table>

</div>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[A wide tables needs to be wrapped into a div with class table-wrapper to make sure it displayed as expected on mobile devices. For example,]]></summary></entry><entry><title type="html">Page with cover image</title><link href="http://localhost:4000/jekyll/2022-05-24-page_cover.html" rel="alternate" type="text/html" title="Page with cover image" /><published>2022-05-24T00:00:00+09:00</published><updated>2022-05-24T00:00:00+09:00</updated><id>http://localhost:4000/jekyll/page_cover</id><content type="html" xml:base="http://localhost:4000/jekyll/2022-05-24-page_cover.html"><![CDATA[<p>The jekyll-gitbook theme supports adding a cover image to a specific page by adding
a <code class="language-plaintext highlighter-rouge">cover</code> field to the page metadata:</p>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  ---
  title: Page with cover image
  author: Tao He
  date: 2022-05-24
  category: Jekyll
  layout: post
<span class="gi">+ cover: /assets/jekyll-gitbook/dinosaur.gif
</span>  ---
</code></pre></div></div>]]></content><author><name>Tao He</name></author><category term="Jekyll" /><summary type="html"><![CDATA[The jekyll-gitbook theme supports adding a cover image to a specific page by adding a cover field to the page metadata:]]></summary></entry></feed>