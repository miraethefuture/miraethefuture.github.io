{"/pages/about/": {
    "title": "About",
    "keywords": "Jekyll",
    "url": "/pages/about/",
    "body": "This is an about page."
  },"/pages/contact/": {
    "title": "Contact",
    "keywords": "Jekyll",
    "url": "/pages/contact/",
    "body": "This is an contact page."
  },"/pages/design/draft/": {
    "title": "Design Draft",
    "keywords": "Jekyll",
    "url": "/pages/design/draft/",
    "body": "This is an draft page."
  },"/til/2022-07-30-today.html": {
    "title": "iOS 개발 튜토리얼 / UIKit essentials / 앱 Today",
    "keywords": "TIL",
    "url": "/til/2022-07-30-today.html",
    "body": "iOS App Dev Tutorials: UIKit Essential 위 공식 UIKit 개발 튜토리얼을 따라가며 그 과정을 정리해 봅니다. Creating a List View 이 부분에서는 앱의 root view를 생성합니다. 리스트 레이아웃의 콜렉션 뷰로 사용자의 데일리 리마인더를 화면에 보여줍니다. 리스트를 보여줄 콜렉션 뷰를 생성하고 content configuration object를 사용하여 셀들의 외형을 정합니다. 그리고 그 셀들을 diffable 데이터 소스에 연결하여 데이터가 변경될 때 사용자의 인터페이스도 함께 변경되도록 합니다. Section 1 - Create a Project 이 모듈의 전체 과정을 거쳐 앱을 만들어가며 앱 개발의 가장 중요한 부분들을 배울 것입니다. Xcode와 UIKit을 사용하는 일반적인 프로그래밍 패턴에 대해 알아볼 것입니다. 먼저, Xcode 템플릿을 사용여 iOS 앱 프로젝트를 생성해 봅니다. (프로젝트 생성과 시뮬레이터 사용에 대해서는 알고 있기 때문에 스킵합니다.) Section 2 - Add a Collection View Controller 뷰 컨트롤러를 스토리보드에 추가함으로써 앱 Today 만들기를 시작합니다. 뷰 컨트롤러는 데이터 모델과 뷰 사이에서 다리 역할을 합니다. 각 컨트롤러는 뷰 계층을 관리하고, 뷰의 컨텐츠를 업데이트하고, UI의 이벤트에 응답합니다. 콜렉션 뷰를 생성하기 위해 Interface Builder를 사용할 것입니다. 콜렉션 뷰는 그리드, 컬럼, 로우, 테이블의 형태로 셀을 나타낼 수 있습니다. Step 1 Main 스토리보드에 프로젝트 생성 시 자동으로 생성되어 있는 View Controller Scene을 삭제해줍니다. (선택 후 키보드 delete ⌫ 키 누르기) 이 뷰 컨트롤러를 리스트를 보여 줄 뷰 컨트롤러로 대체 할 것입니다. Step 2. 오른쪽 위에 + 아이콘(라이브러리 아이콘)을 클릭한 뒤 Collection View Controller를 검색하고 캔바스로 드래그하여 새로운 콜렉션 뷰를 생성합니다."
  },"/til/2022-06-18-sceneKit.html": {
    "title": "SceneKit 3D Programming for iOS: Getting Started",
    "keywords": "learning 공부 기록 Swift TIL",
    "url": "/til/2022-06-18-sceneKit.html",
    "body": "SceneKit 3D Programming for iOS: Getting Started 아래 모든 정보의 출처는 위의 웹페이지이며 개인의 학습 용도로만 사용되었음을 밝힙니다. Loading a Scene var body: some View { ZStack { SceneView( // 1 scene: scene, // 2 pointOfView: setUpCamera(planet: viewModel.selectedPlanet), // 3 options: .allowsCameraControl ) // 4 .background(ColorPalette.secondary) .edgesIgnoringSafeArea(.all) ... } body부분에 SceneView를 추가해주어 비어있던 앱의 백그라운드를 SceneView로 바꾸어줍니다. // 1 : 어떤 scene을 추가할 것인지 선택합니다. 이 프로젝트에서는 아래와 같이 function을 작성하여 scene 변수에 SCNScene 타입의 값을 할당해두었습니다. 미리 생성해둔(과정 생략, 추가 예정) Solar Scene이라는 이름의 SceneKit Scene File을 이용했습니다. // Create the scene from the scene file static func makeScene() -&gt; SCNScene? { let scene = SCNScene(named: \"Solar Scene.scn\") return scene } // Call makeScene() to load the scene var scene = makeScene() // 2 : pointOfView는 화면에 scene을 비춰줄(보여줄) 카메라입니다. 어떤 게임들은 이 속성을 이용하여 여러개의 카메라를 이동하며 현재 보고 있는 화면의 시점을 바꿀 수 있습니다. // Get a reference to the camera node func setUpCamera(planet: Planet?) -&gt; SCNNode? { let cameraNode = scene?.rootNode .childNode(withName: \"camera\", recursively: false) return cameraNode } // 3 : 여기서는 .allowsCameraControl 옵션을 사용하여 사용자가 카메라를 조정할 수 있도록 하였습니다. 이 외에도 여러가지 옵션을 이용하여 SceneView의 동작을 제어할 수 있습니다. Scene view가 로딩되는 동안 보일 화면의 색을 설정하고, 화면 전체에 scene view가 보여지도록 합니다. 짠 아래처럼 scene이 나타난 화면을 볼 수 있습니다. Adding Object SceneKit이 제공하는 도형을 사용하거나 Metal과 같은 다른 3D 모델링 도구를 이용하여 만든 커스텀 도형을 사용하여 오브젝트를 추가할 수 있습니다. 이 튜토리얼에서는 SceneKit이 제공하는 기본 오브젝트 중 Sphere을 추가하여 태양의 형태를 만들어 봅니다. 오른쪽 위의 + 버튼을 클릭하여 Library를 엽니다. Sphere을 검색하여 찾은 뒤 scene graph에 드래그하여 추가합니다. Modifying Materials 추가한 구의 material을 수정하여 조금 더 태양처럼 보이도록 합니다. Inspectors panel - Materials inspector 을 선택합니다. Diffuse의 색을 클릭하여 컬러 픽커를 가져온 뒤. 색을 선택합니다. Material의 diffuse는 오브젝트의 기본 색상으로 생각하면 됩니다. Illumination 색을 흰색으로 변경합니다. Material의 illumination은 빛이 오브젝트에 닿는 방식을 결정합니다. Attributes inspector에서 구의 반지름을 조정하여 크기를 키웁니다. 크기를 띄운 뒤 앱을 빌드하고 실행하면 태양이 사라져있습니다. 사이즈가 커져서 카메라를 가리게 됩니다. 카메라의 거리를 변경해야 합니다. Setting Up the Camera Node camera 노트를 선택하고 Node inspector(상자 모양)을 선택합니다. camera 노드의 포지션을 변경하는 것은 camera 노드에 첨부된 카메라의 포지션도 변경합니다. (노드에 일어난 변경은 첨부된 것에도 똑같이 일어남.) 모든 Node는 아래의 속성들을 가지고 있습니다. 이 속성들은 Node inspector에서 변경할 수 있습니다. Identity: 노드의 이름. 코드에서 이 이름을 이용하여 노드에 접근합니다. Position: scene에서 노드의 위치 Euler: 노드의 회전 Scale: 각 축에 따른 사이즈를 변경할 수 있음 Node inspector의 position / Euler 값을 변경 Attributes inspector의 Z Clipping 값을 변경 Creating Planets 아래 다섯개의 행성을 추가합니다. Mercury 수성 Venus 금성 Earth 지구 Mars 화성 Saturn 토성 위에서 생성한 태양과 마찬가지로 구(sphere)입니다. 색과 크기, 위치와 같은 디테일을 설정할 것입니다. Mercury 먼저 Objects Library에서 구 하나를 생성해 줍니다. Node inspector에서 x:0 y:0 z:25 그리고 이름을 mercury로 변경합니다. Material inspector에서 Diffuse를 #BBBBBB로 변경합니다. Roughness 값을 1로 변경합니다. 이 값을 변경하면 물체를 빛나게 하거나 그 반대로 설정할 수 있습니다. 0이 가장 빛나는 값 -&gt; 1이 빛을 가장 적게 반사하는 값입니다. 빌드하고 실행시켜봅니다! SceneKit으로 우리의 첫 번째 행성을 렌더링 해 보았습니다."
  }}
