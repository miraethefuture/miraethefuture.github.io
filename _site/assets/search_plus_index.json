{"/pages/about/": {
    "title": "About",
    "keywords": "Jekyll",
    "url": "/pages/about/",
    "body": "This is an about page."
  },"/pages/contact/": {
    "title": "Contact",
    "keywords": "Jekyll",
    "url": "/pages/contact/",
    "body": "This is an contact page."
  },"/pages/design/draft/": {
    "title": "Design Draft",
    "keywords": "Jekyll",
    "url": "/pages/design/draft/",
    "body": "This is an draft page."
  },"/til/2023-05-24-ViewLayout.html": {
    "title": "SwiftUI 뷰 레이아웃",
    "keywords": "TIL",
    "url": "/til/2023-05-24-ViewLayout.html",
    "body": "struct ReusableLabel: View { let keyword: String let symbol: String var body: some View { Label(keyword, systemImage: symbol) .font(.title) .foregroundColor(.white) .padding() .background(.green.opacity(0.75), in: Capsule()) // - 1 } } struct ReusableLabel_Previews: PreviewProvider { // - 2 static let keywords = [\"Hello\", \"Good Morning\"] static var previews: some View { // - 3 VStack { // - 4 ForEach(keywords, id: \\.self) { word in KeywordBubbleDefaultPadding(keyword: word, symbol: \"fish\") } } } } 1: .background에 Capsule()을 정의해줌으로써 캡슐 모양이 Label의 뒷쪽에 오도록 함. 이때 .padding()을 백그라운드의 윗쪽에 선언해주어야 패딩을 포함한 백그라운드에 캡슐 모양을 생성할 수 있음. 2: PreviewProvider 프로토콜을 사용하여 커스텀 스위프트UI 뷰의 코드가 생성하는 화면을 미리 볼 수 있음 3: PreviewProvider 프로토콜을 구현하기 위해선 static previews 프로퍼티를 정의해야 함 4: VStack 안에 ForEach를 사용하여, ReusableLabel 스트럭쳐가 생성하는 라벨 뷰가 다른 텍스트 길이에서 어떻게 적용되는지 한 화면에서 확인할 수 있음 ScaledMetric를 사용하여 동적으로 넓이 조정하기 padding() modifier를 사용하여 패딩을 주었을 때, 폰트 사이즈가 달라지면 아래 이미지와 같이 큰 사이즈의 폰트에서는 패딩이 충분하지 않는 경우가 있음 이때 패딩 값을 그냥 키워주면 작은 폰트에서는 패딩이 너무 넓어질 수 있음 @ScaledMetric 프로퍼티 래퍼를 사용하여 .title과 같은 environment’s effective font size에 숫자값을 적용할 수 있음 struct KeywordBubbleDefaultPadding: View { let keyword: String let symbol: String @ScaledMetric(relativeTo: .title) var paddingWidth = 20.5 // &lt;- 여기 var body: some View { Label(keyword, systemImage: symbol) .font(.title) .foregroundColor(.white) .padding(paddingWidth) // &lt;- 여기 // .padding() .background(.green.opacity(0.75), in: Capsule()) } } Layering Content 어떤 컨텐츠를 겹쳐서 (z-axis) 나타낼 때, ZStack{}/.overlay()/.background()을 사용 ZStack 다른 뷰들과 상관 없이, 사용 가능한 공간에 따라 뷰의 사이즈를 정함 다른 컨텐츠의 사이즈와 관련하여 뷰의 사이즈를 조정하고 싶다면 overlay와 background를 사용하면 됨 Image() 뷰 이니셜라이저는 기본적으로 이미지의 원래 사이즈로 이미지를 가져옴 resizable() 모더파이어와 scaledToFit() 같은 모더파이어를 사용하여 이미지 사이즈를 조정할 수 있음 .clipShape(RoundedRectangle(cornerRadius: 10.0, style: .continuous)) 을 사용하여 뷰의 위치나 크기를 변경하지 않고 corner radius를 설정할 수 있음"
  },"/til/2023-05-24-TIL.html": {
    "title": "TIL",
    "keywords": "TIL",
    "url": "/til/2023-05-24-TIL.html",
    "body": "스터디 과제 진행하며 정리 (~6/7) @State 프로퍼티는 항상 private으로 사용 (해당하는 뷰와 서브 뷰의 특정한 정보를 담기 때문) observable object class 수정 published 값이 옵셔널로 설정되어 있음 -&gt; 뷰 부분에서 처리해주어야 하는 불편함을 해결하기 위해 수정 final class로 변경 Combine 추가 데이터 로드하는 함수를 제네릭 함수로 변경 데이터 로드 함수를 실행하는 init() 제거 데이터 로드 함수가 observable object 클래스 안이 아닌 바깥 쪽에 정의 func testSearching() throws { let searchText = \"주차\" let result = ModelData().roomList.rooms.filter { $0.hashTags.contains(searchText) } XCTAssertEqual(result.count, 40) } 간단한 테스트 코드 작성하여 search function test 위 코드에서 searchText의 값과 XCTAssertEqual()의 값만 변경하여 여러가지 검색어 상황에 따른 데이터 결과를 확인할 수 있었음 문제 해결 내용 swift let file = Bundle.main.url(forResource: filename, withExtension: \"txt\") 에서 withExtension을 nil로 주면 이름이 일치하는 첫번째 파일을 가져온다고 하여 nil로 주었으나 파일을 찾지 못한다는 에러가 발생하여 파일의 익스텐션인 “txt”로 수정하여 해결 검색 기능을 추가하면서 search text를 해시 태그로 가지고 있는 방 데이터를 필터링하여 목록을 생성. 이 목록을 @State 변수에 할당해야 하는데, 현재 버튼으로 필터링하기 위해 computed property를 사용하고 있음. SwiftUI Source of truth 생성하기 @State와 @Binding은 value type(ex. structure, enum)을 뷰를 업데이트하는 source of truth로 만들어 줌 value type이 아니고 reference type인 클래스는 @ObservedObject, @StateObject, @EnvironmentObject 프로퍼티 래퍼를 사용 @ObservedObject, @StateObject, @EnvironmentObject를 사용하기 위해서 클래스를 observable하게 만들어 주어야 함 @StateObject는 observable 객체를 생성 @ObservedObject는 parent view로부터 객체를 받는다는 걸 나타냄 (@StateObject로 생성된 객체를 받음) @EnvironmentObject는 복잡한 뷰에서 사용됨. 이니셜라이저를 통해 객체를 통과시키지 않고 .environmentObject() 모더파이어를 통해 해당 뷰가 객체를 사용할 수 있도록 함 (부모-자식-자식의 자식뷰에서 자식뷰가 .environmentObject() 모더파이어를 통해 객체를 사용할 수 있게 되면 자식의 자식뷰도 @EnvironmentObject 속성을 통해 사용할 수 있게 됨) 클래스가 ObservableObject 프로토콜을 따르도록 만들면 됨 클래스 안에는 값이 변경되었을 때 UI가 업데이트 되어야 하는 속성들이 정의됨 각 속성은 @Published atrribute를 사용해 정의되어 뷰에서 사용할 수 있게됨 Scene architecture Scene의 구조 하나의 앱을 만들기 위해서, App 프로토콜을 따르는 스트럭처를 생성함 이때 앞에 @main 어트리뷰트를 사용하여 이 스트럭처가 앱의 유일한 entry point라는 것을 시스템에 알려줌 앱 스트럭처의 바디 부분에 Scene 프로토콜을 따르는 스트럭처를 생성 (여러개 생성 가능) Scene은 앱이 보여줄 뷰 게층을 담을 컨테이너 보통 iOS / WatchOS는 하나의 Scene을 가지고 macOS / iPadOS 는 여러개의 Scene을 가짐 Scene Phases and transitions Scene의 단계와 변형 과정 앱이 실행되는 동안 Scene은 세 단계로 변화될 수 있음 active: scene이 foreground에 있고 사용자가 상호작용할 수 있음 inactive: scene이 보이지만, 시스템이 scene과 상호작용할 수 없음. 예를 들면, 아이패드에서 멀티태스킹 기능을 사용할 때 사용하지 않는 쪽은 보이지만 inactive 상태임. (scene은 foreground에 있음) background: 앱이 작동하고 있지만 사용자는 앱을 볼 수 없음. 앱이 꺼지기 직전에 Scene이 이 단계가 됨. scenePhase environment value를 사용해서 현재 scene의 상태를 알 수 있음. scene이 특정 상태가 됐을 때, 어떤 동작을 수행하도록 할 수 있음. (ex. 앱이 inactive 상태가 될 때 데이터를 저장하도록 함) Events and State 프로그램의 상태가 변할 때 뷰도 변하도록 하는 imperative 패턴과는 다르게, SwiftUI는 declarative 프로그래밍 패턴을 따름 SwiftUI의 뷰 바디에, 모든 상태에 대해 UI가 어떻게 나타날지 묘사함 프로그램이 실행되는 동안, 상태가 변함에 따라 변화되어야 하는 UI를 업데이트 함으로써 상태(state)와 UI가 서로 동기화되도록 함 사용자와의 상호작용이나, 알림 같은 event는 앱이 응답해야하는 상황을 만드는데, 이때 클로저가 이벤트의 응답으로써 실행됨. 이것이 Source of truth를 변경시킴 Source of truth에 일어난 변화를 감지하고, 이것을 뷰에 업데이트 하고 UI를 렌더링함 View life cycle events 뷰가 나타나더나 스크린에서 사라질 때, 앱의 상태를 변경시키려면 onAppear(perform:) / onDisappear(perform:) / task(priority:_:) modifier 를 사용 SwiftUI 기본 Structure var body: some View { } 는 Scene, View, App 프로토콜을 다르는 structure가 꼭 구햔헤야 하는 필수 computed property @main 으로 표시하여 App의 entry point를 정의할 수 있음. 앱에는 단 하나의 entry point만이 존재할 수 있음 아래 예시에서 WindowGroup은 첫번째 scene, Settings는 두번째 scene Settings scene은 거의 모든 mac앱에서 볼 수 있는 Settings 메뉴를 생성 Settings scene은 macOS 에서만 사용 가능 #if os(iOS) // iOS로 컴파일 될 코드 #elseif os(macOS) WindowGroup { AlternativeContentView() } Settings { SettingsView() } #endif #if os(iOS) 와 #elseif os(macOS), #endif는 platform conditional compilation block으로 Swift 컴파일러에게 특정 타겟 플랫폼에서만 조건문 안쪽의 코드를 컴파일 하도록 함 커스텀 뷰처럼 커스텀 Scene도 만들 수 있음 struct CustomScene: Scene { var body: some Scene { WindowGroup { // Scene 내용 } } } 코테 0단계 다이얼 백준 - 다이얼 더 간단하게 만들 방법을 찾기 // 소요 시간 35분 let inputStr = readLine()! var sum = 0 let arr = Array(inputStr) let two = [\"A\", \"B\", \"C\"] let three = [\"D\", \"E\", \"F\"] let four = [\"G\", \"H\", \"I\"] let five = [\"J\", \"K\", \"L\"] let six = [\"M\", \"N\", \"O\"] let seven = [\"P\", \"Q\", \"R\", \"S\"] let eight = [\"T\", \"U\", \"V\"] let nine = [\"W\", \"X\", \"Y\", \"Z\"] for i in arr { if two.contains(String(i)) { sum += 3 } else if three.contains(String(i)) { sum += 4 } else if four.contains(String(i)) { sum += 5 } else if five.contains(String(i)) { sum += 6 } else if six.contains(String(i)) { sum += 7 } else if seven.contains(String(i)) { sum += 8 } else if eight.contains(String(i)) { sum += 9 } else if nine.contains(String(i)) { sum += 10 } } print(sum) 문자열 다루기 func solution() -&gt; String { var str = \"aaa_bbb_ccc\" var separatorChar = \"_\" var strArr = str.split(separator: separatorChar) let capitalizedStrArr = strArr.map{$0.capitalized} let result = capitalizedStrArr.joined(separator:\"-\") return result // \"AaaBbbCcc\" }"
  },"/til/2023-04-29-VerticalTabView.html": {
    "title": "Vertical TabView in SwiftUI",
    "keywords": "TIL",
    "url": "/til/2023-04-29-VerticalTabView.html",
    "body": "import SwiftUI struct ContentView: View { var body: some View { GeometryReader { proxy in TabView { ForEach(0..&lt;3, id: \\.self) { i in Image(\"img_\\(i + 1)\") .resizable() .scaledToFill() .rotationEffect(.degrees(-90)) // 1 .frame( width: proxy.size.width, height: proxy.size.height ) // 2 } } .frame( width: proxy.size.height, // Height &amp; width swap height: proxy.size.width ) // 3 .rotationEffect(.degrees(90), anchor: .topLeading) // 4 .offset(x: proxy.size.width) // 5 .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never)) } } } 👉🏻 참고한 글 .tabViewStyle(PageTabViewStyle(indexDisplayMode: .never)) SwiftUI의 PageTabViewStyle은 기본적으로 수평으로 넘길 수 있는 paged scrolling 탭뷰입니다. 페이지를 넘기는 것과 같은 효과를 줄 수 있는데요. 위 코드와 같이, rotationEffect와 GeometryReader를 사용하여 수직으로 넘어가는 탭뷰를 만들 수 있습니다. // 1 : rotationEffect를 사용하여 왼쪽으로 90도 이미지를 로테이션 시켜줍니다. 현재 탭뷰 안의 이미지는 아래와 같이 살짝 커졌지만 가운데 정렬된 상태로 나타납니다. // 2: 이때 width / height는 누워있는 이미지와 같이 width가 더 큰 직사각형 형태로 존재합니다. // 3: 여기서 TabView의 frame을 정의하는데, height와 width를 바꿔줍니다. 그러면 width가 heigt보다 작은 세로로 기다란 모양의 직사각형 frame이 되겠죠? // 4 : anchor는 어느 꼭지점을 기준으로 로테이트 할 지 정할 때 사용하는데 .topLeading을 기준으로 90도 로테이트 했으므로 화면에는 이미지가 보여지지 않게 됩니다. 로테이트 하면서 화면 밖에 위치하게 되는데요. // 5 : 그래서 offset에 x 값을 현재 width만큼 주어서 오른쪽으로 이동시킵니다. 여기까지하면, 화면에 수직으로 이동하는 페이징 탭뷰가 맨 위에 있는 영상처럼 잘 나타나게 됩니다. 그런데 LazyVStack 안에 다른 뷰와 함께 탭뷰를 화면에 보이려고 하면 문제가 생기는데요. LazyVStack은 모든 아이템을 먼저 그리는게 아니라 필요할 때 아이템을 렌더링 하기 떄문에 기존의. VStack과는 다른 레이아웃 룰을 가지고 있습니다. 그래서 높이가 10 정도 되는 뷰만 그려주게 됩니다. 일단 VStack으로 교체하면 이 문제는 해결할 수 있습니다. UIKit 사용한 Horizontal paged tabView SwiftUI 프로젝트에 UIKit 뷰와 뷰 컨트롤러 사용하기 UIViewRepresentable / UIViewControllerRepresentable(프로토콜)을 채택하는 커스텀 타입을 생성 SwiftUI가 라이프 사이클과 업데이트를 관리하는 UIKit 타입을 생성하는 커스텀 타입 UIViewControllerRepresentable은 정의해야하는 두가지 요구사항이 있음 UIPageViewController를 리턴하는 makeUIViewController(context:_)를 구현 func makeUIViewController(context: Context) -&gt; UIPageViewController { let pageViewController = UIPageViewController( transitionStyle: .scroll, // .PageCurl 스타일도 있음 navigationOrientation: .horizontal) // .vertical도 있음 return pageViewController } UIPageViewController의 트랜지션 스타일과 .horizontal / .vertical 방식 중 하나를 설정하여 리턴 updateUIViewController(:context:) 메서드를 구현하여 setViewControllers(:direction:animated:) 메서드를 호출"
  },"/til/2023-04-24-CoreData.html": {
    "title": "Persisting Data",
    "keywords": "TIL",
    "url": "/til/2023-04-24-CoreData.html",
    "body": "💿 JSON 형태의 Open API를 이용해서 사용자 목록을 가져오고, 팔로우/언팔로우 정보를 추가해서 보여주는 개인 과제를 하고 있습니다. API를 통해 가져오는 정보에는 팔로우에 대한 속성이 없음 때문에, 데이터를 받는 클라이언트/프로바이더 단에서 팔로우/언팔로우에 대한 bool 값을 가지고 있지 않음 프로바이더를 통해 메인 뷰에서 데이터를 뿌려주는데 팔로우/언팔로우에 대한 정보가 없기 때문에 네비게이션 링크를 통해 가야하는 디테일 뷰에 팔로우/언팔로우에 대한 State 정보를 줄 수 없는 것이 문제.. UserDefaults에 사용자의 id를 키로 설정하고, 값에는 팔로우/언팔로우 정보를 bool 타입으로 저장함 디코딩하는 이니셜라이저에서 UserDefaluts에 저장되어 있는 bool 값도 함께 가져옴 SaveAction { } ㄲ"
  },"/til/2023-02-20-StanfordLecture.html": {
    "title": "Stanford Lectures",
    "keywords": "TIL",
    "url": "/til/2023-02-20-StanfordLecture.html",
    "body": "Stanford - Developing iOS 11 Apps with Swift 강의 내용 중 필요한 것 정리. Developing iOS 11 Apps with Swift 1 1. Introduction to iOS 11, Xcode 9 and Swift 4 🔗 the underscore operator (_) 함수의 internal / external names 부분에서 아래와 같이 언더바 ‘_’ 가 사용되는 경우는 argument가 없을 때 인데, 대부분 사용할 일이 없음. (항상 아규먼트 이름을 사용하는 것을 권장하기 때문에) 아래의 touchCard 함수는 Objective-C 부터 사용하던 함수이고, Objective-C는 internal/external name 개념이 없기 때문에 언더바가 사용됨. @IBAction func touchCard(_ sender: UIButton) { } didSet 카드를 뒤집어서 같은 두 개의 그림을 찾아 짝을 맞추는 게임앱. 카드를 뒤집을 때마다 아래와 같이 flipCount라는 변수에 1을 더함. var flipCount = 0 flipCount += 1 flipCountLabel 이라는 UILabel 타입의 변수가 있음. flipCount의 값이 변할때마다 flipCountLabel의 값도 변경되어야 함. flipCountLabel.text = \"Flips: \\(flipCount)\" 위의 코드를 변경되어야 하는 부분마다 반복적으로 입력한다면 같은 내용의 코드를 반복해서 여러번 작성하게 됨. 좀 더 효과적으로 코드를 작성하기 위하여 didSet을 사용할 수 있음 var flipCount = 0 { didSet { flipCountLabel.text = \"Flip s: \\(flipCount)\" } } didSet은 property obeserver인데 flipCount라는 프로퍼티의 값을 관찰하고 있다가 그것이 변경될 때마다 disSet 안의 코드를 실행함. 2. MVC 🔗 API class를 만들 때 public API에 대해 생각해보기. API는 클래스에 속한 메서드, instance variables의 리스트. public API는 다른 클래스들이 호출할 수 있도록 허용된 메서드, instance variables. 앱이 동작하는 방식에 있어 가장 기본적이고 중요한 정보가 무엇인지 알아야, 사람들이 이 앱을 어떻게 사용할지 알아야 클래스의 메서드와 instance variables를 작성할 수 있기 때문에 클래스를 작성하기 전에 API에 대해 생각해 보는 것을 추천"
  },"/til/2023-01-17-Quake.html": {
    "title": "앱 Earthquakes 튜토리얼을 따라가며 정리",
    "keywords": "TIL",
    "url": "/til/2023-01-17-Quake.html",
    "body": "Earthquakes app tutorial 이 글은 위의 apple developer tutorial을 따라가며 정리한 내용입니다. Error /decoding-structured-json/Decode earthquake data/step 8 Swift에서는 Error 프로토콜을 따르는 타입을 사용하여 에러를 나타냅니다. Error 프로토콜은 에러를 핸들링하기 위해 사용되는 타입이라는 것을 나타낼 뿐 아무런 내용이 없습니다. 요구사항도 없습니다. 그래서 커스텀 타입에 자유롭게 사용할 수 있습니다. enum QuakeError: Error { case missingData } extension QuakeError: LocalizedError { var errorDescription: String? { switch self { case .missingData: return NSLocalizedString(\"Found and will discard a quake missing a valid code, magnitude, place, or time.\", comment: \"\") } } } 위 QuakeError enumeration은 case missingData를 가지는데 LocalizedError 프로토콜을 따르는 extension을 작성하여, QuakeError.missingData로 에러가 던져질 경우 “code, maginitude, place, time 중 없는 데이터가 있어 정상적으로 코드가 작동하지 않았다.”는 메세지를 표출할 것입니다. // Quake struct라는 설계도를 사용하여 디코딩하는 인스턴스를 생성하기 위해 from decoder:_를 인자로 가지는 init 사용 // throws function, try, try?를 사용하여 디코딩 과정 중 에러 발생 시 nil을 반환하도록 처리함 init(from decoder: Decoder) throws { let values = try decoder.container(keyedBy: CodingKeys.self) let rawMagnitude = try? values.decode(Double.self, forKey: .magitude) let rawPlace = try? values.decode(String.self, forKey: .place) let rawTime = try? values.decode(Date.self, forKey: .time) let rawCode = try? values.decode(String.self, forKey: .code) let rawDetail = try? values.decode(URL.self, forKey: .detail) // try? 가 사용된 곳에서 에러가 발생하지 않으면 옵셔널 값이 반환되므로 해당 값을 unwrapping 함 guard let magnitude = rawMagnitude, let place = rawPlace, let time = rawTime, let code = rawCode, let detail = rawDetail else { throw QuakeError.missingData } 위 예시의 가장 아래쪽에 있는 else 구문에서 throw 키워드를 사용하여 에러를 던졌습니다. magnitude, place, time, code, detail 중 데이터가 없는 것이 있을 때 QuakeError.missingData 에러가 던져집니다. Experiment /decoding-structured-json/Decoding structured JSON/test the decoder 쓰나미 경보를 푸시 알림으로 보내려 하는 상황 튜토리얼 내용을 참고하여 쓰나미 관련 데이터를 디코딩해보기 USGS 사이트에서 쓰나미의 데이터 타입을 찾음 -&gt; Integer Quake 스트럭처에 tsunami 프로퍼티 추가 struct Quake: Identifiable { let magnitude: Double let place: String let time: Date let code: String let detail: URL let tsunami: Int } 키 값으로 사용되는 CodingKeys enum에 tsunami일 경우를 추가 private enum CodingKeys: String, CodingKey { case magnitude = \"mag\" case place case time case code case detail case tsunami } 생성자에 필요한 코드 추가 init(from decoder: Decoder) throws { let values = try decoder.container(keyedBy: CodingKeys.self) let rawMagnitude = try? values.decode(Double.self, forKey: .magitude) let rawPlace = try? values.decode(String.self, forKey: .place) let rawTime = try? values.decode(Date.self, forKey: .time) let rawCode = try? values.decode(String.self, forKey: .code) let rawDetail = try? values.decode(URL.self, forKey: .detail) let rawTsunami = try? values.decode(Int.self, forKey: .tsunami) // try? 가 사용된 곳에서 에러가 발생하지 않으면 옵셔널 값이 반환되므로 해당 값을 unwrapping 함 guard let magnitude = rawMagnitude, let place = rawPlace, let time = rawTime, let code = rawCode, let detail = rawDetail, let tsunami = rawTsunami else { throw QuakeError.missingData } self.magnitude = magnitude self.place = place self.time = time self.code = code self.detail = detail self.tsunami = tsunami } 현재 테스트 데이터의 값인 0과 같은지 테스트를 통해 확인 import XCTest @testable import FollwingEarthquake class FollwingEarthquakeTests: XCTestCase { func testGeoJSONDecoderDecodesQuake() throws { let decoder = JSONDecoder() decoder.dateDecodingStrategy = .millisecondsSince1970 let quake = try decoder.decode(Quake.self, from: testFeature_nc73649170) XCTAssertEqual(quake.code, \"73649170\") let expectedSeconds = TimeInterval(1636129710550) / 1000 let decodedSeconds = quake.time.timeIntervalSince1970 XCTAssertEqual(expectedSeconds, decodedSeconds, accuracy: 0.00001) XCTAssertEqual(quake.tsunami, 0) // 테스트 통과 } } private(set) struct GeoJSON { private(set) var quakes:[Quake] = [] } private(set) modifier가 사용된 배열 quakes는 GeoJSON 스트럭쳐 안에있는 코드에서만 수정 가능합니다. GeoJSON 스트럭처 바깥에서 작성된 코드에서는 quakes의 값을 읽는 것만 가능합니다. structuredJSON USGS의 지진 정보는 structuredJSON 형태로 제공됩니다. 필요한 정보인 latitude / longitude를 얻기 위해 각 structure를 정의합니다. Products 타입을 사용하여 RootProperties 타입 안에 products를 정의하고 Origin 타입을 사용하여 Products 타입 안에 origin 을 정의하는 것과 같은 방법으로 이미지 속 GeoJSON 계층을 모델링합니다. var latitude: Double { properties.products.origin.first!.properties.latitude } var longitude: Double { properties.products.origin.first!.properties.longitude } 모델링한 스트럭처를 이용하여 위와 같이 latitude, longitude 정보를 계산합니다. 루트 프로퍼티로부터 한 계층씩 내려가며 최종적으로 latitude와 longitude를 계산하는 방식이 인상깊었습니다. CodingKey enum private enum CodingKeys: String, CodingKey { case magnitude = \"mag\" case place case time case code case detail case tsunami } 위 예시의 nested coding keys enumeration은 case magnitude = “mag” 값을 가지고 있습니다. place, time, code, detail, tsunami는 GeoJSON 객체에서 같은 이름을 키값으로 사용하고 있고, magnitude는 GeoJSON 객체에서 “mag”를 키값으로 가집니다. init(from decoder: Decoder) throws { let values = try decoder.container(keyedBy: CodingKeys.self) let rawMagnitude = try? values.decode(Double.self, forKey: .magnitude) let rawPlace = try? values.decode(String.self, forKey: .place) let rawTime = try? values.decode(Date.self, forKey: .time) let rawCode = try? values.decode(String.self, forKey: .code) let rawDetail = try? values.decode(URL.self, forKey: .detail) let rawTsunami = try? values.decode(Int.self, forKey: .tsunami) ... } 디코딩하는 생성자 함수에서 magnitude를 키값으로 사용한 것을 확인할 수 있습니다. CodingKeys enum의 케이스 이름은 Quake struct의 프로퍼티를 나타냅니다. JSON 객체의 키 값과 이름이 같은 경우는 case 이름만 작성 / 다른 경우는 case magnitude = “mag”와 같이 작성합니다. Existential Types Building a network test client 원래 앱에서는 remote network server에서 데이터를 가져옴 테스트를 위해서 데이터를 가져오는 두번째 경우가 있음 Data Downloader를 각각 다른 것을 사용할 것인데 두 다운로더를 완전히 따로 작성하는 것이 아니라 existential type을 사용하여 작성한 하나의 다운로더를 사용할 것임. Existentnial type은 any 키워드를 앞에 붙여 사용할 수 있음 lazy는 let과 함께 사용할 수 없음. var와 함께 사용. import Foundation class QuakeClient { private let feedURL = URL(string: \"https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/all_day.geojson\")! //computed porperty의 타입이 있고 milliseconds로 변경하기 위해 이렇게 사용한건가? //date decoding strategy를 변경하기 위해서 anonymous 클로저를 사용해서 init 함 private lazy var decoder: JSONDecoder = { let aDecoder = JSONDecoder() aDecoder.dateDecodingStrategy = .millisecondsSince1970 return aDecoder }() //feedURL은 리터럴 스트링 값을 가지고 있고, decoder는 클로저를 사용하여 이니셜라이징함 //downloader 이니셜라이징하여 값 설정 //Existential value가 사용되는 부분 private let downloader: any HTTPDataDownloader //이니셜라이징 중 파라미터로 통과된 downloader(HTTPDataDownloader 프로토콜을 따르는 any type)가 //QuakeClient의 downloader로 사용됨 init(downloader: any HTTPDataDownloader) { self.downloader = downloader } } quakes 배열을 비동기식으로 가져오고, 가져오는 과정에서 에러가 있을 수 있기 때문에 async, throws 키워드를 사용. property에 async와 throws를 사용하려면 get syntax를 사용해야 함 var quakes: [Quake] { get async throws{ //data를 서버로부터 다운로드 let data = try await downloader.httpData(from: feedURL) //다운로드한 데이터를 디코딩 let allQuakes = try decoder.decode(GeoJSON.self, from: data) //GeoJSON 스트럭처 안에 지진 정보를 배열 형태로 담는 quakes return allQuakes.quakes } } URL 사용하여 데이터 가져오기 URLSession의 인스턴스 메서드인 data를 사용하여 데이터를 가져오려고 함 커스텀 프로토콜인 HTTPDataDownloader를 생성 protocol HTTPDataDownloader { func httpData(from: URL) async throws -&gt; Data } URLSession에 extension을 작성하여 위 커스텀 프로토콜을 따르도록 함 httpData(from:_) 함수의 바디 부분에 인스턴스 메서드 data를 사용하여 data를 가져옴 Preview Content 폴더로 test data 파일을 옮기면 SwiftUI 프리뷰와 유닛 테스트 둘 다에서 데이터를 사용할 수 있음 Add the map view MapKit 프레임워크를 사용하여 지진이 발생한 곳을 지도로 보여주려고 함. import MapKit // 1 struct QuakeDetailMap: View { @State private var region = MKCoordinateRegion() // 2 var body: some View { Map(coordinateRegion: $region) // 3 .onAppear { // 4 withAnimation { region.center = CLLocationCoordinate2D(latitude: -30.0, longitude: 130.0) region.span = MKCoordinateSpan(latitudeDelta: 50, longitudeDelta: 70) } } } } 맵킷 프레임워크 추가 맵이 보여줄 지역을 담은 state property 바디 프로퍼티 부분에 맵뷰를 추가하여 뷰에 지도 뿌리기 onAppear{} 사용하여 맵뷰가 열릴 때 특정 지역이 보이도록 함. 프리뷰에서 핀치 제스처 하는 방법 - 마우스 클릭하고 옵션 키 누르기 디테일에 추가할 맵뷰를 파일로 따로 생성한 경우, 디테일 뷰의 프리뷰에서 맵뷰를 확인할 수 있게 되면 프리뷰 자체를 삭제해도 됨. (그동안은 프리뷰 부분을 유지해야겠다고만 생각해서 추가 작업이 필요했음) region.center = CLLocationCoordinate2D(latitude: 35.0, longitude: 127.0) 값을 수정하여 한국이 나타나도록 해봄 Managing structured concurrency Fetching multiple URLs 현재 Earthquakes 앱의 클라이언트는 지진의 정보 목록을 가져오기 위해서 하나의 요청을 보내고 있음. 이제 클라이언트가 concurrency 기능을 사용하여 여러개의 요청을 동시에 보내도록 수정하려고 함. 비동기 함수와 프로퍼티를 사용해서 네트워크 요청에 대한 값을 가져오는 작업이 실행되는 동안 잠깐 해당 부분에 실행을 멈춤. 그동안 다른 작업이 진행됨."
  },"/til/2022-08-14-myBoxes.html": {
    "title": "My Box",
    "keywords": "TIL",
    "url": "/til/2022-08-14-myBoxes.html",
    "body": "My Box - SwiftUI 프로젝트 ~9/15 📌 진행사항 보관함 목록 아이템 목록 보관함 편집 화면 ~9/19 📋 메모 Edit 뷰를 만들기 전에 타입 Box 안에 nested 형태로 Data라는 타입을 생성했다. 타입 Data는 왜 필요했을까? Data에는 Box의 속성 중, 편집 가능하도록 할 속성을 담는다. 사용자가 편집한 내용을 Data의 각 속성에 담는다. 변경사항이 저장되는게 확실해지면 (‘확인’ 또는 ‘Done’ 버튼을 눌렀을 때…) Data에 담긴 내용을 Box에 업데이트한다. ~9/25 📌 진행사항 Done 버튼을 누르면 편집 화면 사라짐 Box.Data() 인스턴스에 저장된 데이터를 Box 인스턴스에 업데이트하는 함수 실행 ToolbarItem(placement: .confirmationAction) { Button(\"Done\") { isPresentingEditView = false box.update(from: data) } } ~10/2 📌 진행사항 State 와 binding을 사용하여 데이터가 뷰 사이에서 전달되도록 했지만, 앱을 종료했다 다시 시작하면 모든 데이터가 날라간다. 데이터를 저장하고 가져오는 메서드를 작성해야 한다. 데이터를 file/Document에 저장하고 가져오는 함수를 따로 작성하고 앱이 열릴 때 데이터를 가져오는 함수 적용 중 @Environment 속성에 scenePhase 값을 설정하여 앱이 inactive한 상태로 바뀔 때 사용자가 입력한 데이터를 저장하도록 함. 이제 앱을 종료하고 다시 열어도 그대로 데이터가 저장되어 있는 상태가 되었다. 보관함 리스트를 삭제하는 기능 추가 완료 보관함에 pin 심볼을 다른 것으로 변경하기 기존에 임의로 설정해두었던 배경/글자색을 주석처리하여 기본색으로 설정 태그 심볼 제거 ~10/6 📌 진행사항 데이터가 잘 입력되는지 테스트 해봤는데 생각 못한 문제가 있었다. 한번에 많은 데이터를 입력면 목록이 키보드 뒤로 숨는다.. 흠.. 위 목록을 스크롤로 올릴 수 있어서 사용에는 문제가 없지만 좀 더 나은 사용자 경험을 위해서 후에 수정할 목록에 추가! 기능을 좀 더 추가해야 할 것 같아서 목록에 별모양을 추가하는 중.. ‘좋아요’ 버튼 같은 느낌으로! ~10/8 📌 진행사항 튜토리얼을 보고 리스트를 필터링하는 computed property를 바디 바깥 부분에 작성했는데 그럼 바인딩을 사용할 수 없어서 바디 안쪽으로 재작성했다. ‘좋아요’(?) / Favorite 을 표시할 수 있는 기능을 추가해보고 있다. Favorite인지 아닌지 정보를 담을 Bool 타입 속성을 모델 스트럭처에 추가하고 그 속성의 값이 true일 때만 노란색 별이 나타나도록 해주었다. 샘플 데이터 값에 true/false를 입력하여 별이 잘 나타는지 확인했다. 토글을 만들어 On 상태일 때는 favorite 표시가 된 것만 나타나도록 했다. ~10/17 📌 진행사항 등록한 모든 아이템을 검색하는 기능을 구현하려고 찾아보니 크게 UIKit 을 사용하는 방법과 SwifUI를 사용하는 방법 두 가지가 있었다. 먼저 SwiftUI의 searchable modifier 사용해보기로 했다. 검색 바를 구현하는건 코드 세 줄만 추가하면 되어서 금방했는데 그 후에 과정에서 시간이 좀 들고 있다. (Overlay를 사용해서 검색된 값들과 검색창만 화면에 보여주려고 하는데 Overlay를 어디다가 붙여야 할 지 모르겠음.) 내일까지 구현해보고 안되면 UIKit으로 해봐야겠다. ~10/18 📌 진행사항 어제 searchable 을 사용하여 검색 텍스트 필드 UI를 생성했다. 사용자가 입력을 시작하면 현재 박스 목록 화면을 완전히 가리는 새로운 뷰가 나타나고, 그 뷰에 검색어가 들어간 아이템들이 쭉 나왔으면 좋겠다. 일단 영상에서 보이듯이 검색어를 입력했을 때 현재 목록위로 overlay가 된 투명한(?) 뷰에 입력한 값이 전달되는 것까지 구현하였다. 이제 그 화면에 검색어로 필터링된 아이템 리스트를 뽑아내면 될 것 같다. ~10/19 📌 진행사항 전체 앱을 통하는 데이터 흐름을 변경했다. 전체 아이템 목록의 이름(itemName)을 기준으로 키워드와 일치하는 아이템 목록을 만들어서 뿌러주려고 했는데.. 오늘은 실패! 오류는 어떻게든 해결을 해봤는데 키워드를 입력하자 흰 화면이 나타난다. 내일 다시 도전해보겠어….! var filteredList: [Box.Item] { if !searchText.isEmpty{ return items } else { return items.filter { $0.itemName.localizedCaseInsensitiveContains(searchText) } } } ~10/20 📌 진행사항 localizedCaseInsensitiveContains(_:) 메서드를 사용해서 대소문자에 상관없이 검색 키워드를 포함한 아이템들의 목록을 만드려고 했는데 처음에 자꾸 오류가 났다. 알고보니 searchText 자리에 값이 nil이면 안되는데 if !searchText.isEmpty처리를 해주지 않았던게 원인이었다. 비어있을 때는 키워드로 필터링되지 않은 전체 아이템이 나타나도록 if문을 작성해 주었다. 이제 검색어를 입력하면 리스트 화면이 나타나긴하지만 키워드와는 관계없이 첫번째 박스에 담긴 아이템이 나타나고, search bar도 사라진다. 해결하자! ~10/21 📌 진행사항 전체 아이템을 가진 리스트를 search bar에 입력된 키워드를 가진 아이템들을 가진 리스트로 필터링 하려고 했는데, 전체 아이템을 잘못 작성한 것 같다. 전체 아이템을 가진 리스트를 먼저 정상적으로 뽑아보기 Type ‘() -&gt; ()’ cannot conform to ‘ShapeStyle… ~10/22 📌 진행사항 위와 같은 에러가 발생해서 해결해 보는 중.. 해결! 검색 기능을 구현하면서 searchbar에 텍스트가 입력되고 검색 중일 때 overlay 를 사용해서 해당 텍스트를 포함한 아이템 리스트가 전체 화면을 가리도록 구현했다. 이 과정에서 사용된 .overlay modifier가 문제였다. .overlay { } / .overlay( ) 이렇게 두 개의 형태로 사용되는데 { }를 가진 overlay의 경우 해당 컨텐츠가 ShapeStyle 프로토콜을 따라야해서 발생한 오류였다. ()를 가진 overlay의 경우 어떤 프로토콜도 따르고 있지 않아서 { }를 ( )로 변경해주었더니 에러가 사라졌다. ~10/23 📌 진행사항 드디어 됐다! 각 박스들의 목록이 있는 메인 화면에서 검색어를 입력하면 그 검색어를 포함한 아이템들만 화면에 보여주는 것 성공! 일주일동안 성공하지 못했던 요인 스스로 생각하며 분석해보는 시간이 부족했다. searchable 을 사용하여 검색 기능을 구현하는 방법을 엄청 검색했다. 지금 돌이켜 생각해보면 정말 ‘검색만’ 했다. 여러가지 인스턴스 메서드를 사용해보고 사람들이 사용한 여러가지 방법을 적용해봤는데, 안되는 이유는 아이템 전체 목록을 잘못 설정한 것이었다. 아이템의 전체 목록 부터 잘못 불러오고 있었으니 아무리 필터링을 하려고 해도 필터링이 제대로 되지 않았던 것이다. 전체 아이템 리스트를 불러올 방식은 아주 간단한데 그것부터 제대로 하지 않아 며칠을 다른곳에서 이유를 찾으며 시간을 보냈다. 검색 기능 구현이 안되는 이유들을 찾으며 소스를 다시 보니 모호하게 아는 부분이 많다는 것을 꺠달았다. ~10/25 📌 진행사항 검색된 아이템을 누르면 아이템 하나의 디테일 뷰로 이동하는 것을 구현해보려고 하는데 item 모델에 id와 itemName 속성 딱 두가지만 정의를 해두어서 디테일 뷰에 여러가지 속성들을 나타내려면 모델에 속성을 추가해야 할 것 같다. ~10/28 📌 진행사항 Navigation Link를 사용하여 아이템을 눌렀을 때 다른 View로 이동하도록 해보고 있다. 일단 해당 아이템이 속하는 박스 뷰로 이동하도록 수정해 보았다. 각 아이템의 개인 속성은 필요할 것 같으면서도 복잡해지는 것 아닐까 하는 생각이 든다. 아이템 이름이 아닌 따로 저장한 키워드를 이용한 검색 기능은 넣어으면 좋겠어서 그 부분에 대해 생각해 봐야겠다. ~10/31 📌 진행사항 10월의 마지막 날! 박스 뷰에서 별 모양을 누르면 메인 리스트에서 노란색 별이 표출되고 이 별 표시가 있는 목록만 볼 수 있는 토글 버튼이 있는데 “Favorites Only”라는 글씨 대신 별을 추가해주고 버튼 가까이로 위치를 이동시켰다. 박스의 별은 왼쪽 정렬해주어 표시가 되지 않은 상자들과 좀 더 눈에 띄게 달라보이도록 하였다. 12/01 📌 진행사항 12월이 시작되었고 여전히 회사는 바쁘고 개인적으로도 할 일이 많지만, 이 프로젝트를 꼭 앱 스토어에 올리겠다는 마음으로 다시 시작! 먼저 각 아이템의 상세 정보를 담는 뷰를 연결해 봐야겠다. 1번 보관함을 생성한 뒤 다시 새 보관함을 생성할 때, 1번 보관함에 정보가 텍스트 필드에 그대로 나타나서 수정 완료 처음 보관함 등록할 때 별 표시 되어서 저장되는 것 수정 완료 -&gt; 추가하는 뷰에서 일시적으로 데이터를 저장하는 Data()에 별 표시(좋아요 표시) 속성인 isFavorite의 기본값이 true로 되어있던 것을 false로 변경해줌. ~12/11 📌 진행사항 리스트 안에서 아이템의 위치를 변경할 수 있도록 수정 .onMove modifier를 사용해서 간단하게 아이템을 이동시키는 기능을 구현할 수 있었다. .onMove는 ForEach로 생성되는 리스트처럼 ‘동적 리스트’에만 사용할 수 있다. List로 만들어진 리스트는 정적 리스트이기 때문에 사용할 수 없다. 나는 ForEach를 통해 리스트를 만들고 있기 때문에 사용할 수 있었다. .onMove는 두 개의 패러미터를 가진다. indexSet과 Int형의 패러미터(위 이미지에서는 index)이다. .onMove { (IndexSet, index) in box.items.move(fromOffsets: IndexSet, toOffset: index) } .environment(\\.editMode, Binding.constant(EditMode.active)) 기본적으로 .onMove modifier는 edit 버튼을 생성하고 이 edit 버튼을 눌러야 리스트를 옮길 수 있도록 하는 기능이 활성화되는데 나는 이미 Edit 버튼을 사용하여 모달뷰를 띄우고 있기 때문에 리스트에서 이 기능을 확인할 수 없었다. edit 버튼을 누르면 editing 중인 상태로 전환되고, 이 상태에서 아이템의 순서를 변경하는 기능이 활성화되므로 항상 editing 중인 상태로 변경하여 해결하였다. 수정 필요 키보드에 가려져 작성중인 아이템이 보이지 않는 부분"
  },"/jekyll/2022-06-30-tips_warnings_dangers.html": {
    "title": "Tips, Warnings, and Dangers",
    "keywords": "Jekyll",
    "url": "/jekyll/2022-06-30-tips_warnings_dangers.html",
    "body": "The jekyll-theme supports tips, warnings, and dangers blocks and the style is referred from the discord.js website. You could have the following markdown attributes (supported by kramdown): Tips Using a {: .block-tip} attribute: &gt; ##### TIP &gt; &gt; This guide is last tested with @napi-rs/canvas^0.1.20, so make sure you have &gt; this or a similar version after installation. {: .block-tip } TIP This guide is last tested with @napi-rs/canvas^0.1.20, so make sure you have this or a similar version after installation. Warnings Using a {: .block-warning} attribute: &gt; ##### WARNING &gt; &gt; Be sure that you're familiar with things like async/await and object destructuring &gt; before continuing, as we'll be making use of features like these. {: .block-warning } WARNING Be sure that you’re familiar with things like async/await and object destructuring before continuing, as we’ll be making use of features like these. Dangers Using a {: .block-danger} attribute: &gt; ##### DANGER &gt; &gt; You cannot delete an ephemeral message. {: .block-danger } DANGER You cannot delete an ephemeral message."
  },"/jekyll/2022-06-26-wide_tables.html": {
    "title": "Wide tables",
    "keywords": "Jekyll",
    "url": "/jekyll/2022-06-26-wide_tables.html",
    "body": "A wide tables needs to be wrapped into a div with class table-wrapper to make sure it displayed as expected on mobile devices. For example, &lt;div class=\"table-wrapper\" markdown=\"block\"&gt; |title1|title2|title3|title4|title5|title6|title7|title8| |:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:| |1|2|3|4|5|6|7|8| |1|2|3|4|5|6|7|8| |1|2|3|4|5|6|7|8| |1|2|3|4|5|6|7|8| &lt;/div&gt; Will be rendered as title1 title2 title3 title4 title5 title6 title7 title8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8 1 2 3 4 5 6 7 8"
  },"/jekyll/2022-05-24-page_cover.html": {
    "title": "Page with cover image",
    "keywords": "Jekyll",
    "url": "/jekyll/2022-05-24-page_cover.html",
    "body": "The jekyll-gitbook theme supports adding a cover image to a specific page by adding a cover field to the page metadata: --- title: Page with cover image author: Tao He date: 2022-05-24 category: Jekyll layout: post + cover: /assets/jekyll-gitbook/dinosaur.gif ---"
  }}
