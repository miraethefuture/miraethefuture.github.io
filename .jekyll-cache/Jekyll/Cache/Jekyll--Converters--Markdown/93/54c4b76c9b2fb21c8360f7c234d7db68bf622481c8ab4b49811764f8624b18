I"7u<p><a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html">📂 Language Guide / Generics</a>
<br /><sub>아래 모든 정보의 출처는 apple developer 공식 페이지이며 개인의 학습 용도로만 사용되었음을 밝힙니다.</sub></p>

<h1 id="️">☑️</h1>

<p><em>Generic code</em>는 다루기 쉽고 재사용 가능한 functions와 types를 작성할 수 있도록 합니다. 명확하고 추상화된 방식으로 의도를 분명히하는 코드를 작성할 수 있습니다.</p>

<p>Generics는 Swift의 가장 강력한 기능 중 하나입니다. 많은 Swift의 기본 라이브러리들이 generic code로 만들어졌습니다. Swift의 Array와 Dictionary types는 둘 다 generic collections입니다. Int 값을 담고 있는 배열을 생성할 수 있고, 또는 String 값을 담고 있는 배열을 생성할 수 있습니다. 또는 Swift에서 생성될 수 있는 모든 type으로 배열을 생성할 수 있습니다. Dictionary도 마찬가지입니다. 어떤 타입이 사용될 수 있을지에 대한 제한이 없습니다.</p>

<h2 id="the-problem-that-generics-solve">The Problem That Generics Solve</h2>

<p>아래는 swapTwoInts(_:_:)라는 standard, nongeneric function입니다. 두개의 Int값을 서로 바꾸는 기능을 합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="nf">swapTwoInts</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">temporaryA</span> <span class="o">=</span> <span class="n">a</span>
      <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
      <span class="n">b</span> <span class="o">=</span> <span class="n">temporaryA</span>
  <span class="p">}</span>
</code></pre></div></div>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">someInt</span> <span class="o">=</span> <span class="mi">3</span>
  <span class="k">var</span> <span class="nv">anotherInt</span> <span class="o">=</span> <span class="mi">107</span>
  <span class="nf">swapTwoInts</span><span class="p">(</span><span class="o">&amp;</span><span class="n">someInt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">anotherInt</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"someInt is now </span><span class="se">\(</span><span class="n">someInt</span><span class="se">)</span><span class="s">, and anotherInt is now </span><span class="se">\(</span><span class="n">anotherInt</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="c1">// "someInt is now 107, and anotherInt is now 3"를 출력</span>
</code></pre></div></div>

<p>swapTwoInts(_:_:) function은 유용하게 사용될 수 있지만, Int 값만을 사용할 수 있습니다. 만약 두개의 문자열 값을 교환하고 싶다면, 또는 두개의 Double 값을 교환하고 싶다면 아래와 같은 functions를 더 작성해야 합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="nf">swapTwoStrings</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">String</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">temporaryA</span> <span class="o">=</span> <span class="n">a</span>
      <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
      <span class="n">b</span> <span class="o">=</span> <span class="n">temporaryA</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">swapTwoDoubles</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">Double</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">temporaryA</span> <span class="o">=</span> <span class="n">a</span>
      <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
      <span class="n">b</span> <span class="o">=</span> <span class="n">temporaryA</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>function의 바디부분은 같습니다. 다른 점은 function이 받아들이는 값의 타입이 다르다는 것입니다.</p>

<p>두개의 값이 어떤 타입이든 교환할 수 있는 하나의 function을 작성하는 것이 훨씬 더 유용할 것 입니다. <strong>Generic code</strong>는 그런 종류의 function을 작성할 수 있도록 합니다.</p>

<div class="notice">
     <h4>N O T E</h4>
     <p>위 세개의 function 모두에서, 만약 a와 b의 타입이 다르다면 값을 교환할 수 없습니다. Swift는 type-safe 언어이기 때문에 다른 타입의 변수가 서로 값을 교환하는 것이 불가능합니다. 만약 이런 시도가 있다면 compile-time 에러를 발생시킵니다. </p>
  </div>

<h2 id="generic-functions">Generic Functions</h2>

<p>Generic function은 어떤 타입과도 함께 작동될 수 있습니다. 아래는 generic function 버전의 swapTwoInts(_:_:) function 입니다. 이름은 swapTwoValues(_:_:)입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="n">swapTwoValues</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">T</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">T</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">temporaryA</span> <span class="o">=</span> <span class="n">a</span>
      <span class="n">a</span> <span class="o">=</span> <span class="n">b</span>
      <span class="n">b</span> <span class="o">=</span> <span class="n">temporaryA</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>swapTwoValues function의 바디 부분은 swapTwoInts function의 바디부분과 동일합니다. swapTwoValues function의 첫번째 줄이 조금 다릅니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="nf">swapTwoInts</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="kt">Int</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span>
  <span class="kd">func</span> <span class="n">swapTwoValues</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_</span> <span class="nv">a</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">T</span><span class="p">,</span> <span class="n">_</span> <span class="nv">b</span><span class="p">:</span> <span class="k">inout</span> <span class="kt">T</span><span class="p">)</span>
</code></pre></div></div>

<p>Generic 버전의 function은 placeholder type name (위의 예에서는 T)을 사용합니다. 이 placeholder type name은 T가 무엇이 되어야 하는지에 대해서는 알려주지 않습니다. 하지만 T가 어떤 타입이던 a와 b가 같은 타입이 되어야 한다는 것을 알려줍니다. 실제 사용되는 타입은 이 function이 호출될 때마다 정해집니다.</p>

<p>Generic function과 nongeneric function의 또 다른 차이점은 generic function의 이름뒤에는 placeholder type이 &lt;&gt;(angle brackets)사이에 온다는 것입니다. &lt;&gt;는 Swift에게 placeholder type name이 무엇인지 알려줍니다.</p>

<p>swapTwoInts를 호출했던 방식처럼 swapTwoValues를 호출할 수 있습니다. 하지만 어떤 타입의 값이든 통과시킬 수 있게 되었습니다. (두 개의 값이 서로 같은 타입을 가지고 있을 때) 통과된 값의 타입에 따라 T의 타입이 추측됩니다.</p>

<p>아래 두가지 예시에서 T는 각각 Int와 String타입으로 추측되었습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">someInt</span> <span class="o">=</span> <span class="mi">3</span>
  <span class="k">var</span> <span class="nv">anotherInt</span> <span class="o">=</span> <span class="mi">107</span>
  <span class="nf">swapTwoValues</span><span class="p">(</span><span class="o">&amp;</span><span class="n">someInt</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">anotherInt</span><span class="p">)</span>
  <span class="c1">// someInt는 107, anotherInt는 3이 됩니다.</span>

  <span class="k">var</span> <span class="nv">someString</span> <span class="o">=</span> <span class="s">"hello"</span>
  <span class="k">var</span> <span class="nv">anotherString</span> <span class="o">=</span> <span class="s">"world"</span>
  <span class="nf">swapTwoValues</span><span class="p">(</span><span class="o">&amp;</span><span class="n">someString</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">anotherString</span><span class="p">)</span>
  <span class="c1">// someString은 "world", anotherString은 "hello"가 됩니다.</span>
</code></pre></div></div>

<div class="notice">
     <h4>N O T E</h4>
     <p>지금까지 사용한 swapTwoValues function은 Swift의 standard library에 있는 swap이라는 generic function에서 아이디어를 얻어 만들어졌습니다. 만약 위와 같은 function을 사용하고 싶다면 swap(_:\_:)를 사용할 수 있습니다.</p>
  </div>

<h2 id="type-parameters">Type Parameters</h2>

<p>위의 예시에서 사용한 swapTwoValues(_:_:)의 placeholder type T는 type parameter의 한 예입니다. Type parameter는 placeholder type의 이름을 명시합니다. function의 이름 뒤에 바로 작성됩니다. &lt;&gt; brackets를 사용하여 작성합니다.</p>

<p>Type parameter를 명시하면, 그 이름을 function의 패러미터 타입 또는 리턴 타입으로 사용할 수 있고 function의 바디 부분에서 type annotation으로 사용할 수 있습니다. Function을 호출할 때 type parameter는 실제 사용되는 타입으로 교환됩니다.</p>

<p>&lt; &gt; 사이에 ,로 구분하여 여러개의 typ parameters name을 작성할 수 있습니다.</p>

<h2 id="naming-type-parameters">Naming Type Parameters</h2>

<p>많은 경우에, type parameters의 이름은 function 또는 generic type과 type parameter의 관계에 근거하여 짓습니다. (Dictionary&lt;key, Value&gt;나 Array<Element> 처럼)  
  하지만 만약 특별한 관계를 가지고 있지 않다면 주로 T, U, V와 같은 알파벳 하나를 이름으로 사용합니다.</Element></p>

<div class="notice">
     <h4>N O T E</h4>
     <p>Type parameters의 이름을 지을때는 T, MyTypeParameter와 같이 대문자 카멜케이스를 이용하여 해당 placeholder가 값이 아니라 type을 위한 것이라고 알려줍니다.</p>
  </div>

<h2 id="generic-types">Generic Types</h2>

<p>Swift에서는 우리만의 generic types를 정의할 수 있습니다. 이것은 Array, Dictionary와 비슷하게 어떤 타입과도 함께 작동될 수 있는 custom classes, structures, enumerations입니다.</p>

<p>이 섹션에서는 Stack이라는 generic collection type을 작성하는 방법에 대해 알아봅니다. Stack은 array와 비슷한, 순서가 있는 값의 집합입니다. 하지만 Swift의 Array type보다 좀 더 엄격한 작동 구조를 가지고 있습니다. Array는 배열 속 어디에서든 요소를 추가하거나 삭제할 수 있습니다. 하지만 stack에서는 collection의 가장 끝부분에서만 추가, 삭제할 수 있습니다.</p>

<div class="notice">
     <h4>N O T E</h4>
     <p>Stack이라는 컨셉은 UINavigationController 클래스로부터 사용됩니다. 클래스의 navigation hierarchy안에서 view controller를 모델링하기 위해 사용됩니다. 네이게이션 stack에 view controller를 추가하기 위해 UINavigationController 클래스와 pushViewControoler(_:animated:) 메서드를 호출합니다. 그리고 네비게이션 스택에서 view controller를 삭제하기 위해 popViewControllerAnimated(\_:)를 호출합니다. 엄격한 last in, first out 접근으로 collection을 관리해야 한다면, stack은 유용한 collection model이 될 것입니다. </p>
  </div>

<p>아래는 nongeneric 버전의 stack을 작성한 것입니다. 이 예에서는 Int 값의 stack을 작성했습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">IntStack</span> <span class="p">{</span>
      <span class="k">var</span> <span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">push</span><span class="p">(</span><span class="n">_</span> <span class="nv">item</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">items</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">pop</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Int</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">items</span><span class="o">.</span><span class="nf">removeLast</span><span class="p">()</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>위의 structure는 items라는 Array property를 사용하여 스택안의 값을 저장합니다. Stack은 push와 pop이라는 두개의 메서드를 제공합니다. 이 메서드들은 structure의 items 배열을 변경하기 때문에 mutating이라고 표시되었습니다.</p>

<p>위의 IntStack 타입은 오직 Int 값과만 사용할 수 있기 때문에 어떤 타입의 값이던 사용할 수 있는 <em>generic</em> Stack structure을 정의한다면 훨씬 더 유용하게 사용할 수 있을 것입니다.</p>

<p>아래는 Generic version의 같은 코드 입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">Stack</span><span class="o">&lt;</span><span class="kt">Element</span><span class="o">&gt;</span> <span class="p">{</span>
      <span class="k">var</span> <span class="nv">itmes</span><span class="p">:</span> <span class="p">[</span><span class="kt">Element</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
      <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">push</span><span class="p">(</span><span class="n">_</span> <span class="nv">item</span><span class="p">:</span> <span class="kt">Element</span><span class="p">)</span> <span class="p">{</span>
          <span class="n">items</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
      <span class="p">}</span>
      <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">pop</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Element</span> <span class="p">{</span>
          <span class="k">return</span> <span class="n">items</span><span class="o">.</span><span class="nf">removeLast</span><span class="p">()</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>위에서 작성한 Stack은 generic type이기 때문에 Array와 Dictionary처럼 Swift에서 사용 가능한 모든 type의 stack을 생성하기 위해 사용될 수 있습니다.</p>

<p>사용할 타입을 &lt; &gt; 사이에 작성해주어 Stack의 새 인스턴스를 생성할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">stackOfStrings</span> <span class="o">=</span> <span class="kt">Stack</span><span class="o">&lt;</span><span class="kt">String</span><span class="o">&gt;</span><span class="p">()</span>
  <span class="n">stackOfStrings</span><span class="o">.</span><span class="nf">push</span><span class="p">(</span><span class="s">"uno"</span><span class="p">)</span>
  <span class="n">stackOfStrings</span><span class="o">.</span><span class="nf">push</span><span class="p">(</span><span class="s">"dos"</span><span class="p">)</span>
  <span class="n">stackOfStrings</span><span class="o">.</span><span class="nf">push</span><span class="p">(</span><span class="s">"tres"</span><span class="p">)</span>
  <span class="n">stackOfStrings</span><span class="o">.</span><span class="nf">push</span><span class="p">(</span><span class="s">"cuatro"</span><span class="p">)</span>
  <span class="c1">// stack은 4개의 strings를 가집니다.</span>
</code></pre></div></div>

<p>값을 poping 하면 가장 위에 있는 값(마지막으로 추가된 값)을 stack에서 삭제하고 그 값을 리턴합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">fromTheTop</span> <span class="o">=</span> <span class="n">stackOfStrings</span><span class="o">.</span><span class="nf">pop</span><span class="p">()</span>
  <span class="c1">// fromTheTop은 "cuatro"와 같습니다. 그리고 stackOfStrings는 3개의 strings를 갖게 됩니다.</span>
</code></pre></div></div>

<h2 id="extending-a-generic-type">Extending a Generic Type</h2>

<p>Generic type을 확장할 때 type parameter의 목록을 extension의 정의 부분에 작성하지 않고 extension의 바디 부분에서 type parameters를 원래의 type parameter name으로 사용할 수 있습니다.</p>

<p>아래의 예시는 generic Stack type을 확장시킵니다. read-only property인 topItem을 추가하여 삭제하지 않고 맨 위에 있는 item을 리턴합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">extension</span> <span class="kt">Stack</span> <span class="p">{</span>
      <span class="k">var</span> <span class="nv">topItem</span><span class="p">:</span> <span class="kt">Element</span><span class="p">?</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">items</span><span class="o">.</span><span class="n">isEmpty</span> <span class="p">?</span> <span class="nv">nil</span> <span class="p">:</span> <span class="n">items</span><span class="p">[</span><span class="n">items</span><span class="o">.</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>topItem property는 Element 타입의 옵셔널 값을 리턴합니다. Stack이 비어있다면 nil 값을 리턴하고, 비어있지 않다면 items 배열의 맨 위에 있는 값을 리턴합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">if</span> <span class="k">let</span> <span class="nv">topItem</span> <span class="o">=</span> <span class="n">stackOfStrings</span><span class="o">.</span><span class="n">topItem</span> <span class="p">{</span>
      <span class="nf">print</span><span class="p">(</span><span class="s">"The top item on the stack is </span><span class="se">\(</span><span class="n">topItem</span><span class="se">)</span><span class="s">."</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c1">// "The top item on the stack is tres"를 출력합니다.</span>
</code></pre></div></div>

<h2 id="type-constraints">Type Constraints</h2>

<h3 id="type-constraint-syntax">Type Constraint Syntax</h3>

<p>하나의 클래스 또는 프로토콜 constraint를 type parameter name의 뒤에 놓아주면 type constraint를 작성할 수 있습니다. ,으로 분리하고 type parameter list의 한 부분으로 작성합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="n">someFunction</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">SomeClass</span><span class="p">,</span> <span class="kt">U</span><span class="p">:</span> <span class="kt">SomeProtocol</span><span class="o">&gt;</span><span class="p">(</span><span class="nv">someT</span><span class="p">:</span> <span class="kt">T</span><span class="p">,</span> <span class="nv">someU</span><span class="p">:</span> <span class="kt">U</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// 바디 부분</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>위의 작성한 가상의 function은 두개의 type parameters를 가지고 있습니다. 첫번째 type parameter인 T는 SomeClass의 subclass가 되어야하는 type constraint를 가지고 있습니다. 두번째 type parameter U는 SomeProtocol을 따라야 한다는 type constraint를 가집니다.</p>

<h3 id="type-constraint-in-action">Type Constraint in Action</h3>

<p>아래는 nongeneric function인 findIndex(ofString:in:)입니다. String 값과 String 값을 가지고 있는 배열이 주어집니다. findIndex(ofString:in:) function은 배열안에서 처음으로 일치하는 값의 index가 될 옵셔널 Int 값을 리턴합니다. 만약 일치하는 값이 없다면 nil을 리턴합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="nf">findIndex</span><span class="p">(</span><span class="n">ofString</span> <span class="nv">valueToFind</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="k">in</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">?</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">valueToFind</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">index</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="kc">nil</span>
  <span class="p">}</span>
</code></pre></div></div>
<p>findIndex(ofString:in:)는 String 타입의 배열에서 어떤 string 값을 찾을 때 사용될 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">strings</span> <span class="o">=</span> <span class="p">[</span><span class="s">"cat"</span><span class="p">,</span> <span class="s">"dog"</span><span class="p">,</span> <span class="s">"llama"</span><span class="p">,</span> <span class="s">"parakeet"</span><span class="p">,</span> <span class="s">"terrapin"</span><span class="p">]</span>
  <span class="k">if</span> <span class="k">let</span> <span class="nv">foundIndex</span> <span class="o">=</span> <span class="nf">findIndex</span><span class="p">(</span><span class="nv">ofString</span><span class="p">:</span> <span class="s">"llama"</span><span class="p">,</span> <span class="nv">in</span><span class="p">:</span> <span class="n">strings</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">print</span><span class="p">(</span><span class="s">"The index of llama is </span><span class="se">\(</span><span class="n">foundIndex</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c1">// "The index of llama is 2"를 출력합니다.</span>
</code></pre></div></div>

<p>위에서 index값을 찾기 위해 사용된 원리는 String 타입외의 다른 타입들의 값의 index를 찾을 때도 유용하게 쓰일 수 있습니다. String 타입이 언급된 모든 부분을 T로 바꾸어 generic function을 작성할 수 있습니다.</p>

<p>아래는 예상되는 generic 버전의 findIndex(of:in:) function입니다. 하지만 아래의 function은 compile되지 않습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="n">findIndex</span><span class="o">&lt;</span><span class="kt">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">of</span> <span class="nv">valueToFind</span><span class="p">:</span> <span class="kt">T</span><span class="p">,</span> <span class="k">in</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">?</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="n">value</span> <span class="o">==</span> <span class="n">valueToFind</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">index</span>
        <span class="p">}</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="kc">nil</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>위의 function이 컴파일되지 않는 이유는 “if value == valueToFind” 부분에 있습니다. 모든 Type의 값이 == 를 이용하여 비교될 수 없기 때문입니다. 만약 우리가 복잡한 데이터 모델을 위해 커스텀 class, structure을 생성했을 경우 Swift는 해당 class나 structure가 == 를 사용했을 때 결과를 추측하지 못하게 됩니다.</p>

<p>Swift의 standard library는 Equatable이라는 프로토콜을 가지고 있습니다. Equatable을 따르는 type은 ==(equal to operator)와 !=(not equal to)을 사용하여 해당 type의 두 값을 비교할 수 있게 됩니다. 모든 Swift standard type은 Equatable를 따릅니다.</p>

<p>Equatable한 타입은 안전하게 foundIndex(of:in:) function과 함께 사용될 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="n">findIndex</span><span class="o">&lt;</span><span class="kt">T</span><span class="p">:</span> <span class="kt">Equatable</span><span class="o">&gt;</span><span class="p">(</span><span class="n">of</span> <span class="nv">valueToFind</span><span class="p">:</span> <span class="kt">T</span><span class="p">,</span> <span class="k">in</span> <span class="nv">array</span><span class="p">:</span> <span class="p">[</span><span class="kt">T</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="kt">Int</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">index</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="k">in</span> <span class="n">array</span><span class="o">.</span><span class="nf">enumerated</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">if</span> <span class="n">valueToFind</span> <span class="o">==</span> <span class="n">value</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">index</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="kc">nil</span>
  <span class="p">}</span>
</code></pre></div></div>
:ET