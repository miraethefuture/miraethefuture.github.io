I"=<hr />

<h3>💭</h3>
<p>자바 웹 개발자 과정 수업을 듣기 시작한지 일주일이 지났다. 자바의 기본적인 문법은 여러가지 온라인 강의를 통해서 예습을 하고 시작했던터라 어렵지 않게 수업을 듣고 있다. 수업 커리큘럼에 JSP가 포함되어 있는데, 아직 JSP가 어떤것인지 잘 몰라서 한번 알아보려고 한다. 요즘 어떤 정보에 대한 글을 읽거나, 기술에 대해 알아보기 전에 ‘지금도 여전히 사용되는가?’ 라는 질문을 먼저 검색해보게 된다. 나의 수준에서는 뭐든 배워두면 도움이 되겠지만, 배울 것은 너무나 많고 시간은 충분하지 않아서 자꾸만 정보의 중요성에 대해 생각해보게 된다. 언제나 새로운 것들이 마구 쏟아지는 지금 같은 시대에는 주로 사용되는 기술들도 빠르게 변한다. 그렇기 때문에 자꾸 위와 같은 질문을 검색해보는 것 같다. 새로운 기술이 언제나 좋은 것은 아니지만 대부분의 경우 새로운 기술이 더 빠르거나, 더 간단하게 복잡한 일을 처리하거나, 전 기술의 단점을 보완해서 나오는 경우가 많이 때문에 새로운 기술들에 대해 더 알고 싶은 것 같다. JSP에 대해서도 구글링해보니 새로운 프로젝트에는 더이상 사용되지 않는 것 같지만, JSP에 대한 기본적인 것들을 알아두면 도움이 되는 것 같다. 작은 프로젝트를 진행할때는 여전히 사용되기도 하고 예전에 만들어진 어플리케이션들을 살펴봐야 할 수도 있고, 서블릿과 JSP가 자바 웹 개발의 기본적인 것들이라 스프링, hibernate을 배우기 전에 배워야 한다는 의견도 있다. 그리고 나는 지금 듣는 과정중 JSP에 대해 배우게 될 것이고, 테스트도 봐야해서 기본적인 것들을 알아보려고 한다.</p>

<h3 id="-jsp-java-server-pages">🧑‍💻 JSP (Java Server Pages)</h3>
<p><a href="https://www.javatpoint.com/jsp-tutorial">이 페이지의 내용을 참고</a></p>

<p>JSP는 서블릿처럼 웹 어플리케이션을 만드는 것에 사용된다. 서블릿과 같은 일을 하지만 더 많은 기능들을 가지고 있기 때문에 서블릿의 확장된 버전으로 생각해도 되겠다. JSP 페이지는 HTML 태그와 JSP 태그로 이루어진다. (JSP 태그를 이용해서 자바 코드를 HTML 페이지에서 사용할 수 있다.) JSP페이지는 기술 파트와 디자인 파트를 나눌 수 있기 때문에 서블릿보다 유지가 쉽다. Expression Language와 Custom Tags와 같은 부가 기능을 제공하기도 한다.</p>

<p><strong>💡 서블릿과 비교했을 때 JSP의 장점은 무엇이 있을까?</strong></p>
<ul>
  <li>
    <p>JSP는 서블릿을 확장한 기술이기 때문에 서블릿의 모든 기능들을 사용할 수 있다. implicit objects, predefined tags, expression language 그리고 custom tags와 같은 추가된 기능들을 사용할 수 있다.</p>
  </li>
  <li>
    <p>JSP는 비즈니스 로직과 프레젠테이션 로직을 쉽게 분리 할 수 있다. 덕분에 JSP는 쉽게 관리 할 수 있다.</p>
  </li>
  <li>
    <p>JSP 페이지가 수정되었더라도 프로젝트를 다시 컴파일 하거나 디플로이 할 필요가 없다. 서블릿 코드는 바뀐 부분들을 업데이트하고 리컴파일 해야하지만 JSP는 그럴 필요가 없기 때문에 빠르게 개발할 수 있다.</p>
  </li>
  <li>
    <p>JSP에서는 Action tags, JSTL, Custom tags 등 많은 태그를 이용할 수 있기 때문에 서블릿보다 더 적은 코드 작성을 필요로 한다.</p>
  </li>
</ul>

<p><strong>💡 JSP의 Lifecycle</strong></p>

<p>JSP 페이지들은 아래 변화 단계를 따른다.</p>
<ul>
  <li>Translation of JSP Page</li>
  <li>Compilation of JSP Page</li>
  <li>Classloading (the classloader loads class file)</li>
  <li>Instantiation (Object of the Generated Servlet is created).</li>
  <li>Initialization (the container invokes jspInit() method).</li>
  <li>Request processing (the container invokes _jspService() method).</li>
  <li>Destroy (the container invokes jspDestroy() method).</li>
</ul>

<div class="notice">
  <h4>Note!</h4>
  <p>jspInit(), _jspService() and jspDestroy() 는 JSP의 라이프사이클 메서드.</p>
</div>

<p>JSP는 JSP translator의 도움을 받아 서블릿(.java file)으로 변환(<s>변형?</s>)된다.
 JSP translator는 JSP 페이지를 서블릿으로 변환하는 웹 서버의 한 부분이다. 서블릿이 된 JSP 페이지는 compiler 에 의해 컴파일 되고 클래스 파일로 변환된다. 서블릿에서 일어나는 모든 프로세스들은 후에 JSP에서 수행된다.</p>

<h3 id="-tomcat-server--eclipse로-jsp-만들기">🐈 Tomcat Server &amp; Eclipse로 JSP 만들기</h3>
<p><a href="https://www.geeksforgeeks.org/creating-jsp-in-eclipse-ide-with-tomcat-server/">이 페이지의 내용을 참고</a></p>

<p>톰캣 서버는 가장 좋은 웹 서버 중 하나이고, 아파치에서 개발 오픈소스 자바 서블릿 컨테이너이다. 톰캣은 고유의 특징과 빠른 속도, 그리고 J2EE specifications를 구현하는 점 때문에 많은 개발자들이 이용하고 있다.</p>

<p>위 페이지를 참고하며 이클립스와 톰캣을 이용해 JSP 페이지를 만들어본다.</p>

<ol>
  <li>
    <p>프로젝트 익스플로러에서 마우스 우클릭 New &gt; Dynamic Web project
  <img src="/assets/images/CJET.png" alt="start" /></p>
  </li>
  <li>
    <p>프로젝트 이름을 입력 &gt; Next
  <img src="/assets/images/CJET2.png" alt="new" /></p>
  </li>
</ol>
:ET