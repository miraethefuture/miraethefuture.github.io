I"_)<p><a href="https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html">A Swift Tour</a>
<sub>아래 모든 정보의 출처는 Swift 공식 문서이며 개인의 학습 용도로만 사용되었음을 밝힙니다.<br />
All information below comes from the Swift documentation and is for personal learning purposes only.</sub></p>

<h2 id="문자열과-변수의-값">문자열과 변수의 값</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">apples</span> <span class="o">=</span> <span class="mi">3</span>
  <span class="k">let</span> <span class="nv">oranges</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="k">let</span> <span class="nv">appleSummary</span> <span class="o">=</span> <span class="s">"I have </span><span class="se">\(</span><span class="n">apples</span><span class="se">)</span><span class="s"> apples."</span>
  <span class="k">let</span> <span class="nv">fruitSummary</span> <span class="o">=</span> <span class="s">"I have </span><span class="se">\(</span><span class="n">apples</span> <span class="o">+</span> <span class="n">oranges</span><span class="se">)</span><span class="s"> pieces of fruit."</span>
</code></pre></div></div>

<ul>
  <li>\ 와 ()를 이용해서 문자열 안에 변수의 값을 포함할 수 있습니다.</li>
</ul>

<h2 id="array-and-dictionary">Array and Dictionary</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 배열</span>
  <span class="k">var</span> <span class="nv">thingsIWannaGet</span> <span class="o">=</span> <span class="p">[</span><span class="s">"a chair"</span><span class="p">,</span> <span class="s">"plant"</span><span class="p">,</span> <span class="s">"tulips"</span><span class="p">]</span>

  <span class="n">thingsIWannaGet</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"clothes"</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">thingsIWannaGet</span><span class="p">)</span>

  <span class="c1">// 딕셔너리</span>
  <span class="k">var</span> <span class="nv">occupations</span> <span class="o">=</span> <span class="p">[</span>
      <span class="s">"Marcolm"</span><span class="p">:</span> <span class="s">"Captain"</span><span class="p">,</span>
      <span class="s">"Kaylee"</span> <span class="p">:</span> <span class="s">"Mechanic"</span><span class="p">,</span>
  <span class="p">]</span>

  <span class="n">occupations</span><span class="p">[</span><span class="s">"Jayne"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"Public Relations"</span>
</code></pre></div></div>
<ul>
  <li>[]를 이용하여 배열과 딕셔너리를 생성할 수 있습니다.</li>
  <li>key를 이용하여 값에 접근할 수 있습니다.</li>
  <li>마지막 요소 다음에 ,(콤 )가 허용됩니다.</li>
  <li>배열에 값을 추가시 배열의 크기는 자동으로 늘어납니다.</li>
  <li>print(배열이름)을 이용하여 간단하게 배열을 출력할 수 있습니다.</li>
</ul>

<h3 id="빈-배열-빈-딕셔너리-생성하기">빈 배열, 빈 딕셔너리 생성하기</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">var</span> <span class="nv">emptyArray</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
 <span class="k">var</span> <span class="nv">emptyDictionary</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Float</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
</code></pre></div></div>

<h2 id="optionals">Optionals</h2>

<h3 id="if문과-optionals">If문과 Optionals</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">var</span> <span class="nv">optionalString</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="s">"Hello"</span>
 <span class="nf">print</span><span class="p">(</span><span class="n">optionalString</span> <span class="o">==</span> <span class="kc">nil</span><span class="p">)</span>
 <span class="c1">// fasle 를 출력함</span>

 <span class="k">var</span> <span class="nv">optinalName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="s">"Future Kim"</span>
 <span class="k">var</span> <span class="nv">greeting</span> <span class="o">=</span> <span class="s">"Hello!"</span>
 <span class="k">if</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">optionalName</span> <span class="p">{</span>
   <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
 <span class="p">}</span>
</code></pre></div></div>
<p>if와 let 그리고 없을수도 있는 값을 함께 사용할 수 있다. 없을 수 있는 값을 optionals라고 한다. Optional 값은 어떤 값을 가지거나 값이 없다는 것을 나타내기 위해 nil값을 가진다. 값의 type 뒤에 ? 를 작성하여 optional임을 표시합니다.
 위의 optional value는 if문의 조건에서 unwrapped 되고 let 상수에 할당됩니다. unwrapped된 값은 안쪽 코드 블락에서 사용가능하게 됩니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">var</span> <span class="nv">optionalName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
 <span class="k">var</span> <span class="nv">greeting</span> <span class="o">=</span> <span class="s">"Hello!"</span>

 <span class="k">if</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">optionalName</span> <span class="p">{</span>
    <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello, No Name!"</span>
  <span class="p">}</span>

  <span class="nf">print</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</code></pre></div></div>
<p>위에 예제에서는 optionalName에 nil값을 주었을 때는 if문의 조건이 false이기 때문에 { } 속 코드를 스킵합니다. else문을 이용하여 nil 값인 경우에 실행할 코드를 작성할 수도 있습니다. 위의 예제는 Hello, No Name을 출력합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">let</span> <span class="nv">nickname</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
 <span class="k">let</span> <span class="nv">fullname</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"Future Kim"</span>
 <span class="k">let</span> <span class="nv">informalGreetring</span> <span class="o">=</span> <span class="s">"Hi </span><span class="se">\(</span><span class="n">nickname</span> <span class="p">??</span> <span class="n">fullName</span><span class="se">)</span><span class="s">"</span>
</code></pre></div></div>

<p>?? operator를 사용하여 optinal에 default 값을 줄 수 있습니다. 만약 optional이 nil을 가지고 있다면 기본값을 사용합니다.</p>

<h2 id="switch">Switch</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">vegetable</span> <span class="o">=</span> <span class="s">"red pepper"</span>
  <span class="k">switch</span> <span class="n">vegetable</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"celery"</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Add some raisins and make ants on a log"</span><span class="p">)</span>
    <span class="k">case</span> <span class="s">"cucumber"</span><span class="p">,</span> <span class="s">"watercress"</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"That would make a good tea sandwich"</span><span class="p">)</span>
    <span class="k">case</span> <span class="k">let</span> <span class="nv">x</span> <span class="k">where</span> <span class="n">x</span><span class="o">.</span><span class="nf">hasSuffix</span><span class="p">(</span><span class="s">"pepper"</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Is it a spicy </span><span class="se">\(</span><span class="n">x</span><span class="se">)</span><span class="s">?"</span><span class="p">)</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Everything tastes good in soup"</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c1">// Prints "Is it a spicy red pepper?"</span>
</code></pre></div></div>
<p>Switch는 모든 자료형과 넓은 범위의 비교 연산자를 지원합니다. 조건이 일치하는 switch case의 코드를 실행한 뒤에 프로그램은 Switch문을 빠져나옵니다.</p>

<h3 id="hassuffix_">hasSuffix(_:)</h3>

<p>특정 suffix(끝에 붙어서 어떤 한 다른 단어를 만드는 단어)로 끝나는 문자열인지 아닌지를 Boolean value를 리턴합니다. 위의 예시에서는 red pepper라는 문자열이 pepper로 끝나기 때문에 true를 반환합니다.</p>

<h2 id="for-in과-dictionary">for-in과 Dictionary</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">interestingNumbers</span>
</code></pre></div></div>
:ET