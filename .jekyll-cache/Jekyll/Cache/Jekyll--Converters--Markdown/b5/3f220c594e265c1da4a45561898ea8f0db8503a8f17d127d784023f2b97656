I"<h1>🚧</h1>
<p>Closures는 기능을 담고 있는 완전한 블락으로 코드 안에서 사용될 수 있습니다.<br />
  Constants와 Variables의 references를 찾아내고 담을 수 있습니다.
  이것을 <em>closing over</em> constants and variables한다고 합니다.</p>

<p>Swift는 capturing과 관련된 모든 메모리 관리를 처리해줍니다.</p>

<h2 id="functions-and-closures">Functions and Closures</h2>

<p>전역범위의 function 그리고 nested funtions는 모두 사실 특별한 케이스의 closures입니다.<br />
  클로저는 세가지 형태로 나눠집니다.</p>

<ol>
  <li>Global functions는 이름을 가지고 있지만 어떤 값도 capture하지 않는 클로저입니다.</li>
  <li>Nested functions는 이름을 가지고 있고 자신을 감싸고 있는 function의 값을 capture할 수 있는 클로저입니다.</li>
  <li>Closure expressions 주변의 값을 capture할 수 있는 가벼운 syntax로 쓰여진, 이름이 없는 클로저입니다.</li>
</ol>

<p>Swift의 <strong>closure expressions</strong>는 간결하고 깔끔하도록 최적화된 syntax와 함께 명확한 스타일을 가지고 있습니다.<br />
  이 최적화는 아래의 네가지를 포함합니다.</p>

<ol>
  <li>패러미터와 리턴 값의 타입을 문맥의 흐름으로부터 추론합니다.</li>
  <li>single-expressions closures로부터의 키워드로 표현되지 않은 returns</li>
  <li>약칭으로 된 argument의 이름</li>
  <li>Trailing closure syntax 👷</li>
</ol>

<h3 id="closure-expressions">Closure Expressions</h3>

<p>Closure Expressions는 inline closures를 짧고 집중된 형태의 syntax로 작성하는 방식이다.</p>

<h4 id="inline-">inline …</h4>
<div class="notice">
     <h4>💡</h4>
     <p>inline은 사용되기 전에 중간 변수에 할당되지 않고 바로 사용되는 것을 말합니다.
     </p>
  </div>
:ET