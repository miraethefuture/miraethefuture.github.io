I"sW<p><a href="https://docs.swift.org/swift-book/GuidedTour/GuidedTour.html">A Swift Tour</a>
<sub>아래 모든 정보의 출처는 Swift 공식 문서이며 개인의 학습 용도로만 사용되었음을 밝힙니다.<br />
All information below comes from the Swift documentation and is for personal learning purposes only.</sub></p>

<h2 id="문자열과-변수의-값">문자열과 변수의 값</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">apples</span> <span class="o">=</span> <span class="mi">3</span>
  <span class="k">let</span> <span class="nv">oranges</span> <span class="o">=</span> <span class="mi">5</span>
  <span class="k">let</span> <span class="nv">appleSummary</span> <span class="o">=</span> <span class="s">"I have </span><span class="se">\(</span><span class="n">apples</span><span class="se">)</span><span class="s"> apples."</span>
  <span class="k">let</span> <span class="nv">fruitSummary</span> <span class="o">=</span> <span class="s">"I have </span><span class="se">\(</span><span class="n">apples</span> <span class="o">+</span> <span class="n">oranges</span><span class="se">)</span><span class="s"> pieces of fruit."</span>
</code></pre></div></div>

<ul>
  <li>\ 와 ()를 이용해서 문자열 안에 변수의 값을 포함할 수 있습니다.</li>
</ul>

<h2 id="array-and-dictionary">Array and Dictionary</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 배열</span>
  <span class="k">var</span> <span class="nv">thingsIWannaGet</span> <span class="o">=</span> <span class="p">[</span><span class="s">"a chair"</span><span class="p">,</span> <span class="s">"plant"</span><span class="p">,</span> <span class="s">"tulips"</span><span class="p">]</span>

  <span class="n">thingsIWannaGet</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="s">"clothes"</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">thingsIWannaGet</span><span class="p">)</span>

  <span class="c1">// 딕셔너리</span>
  <span class="k">var</span> <span class="nv">occupations</span> <span class="o">=</span> <span class="p">[</span>
      <span class="s">"Marcolm"</span><span class="p">:</span> <span class="s">"Captain"</span><span class="p">,</span>
      <span class="s">"Kaylee"</span> <span class="p">:</span> <span class="s">"Mechanic"</span><span class="p">,</span>
  <span class="p">]</span>

  <span class="n">occupations</span><span class="p">[</span><span class="s">"Jayne"</span><span class="p">]</span> <span class="o">=</span> <span class="s">"Public Relations"</span>
</code></pre></div></div>
<ul>
  <li>[]를 이용하여 배열과 딕셔너리를 생성할 수 있습니다.</li>
  <li>key를 이용하여 값에 접근할 수 있습니다.</li>
  <li>마지막 요소 다음에 ,(콤 )가 허용됩니다.</li>
  <li>배열에 값을 추가시 배열의 크기는 자동으로 늘어납니다.</li>
  <li>print(배열이름)을 이용하여 간단하게 배열을 출력할 수 있습니다.</li>
</ul>

<h3 id="빈-배열-빈-딕셔너리-생성하기">빈 배열, 빈 딕셔너리 생성하기</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">var</span> <span class="nv">emptyArray</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
 <span class="k">var</span> <span class="nv">emptyDictionary</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Float</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
</code></pre></div></div>

<h2 id="optionals">Optionals</h2>

<p>값이 없을 수도 있는 상황에서 optionals를 사용합니다. Optional은 두가지 가능성을 나타냅니다.</p>

<ol>
  <li>값이 있어서 optional을 unwrap하여 그 값에 접근할 수 있다.</li>
  <li>값이 없다.</li>
</ol>

<h3 id="optinals가-사용되는-방법">Optinals가 사용되는 방법</h3>

<h4 id="int">Int()</h4>

<p>Int type은 문자열을 Int로 변환할 수 있는 initializer를 가지고 있습니다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">possibleNumber</span> <span class="o">=</span> <span class="s">"123"</span>
  <span class="k">let</span> <span class="nv">convertedNumber</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">(</span><span class="n">possibleNumber</span><span class="p">)</span>

  <span class="nf">print</span><span class="p">(</span><span class="n">convertedNumber</span><span class="p">)</span>
  <span class="c1">// Prints "Optinal(123)"</span>
</code></pre></div></div>
<p>위의 방식으로 문자열을 Int 타입으로 변환할 수 있지만 모든 문자열을 Int 타입으로 변환할 수 있는 것은 아닙니다. “hello, world”와 같은 문자열은 명확한 숫자 값을 가지고 있지 않기 때문에 변환되지 않습니다. 이렇게 initializer가 변환을 실패할 수 있는 경우가 있기 때문에 Int가 아닌 optional Int 값을 변환합니다. Optional Int는 <strong>Int?</strong> 라고 표기합니다. ‘?’는 Int값이 있거나 어떠한 값도 가지고 있지 않다는 것을 나타냅니다. (Bool, String과 같은 값은 가지지 않음)</p>

<h4 id="nil">nil</h4>

<p>nil값을 할당함으로써 optional 변수에 값이 없는 상태를 설정할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">serverResponseCode</span><span class="p">:</span> <span class="kt">Int</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
</code></pre></div></div>

<p>optional이 아닌 constants나 variables과는 nil을 사용할 수 없습니다. 만약 값이 없는 변수 또는 상수가 필요하다면 항상 optionl +  해당 타입을 사용해야 합니다.</p>

<p>만약 값을 할당하지 않고 optinal variable을 정의하면 자동으로 nil값이 할당됩니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">surveyAnswer</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
  <span class="c1">// surveyAnswer is automatically set to nil</span>
</code></pre></div></div>

<h4 id="if문과-optionals">If문과 Optionals</h4>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">var</span> <span class="nv">optionalString</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="s">"Hello"</span>
 <span class="nf">print</span><span class="p">(</span><span class="n">optionalString</span> <span class="o">==</span> <span class="kc">nil</span><span class="p">)</span>
 <span class="c1">// false 를 출력함</span>

 <span class="k">var</span> <span class="nv">optinalName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="s">"Future Kim"</span>
 <span class="k">var</span> <span class="nv">greeting</span> <span class="o">=</span> <span class="s">"Hello!"</span>
 <span class="k">if</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">optionalName</span> <span class="p">{</span>
   <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
 <span class="p">}</span>
</code></pre></div></div>
<p>if와 let 그리고 없을수도 있는 값을 함께 사용할 수 있다. 없을 수 있는 값을 optionals라고 한다. Optional 값은 어떤 값을 가지거나 값이 없다는 것을 나타내기 위해 nil값을 가진다. 값의 type 뒤에 ? 를 작성하여 optional임을 표시합니다.
 위의 optional value는 if문의 조건에서 unwrapped 되고 let 상수에 할당됩니다. unwrapped된 값은 안쪽 코드 블락에서 사용가능하게 됩니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">var</span> <span class="nv">optionalName</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
 <span class="k">var</span> <span class="nv">greeting</span> <span class="o">=</span> <span class="s">"Hello!"</span>

 <span class="k">if</span> <span class="k">let</span> <span class="nv">name</span> <span class="o">=</span> <span class="n">optionalName</span> <span class="p">{</span>
    <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello, </span><span class="se">\(</span><span class="n">name</span><span class="se">)</span><span class="s">"</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">greeting</span> <span class="o">=</span> <span class="s">"Hello, No Name!"</span>
  <span class="p">}</span>

  <span class="nf">print</span><span class="p">(</span><span class="n">greeting</span><span class="p">)</span>
</code></pre></div></div>
<p>위에 예제에서는 optionalName에 nil값을 주었을 때는 if문의 조건이 false이기 때문에 { } 속 코드를 스킵합니다. else문을 이용하여 nil 값인 경우에 실행할 코드를 작성할 수도 있습니다. 위의 예제는 Hello, No Name을 출력합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">let</span> <span class="nv">nickname</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span>
 <span class="k">let</span> <span class="nv">fullname</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="s">"Future Kim"</span>
 <span class="k">let</span> <span class="nv">informalGreetring</span> <span class="o">=</span> <span class="s">"Hi </span><span class="se">\(</span><span class="n">nickname</span> <span class="p">??</span> <span class="n">fullName</span><span class="se">)</span><span class="s">"</span>
</code></pre></div></div>

<p>?? operator를 사용하여 optinal에 default 값을 줄 수 있습니다. 만약 optional이 nil을 가지고 있다면 기본값을 사용합니다.</p>

<h4>!</h4>

<h2 id="switch">Switch</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">vegetable</span> <span class="o">=</span> <span class="s">"red pepper"</span>
  <span class="k">switch</span> <span class="n">vegetable</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s">"celery"</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Add some raisins and make ants on a log"</span><span class="p">)</span>
    <span class="k">case</span> <span class="s">"cucumber"</span><span class="p">,</span> <span class="s">"watercress"</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"That would make a good tea sandwich"</span><span class="p">)</span>
    <span class="k">case</span> <span class="k">let</span> <span class="nv">x</span> <span class="k">where</span> <span class="n">x</span><span class="o">.</span><span class="nf">hasSuffix</span><span class="p">(</span><span class="s">"pepper"</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Is it a spicy </span><span class="se">\(</span><span class="n">x</span><span class="se">)</span><span class="s">?"</span><span class="p">)</span>
    <span class="k">default</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="s">"Everything tastes good in soup"</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="c1">// Prints "Is it a spicy red pepper?"</span>
</code></pre></div></div>
<p>Switch는 모든 자료형과 넓은 범위의 비교 연산자를 지원합니다. 조건이 일치하는 switch case의 코드를 실행한 뒤에 프로그램은 Switch문을 빠져나옵니다.</p>

<h3 id="hassuffix_">hasSuffix(_:)</h3>

<p>특정 suffix(끝에 붙어서 어떤 한 다른 단어를 만드는 단어)로 끝나는 문자열인지 아닌지를 Boolean value를 리턴합니다. 위의 예시에서는 red pepper라는 문자열이 pepper로 끝나기 때문에 true를 반환합니다.</p>

<h2 id="for-in과-dictionary">for-in과 Dictionary</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">interestingNumbers</span> <span class="o">=</span> <span class="p">[</span>
      <span class="s">"Prime"</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">],</span>
      <span class="s">"Fibonacci"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">],</span>
      <span class="s">"Square"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">25</span><span class="p">],</span>
  <span class="p">]</span>

  <span class="k">var</span> <span class="nv">largest</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="k">for</span><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">numbers</span><span class="p">)</span> <span class="k">in</span> <span class="n">interestingNumbers</span> <span class="p">{</span>
    <span class="k">for</span> <span class="n">number</span> <span class="k">in</span> <span class="n">numbers</span> <span class="p">{</span>
      <span class="k">if</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="n">largest</span> <span class="p">{</span>
        <span class="n">largest</span> <span class="o">=</span> <span class="n">number</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">largest</span><span class="p">)</span>
  <span class="c1">// Prints "25"</span>
</code></pre></div></div>

<p>Dictionary는 순서가 없는 collection이기 때문에 for-in문을 사용하여 반복 수행하게 되면 임의의 순서로 작동하게 됩니다.<br />
  가장 바깥쪽 for-in loop의 (_, numbers) 중 앞쪽은 딕셔너리의 키를 numbers는
  배열인 값을 의미합니다. 그러면 안쪽의 for-in loop는 값인 배열을 돌며 number의 각 요소를 할당합니다. 만약 number에 할당된 배열의 요소가 largest 보다 크다면 largest에 그 값을 할당합니다. 이렇게 각 키와 값을 돌며 가장 큰 수인 25를 출력합니다.</p>

<h2 id="tuples">Tuples</h2>

<p>Tuple은 여러개의 값을 하나의 합쳐진 그룹으로 만듭니다. 튜플 안의 값은 어떤 자료형이든 될 수 있고, 한 튜플안의 값은 같은 서로 다른 자료형을 가질 수 있습니다.</p>

<h3 id="http-status-code와-튜플">HTTP status code와 튜플</h3>

<p>예를 들어 (404, “Not Found”)는 HTTP status code를 나타내는 튜플입니다. HTTP status code는 웹 페이지를 요청할 때 웹 서버로부터 리턴되는 특정한 값입니다. 404 Not Found 코드는 요청한 웹 페이지가 존재하지 않을 때 리턴되는 코드입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">http404Error</span> <span class="o">=</span> <span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s">"Not Found"</span><span class="p">)</span>
  <span class="c1">// http404Error is of type (Int, String), and equals (404, "Not Found")</span>
</code></pre></div></div>
<p>(404, “Not Found”)튜플은 HTTP status code에게 숫자와 사람이 읽을 수 있는 설명이라는 두개의 값을 주기 위해서 Int타입과 String타입을 하나의 그룹으로 만들었습니다. 이것은 “a tuple of type(Int, String)”이라고 할 수 있습니다.</p>

<h3 id="제한이-없는-튜플">제한이 없는 튜플</h3>

<p>(Int, Int, Int) 또는 (String, Bool) 등의 튜플을 만들 수 있습니다. 값의 개수나 자료형의 제한이 없습니다.</p>

<h3 id="decompose-a-tuple">Decompose a Tuple</h3>

<p>튜플의 컨텐츠를 각각의 상수나 변수로 나눌 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="p">(</span><span class="nv">statusCode</span><span class="p">,</span> <span class="nv">statusMessage</span><span class="p">)</span> <span class="o">=</span> <span class="n">http404Error</span>

  <span class="nf">print</span><span class="p">(</span><span class="s">"The status code is </span><span class="se">\(</span><span class="n">statusCode</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="c1">// Prints "The status code is 404"</span>
</code></pre></div></div>

<p>만약 튜플의 값 중 몇몇의 값만 필요하다면  _(underscore)를 사용하여 필요 없는 값은 무시할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="p">(</span><span class="nv">justTheStatusCode</span><span class="p">,</span> <span class="nv">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">http404Error</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"The status code is </span><span class="se">\(</span><span class="n">justTheStatusCode</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="c1">// Prints "The status code is 404"</span>
</code></pre></div></div>

<h3 id="index를-이용하여-값에-접근하기">Index를 이용하여 값에 접근하기</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">print</span><span class="p">(</span><span class="s">"The Status code is </span><span class="se">\(</span><span class="n">http404Error</span><span class="o">.</span><span class="mi">0</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="c1">// Prints "The status code is 404"</span>

  <span class="nf">print</span><span class="p">(</span><span class="s">"The Status message is </span><span class="se">\(</span><span class="n">http404Error</span><span class="o">.</span><span class="mi">1</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="c1">// Prints "The status message is Not Found"</span>
</code></pre></div></div>
<p>인덱스 번호를 이용해 각 값에 접근할 수 있습니다.</p>

<h3 id="정의와-동시에-값에-이름짓기">정의와 동시에 값에 이름짓기</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">http200Status</span> <span class="o">=</span> <span class="p">(</span><span class="nv">statusCode</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="nv">description</span><span class="p">:</span> <span class="s">"OK"</span> <span class="p">)</span>
</code></pre></div></div>
<p>위의 과정을 하나로 합쳐 튜플을 정의함과 동시에 각 값에 이름을 줄 수 있습니다. 값에 이름을 붙여주면 그 이름을 이용하여 값에 접근할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nf">print</span><span class="p">(</span><span class="s">"The statusCode is </span><span class="se">\(</span><span class="n">http200Status</span><span class="o">.</span><span class="n">statusCode</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="c1">// Prints "The statusCode is 200"</span>
</code></pre></div></div>

<h3 id="functions와-튜플">Functions와 튜플</h3>

<p>튜플은 function의 리턴 값으로 사용될 때 특히 유용합니다. 웹 페이지를 가져오는 function은 페이지 가져오기가 성공했는지 실패했는지를 알려주기 위해 (Int, String) 튜플을 반환할 수 있습니다. 서로 다른 타입인 값을 가진 튜플을 리턴하는 function은 하나의 자료형인 하나의 값을 리턴하는 funtion보다 더 유용하게 사용될 수 있습니다.</p>

<h3 id="note">NOTE</h3>

<p>튜플은 관계가 있는 값들의 단순한 그룹들을 만드는데 유용합니다. 만약 데이터의 구조가 복잡하다면 class나 structure를 이용해 모델링하는 것이 더 좋은 방법이 될 것입니다.</p>
:ET