I"<h1 id="들어가며">들어가며…</h1>

<h2 id="state">state</h2>

<p>특정 주어진 시간에 변수, 애플리케이션, 또는 시스템에 담긴 정보를 <strong>state</strong>라고 합니다. 예를 들어, level이라는 이름의 변수가 4라는 값을 가지고 있다면 현재 level 변수의 state는 4가 됩니다.</p>

<h2 id="data-flow">data flow</h2>

<p>SwiftUI에서, 앱 전체에서 움직이는 데이터의 흐름과 그 데이터의 변화가 state 또는 앱의 UI에 변화가 일어나도록 하는 방식을 <strong>data flow</strong>라고 합니다.</p>

<h2 id="data-separation">data separation</h2>

<p>앱의 데이터 모델은 해당 데이터와 상호작용하고 그것을 화면에 보여주는 UI와 분리하여 정의해야한다는 컨셉입니다. Data separation은 데이터 모델과 UI를 서로로부터 독립시켜 따로 수정할 수 있도록 하고, 앱이 작동하는 방식을 더 쉽게 이해할 수 있도록 합니다. 그리고 앱을 테스트할 수 있는 가능성을 증진시켜줍니다.</p>

<h1 id="modifying-state">Modifying State</h1>

<p>코딩에서 state는 어떤 변수의 현재 값을 나타냅니다. 변수의 값이 바뀌었을 때 state가 변경되었다고 합니다. SwiftUI의 편리한 점 중 하나는 state가 변경되면 뷰의 모습(appearance)을 자동으로 업데이트 해준다는 것입니다. 앱의 데이터와 UI를 연결하면 SwiftUI는 해당 데이터를 감시할 수 있습니다. 데이터가 변경될 때마다 해당 데이터를 이용하고 있는 view를 업데이트 합니다. 이것은 당신의 UI에게 언제 어떻게 뷰를 업데이트해야 한다고 말해주는 코드를 작성하지 않아도 된다는 의미입니다.</p>

<h2 id="use-a-state-property-to-update-a-view">Use a state property to update a view</h2>

<p>state property를 사용하여 뷰를 업데이트 합니다.</p>

<h3 id="property">property</h3>

<p><strong>type</strong>안에 정의된 변수(값을 담는 이름 지어진 컨테이너)</p>

<p>##</p>
:ET