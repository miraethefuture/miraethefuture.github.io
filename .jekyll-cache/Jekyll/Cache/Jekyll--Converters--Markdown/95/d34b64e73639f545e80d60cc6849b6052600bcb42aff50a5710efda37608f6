I"<p>Playgrounds</p>

<h2 id="function-grouping-tasks">Function: Grouping Tasks</h2>

<p>여러개의 명령들을 하나로 모아 이름을 붙일 수 있습니다. 그리고 아무때나 원할 때 사용할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">func</span> <span class="nf">tieMyShoe</span><span class="p">()</span> <span class="p">{</span>
    <span class="nf">loop</span><span class="p">()</span>
    <span class="nf">swoop</span><span class="p">()</span>
    <span class="nf">pull</span><span class="p">()</span>
  <span class="p">}</span> <span class="c1">// 나의 예시로 바꿔보기</span>
</code></pre></div></div>

<ol>
  <li>func 키워드 사용</li>
  <li>name it</li>
  <li>function은 언제나 ()를 붙여줌</li>
  <li>curly braces안에 commands를 추가해줌으로써 function이 어떤 기능을 할 지</li>
  <li>필요할 때 언제든 tieMyShoe() 이름을 사용하여 call 하기</li>
</ol>

<h3 id="composition">Composition</h3>

<p>가끔씩 coding problem을 해결하려면 가지고 있는 새로운 behavior을 만들기 위해서 기존의 가지고 있던 commands를 혼합하여 사용해야 할 떄가 있습니다. 이 과정을 compositon이라고 합니다. 원하는 행동을 수행할 command는 없지만 기존의 code를 합침으로써 그 행동을 할 수 있게 됩니다. 만약 여러번 같은 compositon을 수행해야 한다면 어떨까요? 그렇다면 여러개의 혼합된 코드를 여러번 사용하게 됩니다. 이럴때는 이 composition을 하나로 묶어 function으로 만들 수 있습니다.</p>

<p>function을 사용하므로써 더 복잡한 코드를 간단하게 만들 수 있습니다. 복잡한 일을 간단하게 처리할 수 있다는 뜻이죠.</p>

<ol>
  <li>반복되는 패턴을 파악한다.</li>
  <li>그 행동을 하는 function을 만든다.</li>
</ol>

<h3 id="decomposition">Decomposition</h3>

<p>function 안에 다른 function을 호출할 수 있습니다. 더 큰 문제를 더 작은 조각으로 나누는 과정을 Decomposition이라고 합니다. 작은 일을 처리하는 function을 만들고 다른 funtion안에 그 functions을 사용하므로서 더 큰 문제를 해결하는 것 - 더 큰 문제를 작은 functiond으로 나누는 것을 Decomposition 이라 합니다.</p>

<h3 id="decompose-a-solution-across-multiple-function">Decompose a solution across multiple Function</h3>

<p>작은 tasks를 해결하는 functions을 이용하는 것은 도움이 됩니다. 이 작은 일을 처리하는 function을 다른 function안에서 호출하므로써 더 큰 task를 해결 할 수 있게 됩니다. 더 작은 function으로 나누는 것은 코드의 가독성을 높여줍니다. function의 이름이 각 기능을 나타내기 때문이죠.(그렇게 이름짓는다면)
  또, 코드를 작성하는 과정을 단순화 시켜줍니다. 더 큰 task를 해결하기 위한 function을 작성한 뒤에는 각각의 commands들은 신경쓰지 않을 수 있죠.</p>

<p>📖 Tweak the code inside solveRow(): tweak은 작은 변화를 만든다는 뜻.</p>

<ol>
  <li>작은 명령 패턴을 찾는다.</li>
  <li>명령들을 호출하는 function을 만든다.</li>
  <li>만들어진 function으로 문제를 해결한다.</li>
</ol>

<p>앱을 만든다는 것은 엄청나게 많은 작은 문제들의 해결방법을 찾는 것입니다. 작은 문제들의 해결책을 찾은 뒤에 코더들은 그 해결책을 모아 더 큰 문제를 해결합니다.</p>

<h2 id="for-loops">For loops</h2>

<ol>
  <li>‘for’ 사용한다.</li>
  <li>loop가 실행 될 횟수를 적어준다.</li>
  <li>curly braces 안에 반복할 commands를 적어준다.</li>
</ol>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">for</span> <span class="n">eachSeed</span> <span class="k">in</span> <span class="mi">1</span><span class="o">...</span><span class="mi">4</span> <span class="p">{</span>
    <span class="nf">makeHole</span><span class="p">()</span>
    <span class="nf">placeSeed</span><span class="p">()</span>
    <span class="nf">moveFiveInchesForward</span><span class="p">()</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>coding tasks를 분할하기 위해 반복되는 패턴을 function으로 만들어 보았습니다. loop를 이용하며 한 function을 여러번 반복해서 호출할 수 있습니다. 어떤 코드를 순서대로 반복하는 것입니다. loops를 이용하면 반복해서 해야 할 일을 단순화 시킬 수 있습니다.</p>

<ol>
  <li>작은 문제를 해결 할 패턴을 찾는다.</li>
  <li>다음 문제에서도 이 패턴이 적용되는지 알아본다.</li>
  <li>된다면 반복한다.</li>
</ol>
:ET