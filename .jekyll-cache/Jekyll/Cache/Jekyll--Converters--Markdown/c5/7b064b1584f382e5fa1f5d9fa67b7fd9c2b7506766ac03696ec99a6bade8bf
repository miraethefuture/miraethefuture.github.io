I"	<h1 id="intro">Intro</h1>

<h2 id="get-started-with-algorithms">Get Started With Algorithms</h2>

<p>Algorithms은 한 과제를 해결하기 위한 지시, 명령의 집합입니다.</p>

<p>운동화 끈을 묶기 위해 거쳐야하는 과정을 묘사해 봅시다.</p>

<ol>
  <li>운동화에 한쪽 발을 넣는다. (어느쪽이든 상관 없음)</li>
  <li>운동화를 신은 쪽 발의 끈 두개를 손으로 집는다.</li>
  <li>묶는다.</li>
  <li>다른쪽 발에 같은 과정을 반복한다.</li>
</ol>

<h3 id="pseudocode">Pseudocode</h3>

<p>Pseudocode는 영어와 코드를 혼합해서 적은 것을 말합니다. 실제 코드를 적고 디버깅하는 복잡한 과정전에 알고리즘의 단계를 좀 더 쉬운 방식으로 적어볼 수 있습니다.</p>

<h3 id="three-essential-building-blocks">Three essential building blocks</h3>

<ol>
  <li>
    <p>sequencing: 지시(instructions)를 순서대로 배열하는 것. 알고리즘을 만들기 위한 기본적인 기술 중 하나. 다르게 말하면, 알고리즘은 지시(instructions)의 list(a sequence)를 가지고 있습니다. 그리고 컴퓨터는 그 순서에 따라 지시를 수행합니다.</p>
  </li>
  <li>
    <p>selection: 알고리즘의 진행 과정 중 true / false로 답이 나눠지는 선택지를 추가할 수 있습니다. true냐 false냐에 따라 다른 과정으로 흘러가게 됩니다.</p>
  </li>
  <li>
    <p>iteration</p>
  </li>
</ol>

<h3 id="functions">Functions</h3>

<p>Swift에서는 functions를 사용하여 지시사항(instructions)를 모아 그룹화하고 이름을 붙여 줍니다. 문제를 작은 부분들로 나누고 나누어진 각각의 문제들을 해결하기 위해 functions를 작성한 뒤, 모든 functions가 잘 작동하는지 확인하고 그것들을 결합함으로써 더 큰 문제를 해결할 수 있습니다. 또한, 디테일한 지시사항들은 숨김으로써 전체적으로 더 명확하게 과정을 보여줄 수 있습니다.</p>

<h4 id="procedural-abstraction">Procedural abstraction</h4>

<p>지시사항들을 유닛단위로 그룹화하고 그 그룹에 이름을 지어주는 것. 대부분의 프로그램은 여러단계의 추상화를 사용합니다. 어떤 function을 더 높을 레벨의 추상화 과정에서 문제를</p>
:ET