I" <hr />

<h3>💭</h3>
<!-- <div class="notice">
  <h4>SQL</h4>
  <p>오늘은 IT국비지원교육 18일차 날이다. 16일간의 자바 여행을 잠깐 마치고 SQL 을 배우기 시작했다.  
  SQL은 생각보다 어렵지 않아서 자바를 배울 때보다는 편한 마음으로 수업을 듣고 있다.  
  기본적인 statements들은 많이 사용해 보면 외우게 될 것 같지만 머릿속에서 정리가 덜 된 느낌이라 블로그 글로 정리해 본다. </p>
</div> -->

<h3 id="️-sqlstructured-query-language">⌨️ SQL(Structured Query Language)</h3>

<p>SQL(Structured Query Language)은 데이터베이스에 저장된 데이터에 접근하고 조작하기 위해 사용되는 표준 언어다.</p>

<h3 id="️-sql-statements-프로그래밍-언어에서-statements-란">✍️ SQL Statements? 프로그래밍 언어에서 Statements 란?</h3>

<p>✋ 잠깐 Statements가 무엇인지 예시를 보며 알아보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hello World"</span><span class="o">);</span>
</code></pre></div></div>
<p>-&gt; 자바에서 Hello World를 화면에 출력하는 Statement</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nc">Bicycle</span> <span class="n">redBike</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bicycle</span><span class="o">();</span>
</code></pre></div></div>
<p>-&gt; 자바에서 객체를 만드는 Statement</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>      <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">Friends</span><span class="p">;</span>
</code></pre></div></div>
<p>-&gt; Friends 라는 이름의 테이블의 모든 컬럼을 가져와 보여주는 Statement</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">SELECT</span> <span class="n">Fname</span> <span class="k">FROM</span> <span class="n">Friends</span><span class="p">;</span>
</code></pre></div></div>
<p>-&gt; Friends 테이블의 Fname 컬럼의 정보를 가져와 보여주는 Statement</p>

<p>Statements란 각 프로그래밍 언어의 문법에 맞게 쓰여진 문장으로, 수행되어야 하는 작업을 표현한 문장이라고도 할 수 있겠다.</p>

<h3 id="sql로">SQL로</h3>

<p>CREATE TABLE 테이블명 (
  컬럼명 자료형(크기)
  deptno number(2,0),
  loc    varchar2(13),
  dname  varchar(14)
  constraint pk_deptno primary key (deptno)
  );</p>

<p>오라클의 SQL Developer는 데이터 베이스 관련 개발을 더 쉽게 만들어주어 생산성을 높여주는 무료 그래픽 툴이다. 사용자들은 SQL Developer를 이용해서 데이터 베이스에서 검색을 할 수 있고</p>

<table>
  <thead>
    <tr>
      <th>Acess Modifiers</th>
      <th>Non-Access Modifiers</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>private</td>
      <td>static</td>
    </tr>
    <tr>
      <td>default or No Modifier</td>
      <td>final</td>
    </tr>
    <tr>
      <td>protected</td>
      <td>abstract</td>
    </tr>
    <tr>
      <td>public</td>
      <td>synchronized</td>
    </tr>
    <tr>
      <td> </td>
      <td>trasient</td>
    </tr>
    <tr>
      <td> </td>
      <td>volatile</td>
    </tr>
    <tr>
      <td> </td>
      <td>strictfp</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<ul>
  <li>
    <p>Abstract class는 객체를 만들 수 없도록 제한된 클래스이다.</p>
  </li>
  <li>
    <p>Abstract method는 Abstract class 에서만 사용될 수 있다. abstract methods는 바디 부분이 없다.</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">animalSound</span><span class="o">();</span> <span class="c1">// public 과 abstract 가 같이 사용되네..?</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Zzz"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 코드를 보면 알 수 있듯이, 하나의 abstract class는 abstract method와 일반적인 method 둘다 가질 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Animal</span> <span class="nc">Obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Animal</span><span class="o">();</span> <span class="c1">// abstract class인 Animal 클래스는 객체를 만들 수 없으므로 에러 발생</span>
</code></pre></div></div>

<p>Abstract class에 접근하기 위해서는 Abstract class를 상속 받는 subclass를 만들어야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Abstract class</span>
<span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Animal</span> <span class="o">{</span>
  <span class="c1">// Abstract method</span>
  <span class="kd">public</span> <span class="kd">abstract</span> <span class="nf">animalSound</span><span class="o">();</span> <span class="c1">//바디 없음</span>
  <span class="c1">// Regular method</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sleep</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Zzz"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// Animal 클래스를 상속받는 Subclass</span>
<span class="kd">class</span> <span class="nc">Pig</span> <span class="kd">extends</span> <span class="nc">Animal</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">animalSound</span><span class="o">()</span> <span class="o">{</span>
    <span class="c1">// 위 Abstract 메소드의 바디가 여기서 작성됨</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"The pig says: wee wee"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Pig</span> <span class="n">myPig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Pig</span><span class="o">();</span> <span class="c1">// Pig 객체 만들기</span>
    <span class="n">myPig</span><span class="o">.</span><span class="na">animalSound</span><span class="o">();</span>
    <span class="n">myPig</span><span class="o">.</span><span class="na">sleep</span><span class="o">();</span> <span class="c1">//Pig 객체가 Anmal 클래스를 상속받으므로 sleep 메소드 사용 가능</span>

  <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>
:ET