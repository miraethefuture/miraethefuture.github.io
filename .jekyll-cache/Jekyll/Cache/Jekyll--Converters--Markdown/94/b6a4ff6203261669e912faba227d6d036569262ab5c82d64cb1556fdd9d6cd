I"7S<p><a href="https://books.apple.com/us/book/develop-in-swift-fundamentals/id1581182804">📂 Develop in Swift Fundamentals</a>
<br /><sub>아래 모든 정보의 출처는 Develop in Swift Fundamentals이며 개인의 학습 용도로만 사용되었음을 밝힙니다.</sub></p>

<h1 id="initializers">Initializers</h1>

<p>모든 structures는 적어도 하나의 initializer를 포함하고 있습니다. Initializer는 어떤 한 type의 새 인스턴스를 리턴하는 function과 유사합니다. 자주 사용되는 많은 types이 argument가 없는 initializer를 가지고 있습니다. 바로 init()입니다.</p>

<p>init() initializer로 생성된 인스턴스들은 기본값을 가집니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">string</span> <span class="o">=</span> <span class="kt">String</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>  <span class="c1">// 기본값 -&gt; ""</span>
  <span class="k">var</span> <span class="nv">int</span> <span class="o">=</span> <span class="kt">Int</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>        <span class="c1">// 기본값 -&gt; 0</span>
  <span class="k">var</span> <span class="nv">bool</span> <span class="o">=</span> <span class="kt">Bool</span><span class="o">.</span><span class="nf">init</span><span class="p">()</span>      <span class="c1">// 기본값 -&gt; false</span>
</code></pre></div></div>

<p>위의 initializer를 아래와 같은 방법으로 더 간단히 작성할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">var</span> <span class="nv">string</span> <span class="o">=</span> <span class="kt">String</span><span class="p">()</span>  <span class="c1">// 기본값 -&gt; ""</span>
  <span class="k">var</span> <span class="nv">int</span> <span class="o">=</span> <span class="kt">Int</span><span class="p">()</span>        <span class="c1">// 기본값 -&gt; 0</span>
  <span class="k">var</span> <span class="nv">bool</span> <span class="o">=</span> <span class="kt">Bool</span><span class="p">()</span>      <span class="c1">// 기본값 -&gt; false</span>
</code></pre></div></div>

<h2 id="default-values">Default Values</h2>

<p>새로운 인스턴스를 생성할 때, Swift는 해당 type의 모든 properties의 값을 요구합니다.</p>

<p>첫번째 방법으로는, Type을 정의할 때 기본값을 줄 수 있습니다. 인스턴스들이 생성될 때 이 값을 이용하게 됩니다. 이 방법은 일정한 기본 값을 가지는 object를 정의할 때 유용하게 사용됩니다.</p>

<p>모든 instance properties에 기본값을 설정해주면, Swift 컴파일러가 자동으로 기본 생성자를 생성합니다.</p>

<p>property의 기본값을 이용해서 커스텀 type의 모든 인스턴스에 공통된 기본적인 상태를 설정할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">Odometer</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">count</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="p">}</span>

  <span class="k">let</span> <span class="nv">odometer</span> <span class="o">=</span> <span class="kt">Odometer</span><span class="p">()</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">odometer</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
  <span class="c1">// 기본값으로 주어진 0을 출력합니다.</span>
  <span class="c1">// 기본 생성자로 생성한 Odometer type의 모든 인스턴스의 count는 기본값 0 가집니다.</span>
</code></pre></div></div>

<h2 id="memberwise-initializer">Memberwise Initializer</h2>

<p>만약 새로운 structure를 정의할 때 initializer를 선언하지 않으면, Swift는 memberwise initializer라는 특별한 initializer를 생성합니다. 이것을 이용하여 생성되는 인스턴스를 위해 property에 값을 설정할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">odometer</span> <span class="o">=</span> <span class="kt">Odometer</span><span class="p">(</span><span class="nv">count</span><span class="p">:</span> <span class="mi">27000</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">odometer</span><span class="o">.</span><span class="n">count</span><span class="p">)</span>
  <span class="c1">// 27000 을 출력합니다.</span>
</code></pre></div></div>

<p>생성되는 각 인스턴스에 기대하는 기본적인 상태가 없을 때 사용하기 좋은 방법입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">Person</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>위의 예시처럼 name이라는 속성을 가지고 있는 structure Person이 있다면, 특정 이름으로 기본값을 설정할 수 없겠지요.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">BankAccount</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">accountNumner</span><span class="p">:</span> <span class="kt">Int</span>
    <span class="k">var</span> <span class="nv">balance</span><span class="p">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="p">}</span>

  <span class="k">let</span> <span class="nv">newAccount</span> <span class="o">=</span> <span class="kt">BankAccount</span><span class="p">(</span><span class="nv">accountNumner</span><span class="p">:</span> <span class="mi">123</span><span class="p">)</span>
  <span class="k">var</span> <span class="nv">tranfferredAccount</span> <span class="o">=</span> <span class="kt">BankAccount</span><span class="p">(</span><span class="nv">accountNumner</span><span class="p">:</span> <span class="mi">456</span><span class="p">,</span> <span class="nv">balance</span><span class="p">:</span> <span class="mi">1200</span><span class="p">)</span>
</code></pre></div></div>

<p>위의 예시에서는, 어떤 속성은 기본값을 가지고 또 다른 어떤 속성은 기본값을 가지지 않습니다. 새 인스턴스를 생성시, 기본값이 없는 속성만 패러미터로 작성해줍니다.</p>

<h2 id="custom-initializers">Custom Initializers</h2>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">Temperature</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">celsius</span><span class="p">:</span> <span class="kt">Double</span>

    <span class="c1">// memberwise initializer</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">celsius</span><span class="p">:</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">self</span><span class="o">.</span><span class="n">celsius</span> <span class="o">=</span> <span class="n">celsius</span>
    <span class="p">}</span>

    <span class="c1">// custom initializer</span>
    <span class="nf">init</span><span class="p">(</span><span class="nv">fahrenheit</span><span class="p">:</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">self</span><span class="o">.</span><span class="n">celsius</span> <span class="o">=</span> <span class="p">(</span><span class="n">fahrenheit</span> <span class="o">-</span> <span class="mi">32</span><span class="p">)</span> <span class="o">/</span> <span class="mf">1.8</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">let</span> <span class="nv">currentTemperature</span> <span class="o">=</span> <span class="kt">Temperature</span><span class="p">(</span><span class="nv">celsius</span><span class="p">:</span> <span class="mf">18.5</span><span class="p">)</span>
  <span class="k">let</span> <span class="nv">boiling</span> <span class="o">=</span> <span class="kt">Temperature</span><span class="p">(</span><span class="nv">fahrenheit</span><span class="p">:</span> <span class="mf">212.0</span><span class="p">)</span>

  <span class="nf">print</span><span class="p">(</span><span class="n">currentTemperature</span><span class="o">.</span><span class="n">celsius</span><span class="p">)</span> <span class="c1">// 18.5 출력</span>
  <span class="nf">print</span><span class="p">(</span><span class="n">boiling</span><span class="o">.</span><span class="n">celsius</span><span class="p">)</span>            <span class="c1">// 100.0 출력</span>
</code></pre></div></div>

<p>위의 예시에서 custom initializer인 init(fahrenheit: Double)는 패러미터로 전달 받은 값으로 계산을 수행하고 결과값을 celsius property에 할당합니다.</p>

<p>Custom initializer를 생성시 Swift가 기본 생성자와 memberwise initializer를 자동으로 생성해주지 않기 때문에 위의 예시처럼 직접 작성해 주어야 합니다.</p>

<p>원한다면, 여러개의 Custom initializer를 작성할 수 있습니다.</p>

<h1 id="instance-methods">Instance Methods</h1>

<p>Instance Methods는 특정 타입의 인스턴스에 호출될 수 있는 functions입니다. Instance Methods는 structure의 속성에 접근하고 수정할 방법을 제공합니다. 그리고 해당 인스턴스의 목적과 관련된 기능을 추가합니다.</p>

<p>Type을 정의할 때 function을 추가해줌으로써 instance methods를 추가할 수 있습니다. 그 후 해당 타입의 인스턴스에 추가해주었던 function을 호출할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">Size</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">width</span><span class="p">:</span> <span class="kt">Double</span>
    <span class="k">var</span> <span class="nv">height</span><span class="p">:</span> <span class="kt">Double</span>

    <span class="kd">func</span> <span class="nf">area</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Double</span> <span class="p">{</span>
      <span class="n">width</span> <span class="o">*</span> <span class="n">height</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">let</span> <span class="nv">someSize</span> <span class="o">=</span> <span class="kt">Size</span><span class="p">(</span><span class="nv">width</span><span class="p">:</span> <span class="mf">10.0</span><span class="p">,</span> <span class="nv">height</span><span class="p">:</span> <span class="mf">5.5</span><span class="p">)</span> <span class="c1">// 인스턴스 생성</span>
  <span class="k">let</span> <span class="nv">area</span> <span class="o">=</span> <span class="n">someSize</span><span class="o">.</span><span class="nf">area</span><span class="p">()</span> <span class="c1">// 55.0 이라는 값이 area에 할당됨.</span>
</code></pre></div></div>

<p>‘Size’ structure를 정의할 때 function ‘area’를 작성해주고, Size의 인스턴스인 ‘someSize’를 생성 후 instance method인 area()를 호출해주었습니다.</p>

<p>someSize 인스턴스의 타입은 Size이고, width와 height는 속성(properties)입니다.<br />
  area()는 Size의 모든 인스턴스에서 호출될 수 있는 instance method입니다.</p>

<h1 id="mutating-methods">Mutating methods</h1>

<p>때때로, 속성의 값을 변경하는 function을 작성해야할 수 있습니다. 이때는 mutating 키워드를 사용합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">Odometer</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">count</span><span class="p">:[</span><span class="kt">Int</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>  

    <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">increment</span><span class="p">()</span> <span class="p">{</span>
      <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="p">}</span>

    <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">increment</span><span class="p">(</span><span class="n">by</span> <span class="nv">amount</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">count</span> <span class="o">+=</span> <span class="n">amount</span>
    <span class="p">}</span>

    <span class="k">mutating</span> <span class="kd">func</span> <span class="nf">reset</span><span class="p">()</span> <span class="p">{</span>
      <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">var</span> <span class="nv">odometer</span> <span class="o">=</span> <span class="kt">Odometer</span><span class="p">()</span> <span class="c1">// count가 기본값 0</span>
  <span class="n">odometer</span><span class="o">.</span><span class="nf">increment</span><span class="p">()</span>
  <span class="n">odometer</span><span class="o">.</span><span class="nf">increment</span><span class="p">(</span><span class="nv">by</span><span class="p">:</span> <span class="mi">15</span><span class="p">)</span>
  <span class="n">odometer</span><span class="o">.</span><span class="nf">reset</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="self">Self</h1>

<p><code>self</code> 는 타입의 현재 인스턴스를 나타냅니다. 인스턴스 메서드나 computed property 안에서 사용됩니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">Car</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">color</span><span class="p">:</span> <span class="kt">Color</span>

    <span class="k">var</span> <span class="nv">description</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
      <span class="k">return</span> <span class="s">"This is a </span><span class="se">\(</span><span class="k">self</span><span class="o">.</span><span class="n">color</span><span class="se">)</span><span class="s"> car."</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>생성자가 속성의 이름과 같은 이름의 패러미터를 가지고 있을 때 self를 사용합니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">struct</span> <span class="kt">Temperature</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">celsius</span><span class="p">:</span> <span class="kt">Double</span>

    <span class="nf">init</span><span class="p">(</span><span class="nv">celsius</span><span class="p">:</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">self</span><span class="o">.</span><span class="n">celsius</span> <span class="o">=</span> <span class="n">celsius</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<h1 id="inheritance">Inheritance</h1>

<p>Structures와 Classes의 가장 큰 차이점은 classes가 계층적인 관계를 가질 수 있다는 것입니다. 모든 클래스는 parent 그리고 child 클래스를 가질 수 있습니다. Parent 클래스는 superclass, child 클래스는 subclass라고 합니다.</p>

<p>가족 관계에서처럼, subclasses는 superclasses로부터 속성(properties)과 메서드를 상속받습니다.</p>

<h2 id="defining-a-base-class">Defining a Base Class</h2>

<p>Base classes는 parent 클래스를 가지지 않는 클래스입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="kt">Vehicle</span> <span class="p">{</span>
      <span class="k">var</span> <span class="nv">currentSpeed</span> <span class="o">=</span> <span class="mf">0.0</span>

      <span class="k">var</span> <span class="nv">description</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
          <span class="s">"traveling at </span><span class="se">\(</span><span class="n">currentSpeed</span><span class="se">)</span><span class="s"> miles per hour"</span>
      <span class="p">}</span>

      <span class="kd">func</span> <span class="nf">makeNoise</span><span class="p">()</span> <span class="p">{</span>
          <span class="c1">// do nothing</span>
      <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">let</span> <span class="nv">someVehicle</span> <span class="o">=</span> <span class="kt">Vehicle</span><span class="p">()</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"Vehicle: </span><span class="se">\(</span><span class="n">someVehicle</span><span class="o">.</span><span class="n">description</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="c1">// Vehicle: traveling at \(currentSpeed) miles per hour 을 출력</span>
</code></pre></div></div>

<p>위의 Vehicle 클래스는 기본값 0.0을 가진 currentSpeed라는 속성과 description 이라는 computed variable, 그리고 makeNoise()라는 메서드를 가지고 있습니다. 이 메서드는 Vehicle 인스턴스에서는 아무것도 수행하지 않지만 subclass에서 커스터 마이징 후 사용될 것입니다.</p>

<p>Vehicle 클래스는 속성과 메서드와 같은 아주 일반적인 특성들을 가지고 있습니다. 이 클래스 자체로는 그다지 유용하게 쓰이지 못할 수 있지만 다른 더 특정한 type을 생성하는 것을 더 쉽게 만들어 줄 것입니다.</p>

<h2 id="create-a-subclass">Create a SubClass</h2>

<p>Subclassing은 기존의 존재하는 클래스를 기초로 새로운 클래스를 생성하는 것을 말합니다. Subclasses는 superclass로부터 속성과 메서드를 상속받고 그것들을 개선하거나 더 구체적으로 만들 수 있습니다. 새 속성과 메서드를 subclass에 추가하는 것도 가능합니다.</p>

<p>아래는 SomeSuperclass로부터 상속받는 새 type인 subclass SomeSubclass를 정의하는 방법입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="kt">SomeSubclass</span><span class="p">:</span> <span class="kt">SomeSuperclass</span> <span class="p">{</span>
      <span class="c1">// subclass 정의</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>아래는 superclass인 Vehicle을 기초로 생성된 subclass Bicycle 입니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">class</span> <span class="kt">Bicycle</span><span class="p">:</span> <span class="kt">Vehicle</span> <span class="p">{</span>
      <span class="k">var</span> <span class="nv">hasBasket</span> <span class="o">=</span> <span class="kc">false</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>Bicycle 클래스는 Vehicle 클래스의 속성 currentSpeed와 description, makeNoise() 메서드를 상속 받습니다.</p>

<p>상속 받은 속성과 메서드 뿐 아니라 새로운 boolean property인 hasBasket을 정의합니다.</p>

<p>Bicycle의 인스턴스에 currentSpeed를 업데이트 할 수 있습니다.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">let</span> <span class="nv">bicycle</span> <span class="o">=</span> <span class="kt">Bicycle</span><span class="p">()</span>
  <span class="n">bicycle</span><span class="o">.</span><span class="n">currentSpeed</span> <span class="o">=</span> <span class="mf">15.0</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"Bicycle: </span><span class="se">\(</span><span class="n">bicycle</span><span class="o">.</span><span class="n">description</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
  <span class="c1">// Bicycle: traveling at 15.0 miles per hour를 출력</span>
</code></pre></div></div>
:ET