I"4<p><a href="https://developer.apple.com/tutorials/app-dev-training#uikit-essentials">iOS App Dev Tutorials: UIKit</a><br />
<sub>아래 모든 정보의 출처는 apple developer 공식 페이지이며 개인의 학습 용도로만 사용되었음을 밝힙니다.</sub></p>

<!-- # Creating a List View  

## Add a Collection View Controller  

  View controller를 스토리보드에 추가해주어 'Today'앱 만들기를 시작해 봅니다.  
  View controllers는 views와 데이터 모델 사이에서 다리 역할을 합니다. 각각의 view controller는 하나의 view 계층을 관리하고, content를 views에 업데이트하고, UI에서 events에 반응하는 역할을 합니다.  

  Interface Builder를 사용하여 collection view controller를 생성합니다. Collection view는 그리드, 행, 열, 테이블의 형태로 cells를 보여줄 수 있습니다.

   -->

<!-- # Adopting Collection Views

  **Collection Views 사용 시작하기.**
  Collection views는 순서가 있는 데이터 항목의 집합을 관리합니다. 그리고 그것을 보여주기 위해 커스텀 가능한 레이아웃을 사용합니다. (사진앱의 그리드 등)

  Collection views를 사용하면 데이터, 레이아웃, 그리고 프레젠테이션의 관련된 문제들을 분리하여 더 강력하고 확장 가능한 앱을 만들 수 있습니다.


## Displaying Collections  

  많은 앱들은 관계된 데이터의 collections를 화면에 보여줍니다. UIKit는 UICollectionView 클래스를 제공하여 연결된 아이템들을 scrollable view안의 cells로 화면에 보여줍니다.  

  Collection views는 융통성있게 셀을 섹션안에 배치합니다. 예를 들면 음악 앱에서 collection view는 긴 목록 형태로 음악들을 화면에 보여줄 수도 있고, 음악들을 인기 순위, 장르, 분위기로 나눈 섹션에 정리하여 보여줄 수 있습니다.  

  Modern collection views는 데이터의 상태에 일어난 변화를 자동으로 화면에 그립니다. 그리고 우리의 코드가 정리되어있도록 돕습니다. 이 article에서는, diffable data sources, composable layouts, 그리고 셀을 배치하는 방법에 대해 알아봅니다.  

  이 article은 collection view를 구성하고 아이템으로 채우는 과정을 아래처럼 묘사합니다.  

  1. Collection view를 위한 데이터 소스를 생성합니다.
  2. Collection view의 셀을 배치하는 Cell provider를 구현합니다.
  3. 현재 데이터의 상태를 가져옵니다.
  4. 가져온 데이터를 UI에 보여줍니다.

### Creating a Diffable Data Source  

  Collection view가 많은 레이아웃과 보여지는 것과 관련된 것들을 책임지기 때문에 우리는 데이터를 관리하는 것에 집중할 수 있습니다.
  제네릭 클래스인 UICollectionViewDiffableDataSource는 안전하고 효과적으로 collection view의 데이터에 일어난 변화를 관리하는 behaviors를 제공합니다.

  ```swift
  typealias DataSource = UICollectionViewDiffableDataSource<Int, ReminderItem>

  func makeDataSource() -> DataSource {
      let reminderCellResistration = self.reminderCellResistration()
      return DataSource(collectionView: collectionView) {

      }

  }
  ``` -->

<h1 id="displaying-cell-info">Displaying Cell info</h1>

<p>앱 ‘Today’는 연속된 셀의 형태로 리마인더의 목록을 화면에 보여주기 위해 콜렉션 뷰를 사용합니다.</p>

<p>이 튜토리얼에서는, 각각의 리마인더에 대한 정보를 화면에 보여줄 셀들을 위한 템플릿으로 제공될 하나의 collection cell을 디자인할 것입니다. 시스템은 언제 어떻게 셀을 화면에 보여줄 것인지 결정합니다.</p>

<h2 id="section-1-format-the-date-and-time">Section 1: Format the Date and Time</h2>

<p>리마인더의 날짜와 시간은 사용자에게 보여질 중요한 속성들입니다. 날짜와 시간의 표기법은 문화, 지역, 언어에 따라 다릅니다.</p>

<p>이 섹션에서는, Foundation 프레임워크의 date-formatting APIs를 사용하여 모든 사용자의 장소에 대한 정확한 날짜와 시간을 보여줄 것입니다.</p>

<h3 id="datetodayswift">Date+Today.swift</h3>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">import</span> <span class="kt">Foundation</span>

  <span class="kd">extension</span> <span class="kt">Date</span> <span class="p">{</span>
      <span class="c1">// a coumputed string property</span>
      <span class="k">var</span> <span class="nv">dayAndTimeText</span><span class="p">:</span> <span class="kt">String</span> <span class="p">{</span>
          <span class="c1">// have to return a string value for dayAndTimeText</span>
          <span class="k">let</span> <span class="nv">timeText</span> <span class="o">=</span> <span class="nf">formatted</span><span class="p">(</span><span class="nv">date</span><span class="p">:</span> <span class="o">.</span><span class="n">omitted</span><span class="p">,</span> <span class="nv">time</span><span class="p">:</span> <span class="o">.</span><span class="n">shortened</span><span class="p">)</span>
          <span class="c1">// self는 timeText를 가리키는 것일까?</span>
          <span class="k">if</span> <span class="kt">Locale</span><span class="o">.</span><span class="n">current</span><span class="o">.</span><span class="n">calendar</span><span class="o">.</span><span class="nf">isDateInToday</span><span class="p">(</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span>
      <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p><strong>formatted(date:time:)</strong> 메서드를 사용해서 시간을 문자열 형태로 보이게 할 것입니다. 그리고 그 결과를 timeText constant에 할당합니다.</p>

<p>시스템은 기본 스타일을 사용하여 현재 위치에 해당하는 시간과 날짜를 문자열 형태로 보여줍니다. <strong>.omitted</strong> 을 패러미터로 통과시켜줌으로써 시간만 나타나도록 합니다.</p>

<p>Today 앱은 현재 달력의 날짜에 해당하는 리마인더의 시간을 “Today at 3:00 PM”의 형식으로 보여줌으로써 빨리 급한 일이라는 것을 알려줄 것입니다. 만약 리마인더가 현재 달력의 날짜에 해당하는 것이 아니라면 “Oct 22 at 3:00 PM”과 같은 방식으로 날짜를 보여줄 것입니다.</p>

<p>“Today at” 부분을 전세계의 사용자들을 위하여 localize할 것입니다. 앱에 번역 테이블을 포함시킵니다.</p>
:ET